circuit Top :
  module Pc :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip branchOp : { taken : UInt<1>, target : UInt<64>}, flip reset : UInt<1>, pc : UInt<64>}

    reg pc : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[If.scala 12:27]
    when io.reset : @[If.scala 13:19]
      pc <= UInt<1>("h0") @[If.scala 14:13]
    else :
      when io.stall : @[If.scala 15:25]
        pc <= pc @[If.scala 16:13]
      else :
        when io.branchOp.taken : @[If.scala 17:34]
          pc <= io.branchOp.target @[If.scala 18:13]
        else :
          node _pc_T = add(pc, UInt<3>("h4")) @[If.scala 20:19]
          node _pc_T_1 = tail(_pc_T, 1) @[If.scala 20:19]
          pc <= _pc_T_1 @[If.scala 20:13]
    io.pc <= pc @[If.scala 22:13]

  module If :
    input clock : Clock
    input reset : Reset
    output io : { flip reset : UInt<1>, flip pc_i : UInt<64>, flip inst_i : UInt<32>, pc_o : UInt<64>, inst_o : UInt<32>}

    node _io_inst_o_T = mux(io.reset, UInt<1>("h0"), io.inst_i) @[If.scala 36:23]
    io.inst_o <= _io_inst_o_T @[If.scala 36:17]
    node _io_pc_o_T = mux(io.reset, UInt<1>("h0"), io.pc_i) @[If.scala 37:23]
    io.pc_o <= _io_pc_o_T @[If.scala 37:17]

  module Inst_Rom :
    input clock : Clock
    input reset : Reset
    output io : { flip flush : UInt<1>, flip reset : UInt<1>, flip addr_i : UInt<64>, inst_o : UInt<32>}

    smem mem : UInt<32> [8192] @[Inst_Rom.scala 15:27]
    reg flush : UInt<1>, clock with :
      reset => (UInt<1>("h0"), flush) @[Inst_Rom.scala 16:24]
    flush <= io.flush @[Inst_Rom.scala 16:24]
    node _io_inst_o_T = or(io.reset, flush) @[Inst_Rom.scala 18:31]
    node _io_inst_o_T_1 = shr(io.addr_i, 2) @[Inst_Rom.scala 18:59]
    node _io_inst_o_T_2 = bits(_io_inst_o_T_1, 12, 0) @[Inst_Rom.scala 18:48]
    infer mport io_inst_o_MPORT = mem[_io_inst_o_T_2], clock @[Inst_Rom.scala 18:48]
    node _io_inst_o_T_3 = mux(_io_inst_o_T, UInt<1>("h0"), io_inst_o_MPORT) @[Inst_Rom.scala 18:21]
    io.inst_o <= _io_inst_o_T_3 @[Inst_Rom.scala 18:15]

  module Regfile :
    input clock : Clock
    input reset : Reset
    output io : { flip id2Rf : { ReadIdx1 : UInt<5>, ReadIdx2 : UInt<5>}, flip writeRfOp : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, rf2Id : { RegData1 : UInt<64>, RegData2 : UInt<64>}}

    wire _rf_WIRE : UInt<64>[31] @[Regfile.scala 15:32]
    _rf_WIRE[0] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[1] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[2] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[3] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[4] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[5] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[6] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[7] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[8] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[9] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[10] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[11] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[12] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[13] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[14] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[15] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[16] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[17] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[18] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[19] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[20] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[21] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[22] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[23] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[24] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[25] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[26] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[27] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[28] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[29] <= UInt<64>("h0") @[Regfile.scala 15:32]
    _rf_WIRE[30] <= UInt<64>("h0") @[Regfile.scala 15:32]
    reg rf : UInt<64>[31], clock with :
      reset => (reset, _rf_WIRE) @[Regfile.scala 15:24]
    rf[0] <= UInt<1>("h0") @[Regfile.scala 16:11]
    when io.writeRfOp.en : @[Regfile.scala 18:26]
      rf[io.writeRfOp.addr] <= io.writeRfOp.data @[Regfile.scala 20:35]
    io.rf2Id.RegData1 <= rf[io.id2Rf.ReadIdx1] @[Regfile.scala 23:23]
    io.rf2Id.RegData2 <= rf[io.id2Rf.ReadIdx2] @[Regfile.scala 24:23]

  module If_Id :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip reset : UInt<1>, flip flush : UInt<1>, flip pc_i : UInt<64>, flip inst_i : UInt<32>, pc_o : UInt<64>, inst_o : UInt<32>}

    reg inst : UInt, clock with :
      reset => (UInt<1>("h0"), inst) @[pipeline-registers.scala 18:23]
    inst <= io.inst_i @[pipeline-registers.scala 18:23]
    reg pc : UInt, clock with :
      reset => (UInt<1>("h0"), pc) @[pipeline-registers.scala 19:23]
    pc <= io.pc_i @[pipeline-registers.scala 19:23]
    node _T = or(io.reset, io.flush) @[pipeline-registers.scala 21:19]
    when _T : @[pipeline-registers.scala 21:30]
      inst <= UInt<1>("h0") @[pipeline-registers.scala 22:17]
      pc <= UInt<1>("h0") @[pipeline-registers.scala 23:17]
    else :
      when io.stall : @[pipeline-registers.scala 24:25]
        inst <= inst @[pipeline-registers.scala 25:17]
        pc <= pc @[pipeline-registers.scala 26:17]
    io.inst_o <= inst @[pipeline-registers.scala 28:15]
    io.pc_o <= pc @[pipeline-registers.scala 29:15]

  module Id :
    input clock : Clock
    input reset : Reset
    output io : { flip pc : UInt<64>, flip inst_i : UInt<32>, flip rf2Id : { RegData1 : UInt<64>, RegData2 : UInt<64>}, flip prev_is_load : UInt<1>, flip load_dest : UInt<5>, flip exForwarding : { addr : UInt<5>, data : UInt<64>}, flip memForwarding : { addr : UInt<5>, data : UInt<64>}, flip wbForwarding : { addr : UInt<5>, data : UInt<64>}, stall_req : UInt<1>, id2Rf : { ReadIdx1 : UInt<5>, ReadIdx2 : UInt<5>}, decInfo : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, opcode : UInt<7>, aluop : UInt<6>, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>}}, branchOp : { taken : UInt<1>, target : UInt<64>}, flush_req : UInt<1>}

    wire oprand1 : UInt<64> @[Id.scala 31:24]
    oprand1 <= UInt<1>("h0") @[Id.scala 31:53]
    wire oprand2 : UInt<64> @[Id.scala 32:24]
    oprand2 <= UInt<1>("h0") @[Id.scala 32:53]
    wire wreg : UInt<1> @[Id.scala 33:24]
    wreg <= UInt<1>("h0") @[Id.scala 33:53]
    node funct3 = bits(io.inst_i, 14, 12) @[Id.scala 36:24]
    node rd = bits(io.inst_i, 11, 7) @[Id.scala 41:24]
    node rs1 = bits(io.inst_i, 19, 15) @[Id.scala 42:24]
    node rs2 = bits(io.inst_i, 24, 20) @[Id.scala 43:24]
    node imm_I = bits(io.inst_i, 31, 20) @[Id.scala 45:24]
    node _imm_S_T = bits(io.inst_i, 31, 25) @[Id.scala 46:28]
    node _imm_S_T_1 = bits(io.inst_i, 11, 7) @[Id.scala 46:41]
    node imm_S = cat(_imm_S_T, _imm_S_T_1) @[Cat.scala 31:58]
    node _imm_B_T = bits(io.inst_i, 31, 31) @[Id.scala 47:28]
    node _imm_B_T_1 = bits(io.inst_i, 7, 7) @[Id.scala 47:38]
    node _imm_B_T_2 = bits(io.inst_i, 30, 25) @[Id.scala 47:47]
    node _imm_B_T_3 = bits(io.inst_i, 11, 8) @[Id.scala 47:60]
    node imm_B_lo = cat(_imm_B_T_2, _imm_B_T_3) @[Cat.scala 31:58]
    node imm_B_hi = cat(_imm_B_T, _imm_B_T_1) @[Cat.scala 31:58]
    node _imm_B_T_4 = cat(imm_B_hi, imm_B_lo) @[Cat.scala 31:58]
    node imm_B = shl(_imm_B_T_4, 1) @[Id.scala 47:68]
    node _branch_target_T = add(imm_B, io.pc) @[Id.scala 49:33]
    node branch_target = tail(_branch_target_T, 1) @[Id.scala 49:33]
    node _decRes_T = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_1 = eq(UInt<6>("h33"), _decRes_T) @[Lookup.scala 31:38]
    node _decRes_T_2 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_3 = eq(UInt<31>("h40000033"), _decRes_T_2) @[Lookup.scala 31:38]
    node _decRes_T_4 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_5 = eq(UInt<13>("h1033"), _decRes_T_4) @[Lookup.scala 31:38]
    node _decRes_T_6 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_7 = eq(UInt<14>("h2033"), _decRes_T_6) @[Lookup.scala 31:38]
    node _decRes_T_8 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_9 = eq(UInt<14>("h3033"), _decRes_T_8) @[Lookup.scala 31:38]
    node _decRes_T_10 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_11 = eq(UInt<15>("h4033"), _decRes_T_10) @[Lookup.scala 31:38]
    node _decRes_T_12 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_13 = eq(UInt<15>("h5033"), _decRes_T_12) @[Lookup.scala 31:38]
    node _decRes_T_14 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_15 = eq(UInt<31>("h40005033"), _decRes_T_14) @[Lookup.scala 31:38]
    node _decRes_T_16 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_17 = eq(UInt<15>("h6033"), _decRes_T_16) @[Lookup.scala 31:38]
    node _decRes_T_18 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_19 = eq(UInt<15>("h7033"), _decRes_T_18) @[Lookup.scala 31:38]
    node _decRes_T_20 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_21 = eq(UInt<5>("h13"), _decRes_T_20) @[Lookup.scala 31:38]
    node _decRes_T_22 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_23 = eq(UInt<14>("h2013"), _decRes_T_22) @[Lookup.scala 31:38]
    node _decRes_T_24 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_25 = eq(UInt<14>("h3013"), _decRes_T_24) @[Lookup.scala 31:38]
    node _decRes_T_26 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_27 = eq(UInt<15>("h4013"), _decRes_T_26) @[Lookup.scala 31:38]
    node _decRes_T_28 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_29 = eq(UInt<15>("h6013"), _decRes_T_28) @[Lookup.scala 31:38]
    node _decRes_T_30 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_31 = eq(UInt<15>("h7013"), _decRes_T_30) @[Lookup.scala 31:38]
    node _decRes_T_32 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_33 = eq(UInt<13>("h1013"), _decRes_T_32) @[Lookup.scala 31:38]
    node _decRes_T_34 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_35 = eq(UInt<15>("h5013"), _decRes_T_34) @[Lookup.scala 31:38]
    node _decRes_T_36 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_37 = eq(UInt<31>("h40005013"), _decRes_T_36) @[Lookup.scala 31:38]
    node _decRes_T_38 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_39 = eq(UInt<2>("h3"), _decRes_T_38) @[Lookup.scala 31:38]
    node _decRes_T_40 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_41 = eq(UInt<13>("h1003"), _decRes_T_40) @[Lookup.scala 31:38]
    node _decRes_T_42 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_43 = eq(UInt<14>("h2003"), _decRes_T_42) @[Lookup.scala 31:38]
    node _decRes_T_44 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_45 = eq(UInt<15>("h4003"), _decRes_T_44) @[Lookup.scala 31:38]
    node _decRes_T_46 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_47 = eq(UInt<15>("h5003"), _decRes_T_46) @[Lookup.scala 31:38]
    node _decRes_T_48 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_49 = eq(UInt<6>("h23"), _decRes_T_48) @[Lookup.scala 31:38]
    node _decRes_T_50 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_51 = eq(UInt<13>("h1023"), _decRes_T_50) @[Lookup.scala 31:38]
    node _decRes_T_52 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_53 = eq(UInt<14>("h2023"), _decRes_T_52) @[Lookup.scala 31:38]
    node _decRes_T_54 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_55 = eq(UInt<26>("h2000033"), _decRes_T_54) @[Lookup.scala 31:38]
    node _decRes_T_56 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_57 = eq(UInt<26>("h2001033"), _decRes_T_56) @[Lookup.scala 31:38]
    node _decRes_T_58 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_59 = eq(UInt<26>("h2002033"), _decRes_T_58) @[Lookup.scala 31:38]
    node _decRes_T_60 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_61 = eq(UInt<26>("h2004033"), _decRes_T_60) @[Lookup.scala 31:38]
    node _decRes_T_62 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_63 = eq(UInt<26>("h2005033"), _decRes_T_62) @[Lookup.scala 31:38]
    node _decRes_T_64 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_65 = eq(UInt<26>("h2006033"), _decRes_T_64) @[Lookup.scala 31:38]
    node _decRes_T_66 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_67 = eq(UInt<26>("h2007033"), _decRes_T_66) @[Lookup.scala 31:38]
    node _decRes_T_68 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_69 = eq(UInt<7>("h63"), _decRes_T_68) @[Lookup.scala 31:38]
    node _decRes_T_70 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_71 = eq(UInt<13>("h1063"), _decRes_T_70) @[Lookup.scala 31:38]
    node _decRes_T_72 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_73 = eq(UInt<15>("h4063"), _decRes_T_72) @[Lookup.scala 31:38]
    node _decRes_T_74 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_75 = eq(UInt<15>("h5063"), _decRes_T_74) @[Lookup.scala 31:38]
    node _decRes_T_76 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_77 = eq(UInt<15>("h6063"), _decRes_T_76) @[Lookup.scala 31:38]
    node _decRes_T_78 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_79 = eq(UInt<15>("h7063"), _decRes_T_78) @[Lookup.scala 31:38]
    node _decRes_T_80 = mux(_decRes_T_79, UInt<4>("h4"), UInt<4>("h0")) @[Lookup.scala 34:39]
    node _decRes_T_81 = mux(_decRes_T_77, UInt<4>("h4"), _decRes_T_80) @[Lookup.scala 34:39]
    node _decRes_T_82 = mux(_decRes_T_75, UInt<4>("h4"), _decRes_T_81) @[Lookup.scala 34:39]
    node _decRes_T_83 = mux(_decRes_T_73, UInt<4>("h4"), _decRes_T_82) @[Lookup.scala 34:39]
    node _decRes_T_84 = mux(_decRes_T_71, UInt<4>("h4"), _decRes_T_83) @[Lookup.scala 34:39]
    node _decRes_T_85 = mux(_decRes_T_69, UInt<4>("h4"), _decRes_T_84) @[Lookup.scala 34:39]
    node _decRes_T_86 = mux(_decRes_T_67, UInt<4>("h1"), _decRes_T_85) @[Lookup.scala 34:39]
    node _decRes_T_87 = mux(_decRes_T_65, UInt<4>("h1"), _decRes_T_86) @[Lookup.scala 34:39]
    node _decRes_T_88 = mux(_decRes_T_63, UInt<4>("h1"), _decRes_T_87) @[Lookup.scala 34:39]
    node _decRes_T_89 = mux(_decRes_T_61, UInt<4>("h1"), _decRes_T_88) @[Lookup.scala 34:39]
    node _decRes_T_90 = mux(_decRes_T_59, UInt<4>("h1"), _decRes_T_89) @[Lookup.scala 34:39]
    node _decRes_T_91 = mux(_decRes_T_57, UInt<4>("h1"), _decRes_T_90) @[Lookup.scala 34:39]
    node _decRes_T_92 = mux(_decRes_T_55, UInt<4>("h1"), _decRes_T_91) @[Lookup.scala 34:39]
    node _decRes_T_93 = mux(_decRes_T_53, UInt<4>("h3"), _decRes_T_92) @[Lookup.scala 34:39]
    node _decRes_T_94 = mux(_decRes_T_51, UInt<4>("h3"), _decRes_T_93) @[Lookup.scala 34:39]
    node _decRes_T_95 = mux(_decRes_T_49, UInt<4>("h3"), _decRes_T_94) @[Lookup.scala 34:39]
    node _decRes_T_96 = mux(_decRes_T_47, UInt<4>("h2"), _decRes_T_95) @[Lookup.scala 34:39]
    node _decRes_T_97 = mux(_decRes_T_45, UInt<4>("h2"), _decRes_T_96) @[Lookup.scala 34:39]
    node _decRes_T_98 = mux(_decRes_T_43, UInt<4>("h2"), _decRes_T_97) @[Lookup.scala 34:39]
    node _decRes_T_99 = mux(_decRes_T_41, UInt<4>("h2"), _decRes_T_98) @[Lookup.scala 34:39]
    node _decRes_T_100 = mux(_decRes_T_39, UInt<4>("h2"), _decRes_T_99) @[Lookup.scala 34:39]
    node _decRes_T_101 = mux(_decRes_T_37, UInt<4>("h2"), _decRes_T_100) @[Lookup.scala 34:39]
    node _decRes_T_102 = mux(_decRes_T_35, UInt<4>("h2"), _decRes_T_101) @[Lookup.scala 34:39]
    node _decRes_T_103 = mux(_decRes_T_33, UInt<4>("h2"), _decRes_T_102) @[Lookup.scala 34:39]
    node _decRes_T_104 = mux(_decRes_T_31, UInt<4>("h2"), _decRes_T_103) @[Lookup.scala 34:39]
    node _decRes_T_105 = mux(_decRes_T_29, UInt<4>("h2"), _decRes_T_104) @[Lookup.scala 34:39]
    node _decRes_T_106 = mux(_decRes_T_27, UInt<4>("h2"), _decRes_T_105) @[Lookup.scala 34:39]
    node _decRes_T_107 = mux(_decRes_T_25, UInt<4>("h2"), _decRes_T_106) @[Lookup.scala 34:39]
    node _decRes_T_108 = mux(_decRes_T_23, UInt<4>("h2"), _decRes_T_107) @[Lookup.scala 34:39]
    node _decRes_T_109 = mux(_decRes_T_21, UInt<4>("h2"), _decRes_T_108) @[Lookup.scala 34:39]
    node _decRes_T_110 = mux(_decRes_T_19, UInt<4>("h1"), _decRes_T_109) @[Lookup.scala 34:39]
    node _decRes_T_111 = mux(_decRes_T_17, UInt<4>("h1"), _decRes_T_110) @[Lookup.scala 34:39]
    node _decRes_T_112 = mux(_decRes_T_15, UInt<4>("h1"), _decRes_T_111) @[Lookup.scala 34:39]
    node _decRes_T_113 = mux(_decRes_T_13, UInt<4>("h1"), _decRes_T_112) @[Lookup.scala 34:39]
    node _decRes_T_114 = mux(_decRes_T_11, UInt<4>("h1"), _decRes_T_113) @[Lookup.scala 34:39]
    node _decRes_T_115 = mux(_decRes_T_9, UInt<4>("h1"), _decRes_T_114) @[Lookup.scala 34:39]
    node _decRes_T_116 = mux(_decRes_T_7, UInt<4>("h1"), _decRes_T_115) @[Lookup.scala 34:39]
    node _decRes_T_117 = mux(_decRes_T_5, UInt<4>("h1"), _decRes_T_116) @[Lookup.scala 34:39]
    node _decRes_T_118 = mux(_decRes_T_3, UInt<4>("h1"), _decRes_T_117) @[Lookup.scala 34:39]
    node decRes_0 = mux(_decRes_T_1, UInt<4>("h1"), _decRes_T_118) @[Lookup.scala 34:39]
    node _decRes_T_119 = mux(_decRes_T_79, UInt<3>("h7"), UInt<5>("h0")) @[Lookup.scala 34:39]
    node _decRes_T_120 = mux(_decRes_T_77, UInt<3>("h6"), _decRes_T_119) @[Lookup.scala 34:39]
    node _decRes_T_121 = mux(_decRes_T_75, UInt<3>("h5"), _decRes_T_120) @[Lookup.scala 34:39]
    node _decRes_T_122 = mux(_decRes_T_73, UInt<3>("h4"), _decRes_T_121) @[Lookup.scala 34:39]
    node _decRes_T_123 = mux(_decRes_T_71, UInt<3>("h1"), _decRes_T_122) @[Lookup.scala 34:39]
    node _decRes_T_124 = mux(_decRes_T_69, UInt<3>("h0"), _decRes_T_123) @[Lookup.scala 34:39]
    node _decRes_T_125 = mux(_decRes_T_67, UInt<5>("h12"), _decRes_T_124) @[Lookup.scala 34:39]
    node _decRes_T_126 = mux(_decRes_T_65, UInt<5>("h11"), _decRes_T_125) @[Lookup.scala 34:39]
    node _decRes_T_127 = mux(_decRes_T_63, UInt<5>("h10"), _decRes_T_126) @[Lookup.scala 34:39]
    node _decRes_T_128 = mux(_decRes_T_61, UInt<5>("hf"), _decRes_T_127) @[Lookup.scala 34:39]
    node _decRes_T_129 = mux(_decRes_T_59, UInt<5>("hd"), _decRes_T_128) @[Lookup.scala 34:39]
    node _decRes_T_130 = mux(_decRes_T_57, UInt<5>("hc"), _decRes_T_129) @[Lookup.scala 34:39]
    node _decRes_T_131 = mux(_decRes_T_55, UInt<5>("hb"), _decRes_T_130) @[Lookup.scala 34:39]
    node _decRes_T_132 = mux(_decRes_T_53, UInt<5>("h14"), _decRes_T_131) @[Lookup.scala 34:39]
    node _decRes_T_133 = mux(_decRes_T_51, UInt<5>("h15"), _decRes_T_132) @[Lookup.scala 34:39]
    node _decRes_T_134 = mux(_decRes_T_49, UInt<5>("h16"), _decRes_T_133) @[Lookup.scala 34:39]
    node _decRes_T_135 = mux(_decRes_T_47, UInt<5>("h1b"), _decRes_T_134) @[Lookup.scala 34:39]
    node _decRes_T_136 = mux(_decRes_T_45, UInt<5>("h1d"), _decRes_T_135) @[Lookup.scala 34:39]
    node _decRes_T_137 = mux(_decRes_T_43, UInt<5>("h18"), _decRes_T_136) @[Lookup.scala 34:39]
    node _decRes_T_138 = mux(_decRes_T_41, UInt<5>("h1a"), _decRes_T_137) @[Lookup.scala 34:39]
    node _decRes_T_139 = mux(_decRes_T_39, UInt<5>("h1c"), _decRes_T_138) @[Lookup.scala 34:39]
    node _decRes_T_140 = mux(_decRes_T_37, UInt<5>("h9"), _decRes_T_139) @[Lookup.scala 34:39]
    node _decRes_T_141 = mux(_decRes_T_35, UInt<5>("h8"), _decRes_T_140) @[Lookup.scala 34:39]
    node _decRes_T_142 = mux(_decRes_T_33, UInt<5>("h7"), _decRes_T_141) @[Lookup.scala 34:39]
    node _decRes_T_143 = mux(_decRes_T_31, UInt<5>("h6"), _decRes_T_142) @[Lookup.scala 34:39]
    node _decRes_T_144 = mux(_decRes_T_29, UInt<5>("h5"), _decRes_T_143) @[Lookup.scala 34:39]
    node _decRes_T_145 = mux(_decRes_T_27, UInt<5>("h4"), _decRes_T_144) @[Lookup.scala 34:39]
    node _decRes_T_146 = mux(_decRes_T_25, UInt<5>("h3"), _decRes_T_145) @[Lookup.scala 34:39]
    node _decRes_T_147 = mux(_decRes_T_23, UInt<5>("h2"), _decRes_T_146) @[Lookup.scala 34:39]
    node _decRes_T_148 = mux(_decRes_T_21, UInt<5>("h0"), _decRes_T_147) @[Lookup.scala 34:39]
    node _decRes_T_149 = mux(_decRes_T_19, UInt<5>("h6"), _decRes_T_148) @[Lookup.scala 34:39]
    node _decRes_T_150 = mux(_decRes_T_17, UInt<5>("h5"), _decRes_T_149) @[Lookup.scala 34:39]
    node _decRes_T_151 = mux(_decRes_T_15, UInt<5>("h9"), _decRes_T_150) @[Lookup.scala 34:39]
    node _decRes_T_152 = mux(_decRes_T_13, UInt<5>("h8"), _decRes_T_151) @[Lookup.scala 34:39]
    node _decRes_T_153 = mux(_decRes_T_11, UInt<5>("h4"), _decRes_T_152) @[Lookup.scala 34:39]
    node _decRes_T_154 = mux(_decRes_T_9, UInt<5>("h3"), _decRes_T_153) @[Lookup.scala 34:39]
    node _decRes_T_155 = mux(_decRes_T_7, UInt<5>("h2"), _decRes_T_154) @[Lookup.scala 34:39]
    node _decRes_T_156 = mux(_decRes_T_5, UInt<5>("h7"), _decRes_T_155) @[Lookup.scala 34:39]
    node _decRes_T_157 = mux(_decRes_T_3, UInt<5>("h1"), _decRes_T_156) @[Lookup.scala 34:39]
    node aluop = mux(_decRes_T_1, UInt<5>("h0"), _decRes_T_157) @[Lookup.scala 34:39]
    node _rs1Val_T = eq(rs1, UInt<1>("h0")) @[Id.scala 56:14]
    node _rs1Val_T_1 = eq(rs1, io.wbForwarding.addr) @[Id.scala 57:14]
    node _rs1Val_T_2 = eq(rs1, io.memForwarding.addr) @[Id.scala 58:14]
    node _rs1Val_T_3 = eq(rs1, io.exForwarding.addr) @[Id.scala 59:14]
    node _rs1Val_T_4 = mux(_rs1Val_T_3, io.exForwarding.data, io.rf2Id.RegData1) @[Mux.scala 47:70]
    node _rs1Val_T_5 = mux(_rs1Val_T_2, io.memForwarding.data, _rs1Val_T_4) @[Mux.scala 47:70]
    node _rs1Val_T_6 = mux(_rs1Val_T_1, io.wbForwarding.data, _rs1Val_T_5) @[Mux.scala 47:70]
    node rs1Val = mux(_rs1Val_T, UInt<1>("h0"), _rs1Val_T_6) @[Mux.scala 47:70]
    node _rs2Val_T = eq(rs2, UInt<1>("h0")) @[Id.scala 64:14]
    node _rs2Val_T_1 = eq(rs2, io.wbForwarding.addr) @[Id.scala 65:14]
    node _rs2Val_T_2 = eq(rs2, io.memForwarding.addr) @[Id.scala 66:14]
    node _rs2Val_T_3 = eq(rs2, io.exForwarding.addr) @[Id.scala 67:14]
    node _rs2Val_T_4 = mux(_rs2Val_T_3, io.exForwarding.data, io.rf2Id.RegData2) @[Mux.scala 47:70]
    node _rs2Val_T_5 = mux(_rs2Val_T_2, io.memForwarding.data, _rs2Val_T_4) @[Mux.scala 47:70]
    node _rs2Val_T_6 = mux(_rs2Val_T_1, io.wbForwarding.data, _rs2Val_T_5) @[Mux.scala 47:70]
    node rs2Val = mux(_rs2Val_T, UInt<1>("h0"), _rs2Val_T_6) @[Mux.scala 47:70]
    wire _io_decInfo_WIRE : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, opcode : UInt<7>, aluop : UInt<6>, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>}} @[Id.scala 71:36]
    _io_decInfo_WIRE.loadOp.dest <= UInt<5>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.loadOp.Width <= UInt<2>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.loadOp.addr <= UInt<64>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.loadOp.isLoad <= UInt<1>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.storeOp.Width <= UInt<2>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.storeOp.data <= UInt<64>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.storeOp.addr <= UInt<64>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.storeOp.en <= UInt<1>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.aluop <= UInt<6>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.opcode <= UInt<7>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.wreg <= UInt<1>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.rd <= UInt<5>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.oprand2 <= UInt<64>("h0") @[Id.scala 71:36]
    _io_decInfo_WIRE.oprand1 <= UInt<64>("h0") @[Id.scala 71:36]
    io.decInfo <= _io_decInfo_WIRE @[Id.scala 71:21]
    wire _io_branchOp_WIRE : { taken : UInt<1>, target : UInt<64>} @[Id.scala 73:36]
    _io_branchOp_WIRE.target <= UInt<64>("h0") @[Id.scala 73:36]
    _io_branchOp_WIRE.taken <= UInt<1>("h0") @[Id.scala 73:36]
    io.branchOp <= _io_branchOp_WIRE @[Id.scala 73:21]
    io.flush_req <= UInt<1>("h0") @[Id.scala 74:21]
    io.stall_req <= UInt<1>("h0") @[Id.scala 75:21]
    node _T = eq(io.decInfo.opcode, UInt<2>("h3")) @[Id.scala 77:28]
    when _T : @[Id.scala 77:46]
      io.decInfo.loadOp.isLoad <= UInt<1>("h1") @[Id.scala 78:34]
      node _io_decInfo_loadOp_Width_T = eq(UInt<5>("h1c"), aluop) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_Width_T_1 = mux(_io_decInfo_loadOp_Width_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
      node _io_decInfo_loadOp_Width_T_2 = eq(UInt<5>("h1a"), aluop) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_Width_T_3 = mux(_io_decInfo_loadOp_Width_T_2, UInt<1>("h1"), _io_decInfo_loadOp_Width_T_1) @[Mux.scala 81:58]
      node _io_decInfo_loadOp_Width_T_4 = eq(UInt<5>("h18"), aluop) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_Width_T_5 = mux(_io_decInfo_loadOp_Width_T_4, UInt<2>("h2"), _io_decInfo_loadOp_Width_T_3) @[Mux.scala 81:58]
      io.decInfo.loadOp.Width <= _io_decInfo_loadOp_Width_T_5 @[Id.scala 81:34]
      io.decInfo.loadOp.dest <= rd @[Id.scala 84:34]
    when io.prev_is_load : @[Id.scala 88:26]
      node _T_1 = eq(io.load_dest, rs1) @[Id.scala 89:27]
      node _T_2 = eq(io.load_dest, rs2) @[Id.scala 89:50]
      node _T_3 = or(_T_1, _T_2) @[Id.scala 89:35]
      when _T_3 : @[Id.scala 89:58]
        io.stall_req <= UInt<1>("h1") @[Id.scala 90:29]
    node _T_4 = eq(UInt<4>("h0"), decRes_0) @[Id.scala 95:21]
    when _T_4 : @[Id.scala 95:21]
      oprand1 <= UInt<1>("h0") @[Id.scala 97:29]
      oprand2 <= UInt<1>("h0") @[Id.scala 98:29]
      wreg <= UInt<1>("h0") @[Id.scala 99:29]
    else :
      node _T_5 = eq(UInt<4>("h1"), decRes_0) @[Id.scala 95:21]
      when _T_5 : @[Id.scala 95:21]
        oprand1 <= rs1Val @[Id.scala 102:29]
        oprand2 <= rs2Val @[Id.scala 103:29]
        wreg <= UInt<1>("h1") @[Id.scala 104:29]
      else :
        node _T_6 = eq(UInt<4>("h2"), decRes_0) @[Id.scala 95:21]
        when _T_6 : @[Id.scala 95:21]
          oprand1 <= rs1Val @[Id.scala 107:29]
          oprand2 <= imm_I @[Id.scala 108:29]
          wreg <= UInt<1>("h1") @[Id.scala 109:29]
        else :
          node _T_7 = eq(UInt<4>("h3"), decRes_0) @[Id.scala 95:21]
          when _T_7 : @[Id.scala 95:21]
            oprand1 <= rs1Val @[Id.scala 114:29]
            oprand2 <= imm_S @[Id.scala 115:29]
            wreg <= UInt<1>("h0") @[Id.scala 116:29]
            io.decInfo.storeOp.data <= rs2Val @[Id.scala 118:38]
            io.decInfo.storeOp.en <= UInt<1>("h1") @[Id.scala 119:38]
            node _io_decInfo_storeOp_Width_T = eq(UInt<5>("h16"), aluop) @[Mux.scala 81:61]
            node _io_decInfo_storeOp_Width_T_1 = mux(_io_decInfo_storeOp_Width_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
            node _io_decInfo_storeOp_Width_T_2 = eq(UInt<5>("h15"), aluop) @[Mux.scala 81:61]
            node _io_decInfo_storeOp_Width_T_3 = mux(_io_decInfo_storeOp_Width_T_2, UInt<1>("h1"), _io_decInfo_storeOp_Width_T_1) @[Mux.scala 81:58]
            node _io_decInfo_storeOp_Width_T_4 = eq(UInt<5>("h14"), aluop) @[Mux.scala 81:61]
            node _io_decInfo_storeOp_Width_T_5 = mux(_io_decInfo_storeOp_Width_T_4, UInt<2>("h2"), _io_decInfo_storeOp_Width_T_3) @[Mux.scala 81:58]
            io.decInfo.storeOp.Width <= _io_decInfo_storeOp_Width_T_5 @[Id.scala 120:38]
          else :
            node _T_8 = eq(UInt<4>("h4"), decRes_0) @[Id.scala 95:21]
            when _T_8 : @[Id.scala 95:21]
              node _taken_T = eq(rs1Val, rs2Val) @[Id.scala 127:35]
              node _taken_T_1 = neq(rs1Val, rs2Val) @[Id.scala 128:35]
              node _taken_T_2 = asSInt(rs1Val) @[Id.scala 129:34]
              node _taken_T_3 = asSInt(rs2Val) @[Id.scala 129:51]
              node _taken_T_4 = lt(_taken_T_2, _taken_T_3) @[Id.scala 129:41]
              node _taken_T_5 = asSInt(rs1Val) @[Id.scala 130:34]
              node _taken_T_6 = asSInt(rs2Val) @[Id.scala 130:51]
              node _taken_T_7 = geq(_taken_T_5, _taken_T_6) @[Id.scala 130:41]
              node _taken_T_8 = lt(rs1Val, rs2Val) @[Id.scala 131:35]
              node _taken_T_9 = geq(rs1Val, rs2Val) @[Id.scala 132:35]
              node _taken_T_10 = eq(UInt<3>("h0"), funct3) @[Mux.scala 81:61]
              node _taken_T_11 = mux(_taken_T_10, _taken_T, UInt<1>("h0")) @[Mux.scala 81:58]
              node _taken_T_12 = eq(UInt<3>("h1"), funct3) @[Mux.scala 81:61]
              node _taken_T_13 = mux(_taken_T_12, _taken_T_1, _taken_T_11) @[Mux.scala 81:58]
              node _taken_T_14 = eq(UInt<3>("h4"), funct3) @[Mux.scala 81:61]
              node _taken_T_15 = mux(_taken_T_14, _taken_T_4, _taken_T_13) @[Mux.scala 81:58]
              node _taken_T_16 = eq(UInt<3>("h5"), funct3) @[Mux.scala 81:61]
              node _taken_T_17 = mux(_taken_T_16, _taken_T_7, _taken_T_15) @[Mux.scala 81:58]
              node _taken_T_18 = eq(UInt<3>("h6"), funct3) @[Mux.scala 81:61]
              node _taken_T_19 = mux(_taken_T_18, _taken_T_8, _taken_T_17) @[Mux.scala 81:58]
              node _taken_T_20 = eq(UInt<3>("h7"), funct3) @[Mux.scala 81:61]
              node taken = mux(_taken_T_20, _taken_T_9, _taken_T_19) @[Mux.scala 81:58]
              io.branchOp.taken <= taken @[Id.scala 134:33]
              node _io_branchOp_target_T = mux(taken, branch_target, io.pc) @[Id.scala 135:39]
              io.branchOp.target <= _io_branchOp_target_T @[Id.scala 135:33]
              node _io_flush_req_T = mux(taken, UInt<1>("h1"), UInt<1>("h0")) @[Id.scala 136:39]
              io.flush_req <= _io_flush_req_T @[Id.scala 136:33]
    io.decInfo.oprand1 <= oprand1 @[Id.scala 140:26]
    io.decInfo.oprand2 <= oprand2 @[Id.scala 141:26]
    io.decInfo.rd <= rd @[Id.scala 142:26]
    node _io_decInfo_opcode_T = bits(io.inst_i, 6, 0) @[Id.scala 143:33]
    io.decInfo.opcode <= _io_decInfo_opcode_T @[Id.scala 143:26]
    io.decInfo.aluop <= aluop @[Id.scala 144:26]
    io.decInfo.wreg <= wreg @[Id.scala 145:26]
    io.id2Rf.ReadIdx1 <= rs1 @[Id.scala 147:25]
    io.id2Rf.ReadIdx2 <= rs2 @[Id.scala 148:25]

  module Id_Ex :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip flush : UInt<1>, flip reset : UInt<1>, flip prev_is_load_i : UInt<1>, flip decInfo_i : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, opcode : UInt<7>, aluop : UInt<6>, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>}}, decInfo_o : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, opcode : UInt<7>, aluop : UInt<6>, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>}}, prev_is_load_o : UInt<1>, load_dest_o : UInt<5>}

    reg decInfo : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, opcode : UInt<7>, aluop : UInt<6>, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>}}, clock with :
      reset => (UInt<1>("h0"), decInfo) @[pipeline-registers.scala 46:32]
    decInfo.loadOp.dest <= io.decInfo_i.loadOp.dest @[pipeline-registers.scala 46:32]
    decInfo.loadOp.Width <= io.decInfo_i.loadOp.Width @[pipeline-registers.scala 46:32]
    decInfo.loadOp.addr <= io.decInfo_i.loadOp.addr @[pipeline-registers.scala 46:32]
    decInfo.loadOp.isLoad <= io.decInfo_i.loadOp.isLoad @[pipeline-registers.scala 46:32]
    decInfo.storeOp.Width <= io.decInfo_i.storeOp.Width @[pipeline-registers.scala 46:32]
    decInfo.storeOp.data <= io.decInfo_i.storeOp.data @[pipeline-registers.scala 46:32]
    decInfo.storeOp.addr <= io.decInfo_i.storeOp.addr @[pipeline-registers.scala 46:32]
    decInfo.storeOp.en <= io.decInfo_i.storeOp.en @[pipeline-registers.scala 46:32]
    decInfo.aluop <= io.decInfo_i.aluop @[pipeline-registers.scala 46:32]
    decInfo.opcode <= io.decInfo_i.opcode @[pipeline-registers.scala 46:32]
    decInfo.wreg <= io.decInfo_i.wreg @[pipeline-registers.scala 46:32]
    decInfo.rd <= io.decInfo_i.rd @[pipeline-registers.scala 46:32]
    decInfo.oprand2 <= io.decInfo_i.oprand2 @[pipeline-registers.scala 46:32]
    decInfo.oprand1 <= io.decInfo_i.oprand1 @[pipeline-registers.scala 46:32]
    reg prev_is_load : UInt<1>, clock with :
      reset => (UInt<1>("h0"), prev_is_load) @[pipeline-registers.scala 47:32]
    prev_is_load <= io.prev_is_load_i @[pipeline-registers.scala 47:32]
    reg load_dest : UInt, clock with :
      reset => (UInt<1>("h0"), load_dest) @[pipeline-registers.scala 48:32]
    load_dest <= io.decInfo_i.loadOp.dest @[pipeline-registers.scala 48:32]
    node _T = or(io.reset, io.flush) @[pipeline-registers.scala 50:19]
    when _T : @[pipeline-registers.scala 50:30]
      wire _decInfo_WIRE : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, opcode : UInt<7>, aluop : UInt<6>, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>}} @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.loadOp.dest <= UInt<5>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.loadOp.Width <= UInt<2>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.loadOp.addr <= UInt<64>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.loadOp.isLoad <= UInt<1>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.storeOp.Width <= UInt<2>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.storeOp.data <= UInt<64>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.storeOp.addr <= UInt<64>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.storeOp.en <= UInt<1>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.aluop <= UInt<6>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.opcode <= UInt<7>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.wreg <= UInt<1>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.rd <= UInt<5>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.oprand2 <= UInt<64>("h0") @[pipeline-registers.scala 51:39]
      _decInfo_WIRE.oprand1 <= UInt<64>("h0") @[pipeline-registers.scala 51:39]
      decInfo.loadOp.dest <= _decInfo_WIRE.loadOp.dest @[pipeline-registers.scala 51:24]
      decInfo.loadOp.Width <= _decInfo_WIRE.loadOp.Width @[pipeline-registers.scala 51:24]
      decInfo.loadOp.addr <= _decInfo_WIRE.loadOp.addr @[pipeline-registers.scala 51:24]
      decInfo.loadOp.isLoad <= _decInfo_WIRE.loadOp.isLoad @[pipeline-registers.scala 51:24]
      decInfo.storeOp.Width <= _decInfo_WIRE.storeOp.Width @[pipeline-registers.scala 51:24]
      decInfo.storeOp.data <= _decInfo_WIRE.storeOp.data @[pipeline-registers.scala 51:24]
      decInfo.storeOp.addr <= _decInfo_WIRE.storeOp.addr @[pipeline-registers.scala 51:24]
      decInfo.storeOp.en <= _decInfo_WIRE.storeOp.en @[pipeline-registers.scala 51:24]
      decInfo.aluop <= _decInfo_WIRE.aluop @[pipeline-registers.scala 51:24]
      decInfo.opcode <= _decInfo_WIRE.opcode @[pipeline-registers.scala 51:24]
      decInfo.wreg <= _decInfo_WIRE.wreg @[pipeline-registers.scala 51:24]
      decInfo.rd <= _decInfo_WIRE.rd @[pipeline-registers.scala 51:24]
      decInfo.oprand2 <= _decInfo_WIRE.oprand2 @[pipeline-registers.scala 51:24]
      decInfo.oprand1 <= _decInfo_WIRE.oprand1 @[pipeline-registers.scala 51:24]
      prev_is_load <= UInt<1>("h0") @[pipeline-registers.scala 52:24]
      load_dest <= UInt<1>("h0") @[pipeline-registers.scala 53:24]
    else :
      when io.stall : @[pipeline-registers.scala 54:25]
        decInfo.loadOp.dest <= decInfo.loadOp.dest @[pipeline-registers.scala 55:24]
        decInfo.loadOp.Width <= decInfo.loadOp.Width @[pipeline-registers.scala 55:24]
        decInfo.loadOp.addr <= decInfo.loadOp.addr @[pipeline-registers.scala 55:24]
        decInfo.loadOp.isLoad <= decInfo.loadOp.isLoad @[pipeline-registers.scala 55:24]
        decInfo.storeOp.Width <= decInfo.storeOp.Width @[pipeline-registers.scala 55:24]
        decInfo.storeOp.data <= decInfo.storeOp.data @[pipeline-registers.scala 55:24]
        decInfo.storeOp.addr <= decInfo.storeOp.addr @[pipeline-registers.scala 55:24]
        decInfo.storeOp.en <= decInfo.storeOp.en @[pipeline-registers.scala 55:24]
        decInfo.aluop <= decInfo.aluop @[pipeline-registers.scala 55:24]
        decInfo.opcode <= decInfo.opcode @[pipeline-registers.scala 55:24]
        decInfo.wreg <= decInfo.wreg @[pipeline-registers.scala 55:24]
        decInfo.rd <= decInfo.rd @[pipeline-registers.scala 55:24]
        decInfo.oprand2 <= decInfo.oprand2 @[pipeline-registers.scala 55:24]
        decInfo.oprand1 <= decInfo.oprand1 @[pipeline-registers.scala 55:24]
        prev_is_load <= prev_is_load @[pipeline-registers.scala 56:24]
        load_dest <= load_dest @[pipeline-registers.scala 57:24]
    io.decInfo_o <= decInfo @[pipeline-registers.scala 59:24]
    io.prev_is_load_o <= prev_is_load @[pipeline-registers.scala 60:24]
    io.load_dest_o <= load_dest @[pipeline-registers.scala 61:24]

  module Ex :
    output io : { flip decInfo : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, opcode : UInt<7>, aluop : UInt<6>, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>}}, exForwarding : { addr : UInt<5>, data : UInt<64>}, writeRfOp : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>}, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}}

    io.storeOp <= io.decInfo.storeOp @[Ex.scala 18:17]
    io.loadOp <= io.decInfo.loadOp @[Ex.scala 19:17]
    node _aluRes_T = add(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 22:26]
    node _aluRes_T_1 = tail(_aluRes_T, 1) @[Ex.scala 22:26]
    node _aluRes_T_2 = sub(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 23:26]
    node _aluRes_T_3 = tail(_aluRes_T_2, 1) @[Ex.scala 23:26]
    node _aluRes_T_4 = asSInt(io.decInfo.oprand1) @[Ex.scala 24:29]
    node _aluRes_T_5 = asSInt(io.decInfo.oprand2) @[Ex.scala 24:46]
    node _aluRes_T_6 = lt(_aluRes_T_4, _aluRes_T_5) @[Ex.scala 24:36]
    node _aluRes_T_7 = mux(_aluRes_T_6, UInt<1>("h1"), UInt<1>("h0")) @[Ex.scala 24:20]
    node _aluRes_T_8 = lt(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 25:29]
    node _aluRes_T_9 = mux(_aluRes_T_8, UInt<1>("h1"), UInt<1>("h0")) @[Ex.scala 25:20]
    node _aluRes_T_10 = xor(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 26:26]
    node _aluRes_T_11 = or(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 27:26]
    node _aluRes_T_12 = and(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 28:26]
    node _aluRes_T_13 = bits(io.decInfo.oprand2, 4, 0) @[Ex.scala 29:36]
    node _aluRes_T_14 = dshl(io.decInfo.oprand1, _aluRes_T_13) @[Ex.scala 29:26]
    node _aluRes_T_15 = bits(io.decInfo.oprand2, 4, 0) @[Ex.scala 30:36]
    node _aluRes_T_16 = dshr(io.decInfo.oprand1, _aluRes_T_15) @[Ex.scala 30:26]
    node _aluRes_T_17 = asSInt(io.decInfo.oprand1) @[Ex.scala 31:26]
    node _aluRes_T_18 = bits(io.decInfo.oprand2, 4, 0) @[Ex.scala 31:43]
    node _aluRes_T_19 = dshr(_aluRes_T_17, _aluRes_T_18) @[Ex.scala 31:33]
    node _aluRes_T_20 = asUInt(_aluRes_T_19) @[Ex.scala 31:50]
    node _aluRes_T_21 = add(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 34:26]
    node _aluRes_T_22 = tail(_aluRes_T_21, 1) @[Ex.scala 34:26]
    node _aluRes_T_23 = add(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 35:26]
    node _aluRes_T_24 = tail(_aluRes_T_23, 1) @[Ex.scala 35:26]
    node _aluRes_T_25 = add(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 36:26]
    node _aluRes_T_26 = tail(_aluRes_T_25, 1) @[Ex.scala 36:26]
    node _aluRes_T_27 = add(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 37:26]
    node _aluRes_T_28 = tail(_aluRes_T_27, 1) @[Ex.scala 37:26]
    node _aluRes_T_29 = add(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 38:26]
    node _aluRes_T_30 = tail(_aluRes_T_29, 1) @[Ex.scala 38:26]
    node _aluRes_T_31 = add(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 39:26]
    node _aluRes_T_32 = tail(_aluRes_T_31, 1) @[Ex.scala 39:26]
    node _aluRes_T_33 = add(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 40:26]
    node _aluRes_T_34 = tail(_aluRes_T_33, 1) @[Ex.scala 40:26]
    node _aluRes_T_35 = add(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 41:26]
    node _aluRes_T_36 = tail(_aluRes_T_35, 1) @[Ex.scala 41:26]
    node _aluRes_T_37 = eq(UInt<5>("h0"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_38 = mux(_aluRes_T_37, _aluRes_T_1, UInt<1>("h0")) @[Mux.scala 81:58]
    node _aluRes_T_39 = eq(UInt<5>("h1"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_40 = mux(_aluRes_T_39, _aluRes_T_3, _aluRes_T_38) @[Mux.scala 81:58]
    node _aluRes_T_41 = eq(UInt<5>("h2"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_42 = mux(_aluRes_T_41, _aluRes_T_7, _aluRes_T_40) @[Mux.scala 81:58]
    node _aluRes_T_43 = eq(UInt<5>("h3"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_44 = mux(_aluRes_T_43, _aluRes_T_9, _aluRes_T_42) @[Mux.scala 81:58]
    node _aluRes_T_45 = eq(UInt<5>("h4"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_46 = mux(_aluRes_T_45, _aluRes_T_10, _aluRes_T_44) @[Mux.scala 81:58]
    node _aluRes_T_47 = eq(UInt<5>("h5"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_48 = mux(_aluRes_T_47, _aluRes_T_11, _aluRes_T_46) @[Mux.scala 81:58]
    node _aluRes_T_49 = eq(UInt<5>("h6"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_50 = mux(_aluRes_T_49, _aluRes_T_12, _aluRes_T_48) @[Mux.scala 81:58]
    node _aluRes_T_51 = eq(UInt<5>("h7"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_52 = mux(_aluRes_T_51, _aluRes_T_14, _aluRes_T_50) @[Mux.scala 81:58]
    node _aluRes_T_53 = eq(UInt<5>("h8"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_54 = mux(_aluRes_T_53, _aluRes_T_16, _aluRes_T_52) @[Mux.scala 81:58]
    node _aluRes_T_55 = eq(UInt<5>("h9"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_56 = mux(_aluRes_T_55, _aluRes_T_20, _aluRes_T_54) @[Mux.scala 81:58]
    node _aluRes_T_57 = eq(UInt<5>("h1c"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_58 = mux(_aluRes_T_57, _aluRes_T_22, _aluRes_T_56) @[Mux.scala 81:58]
    node _aluRes_T_59 = eq(UInt<5>("h1a"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_60 = mux(_aluRes_T_59, _aluRes_T_24, _aluRes_T_58) @[Mux.scala 81:58]
    node _aluRes_T_61 = eq(UInt<5>("h18"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_62 = mux(_aluRes_T_61, _aluRes_T_26, _aluRes_T_60) @[Mux.scala 81:58]
    node _aluRes_T_63 = eq(UInt<5>("h1d"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_64 = mux(_aluRes_T_63, _aluRes_T_28, _aluRes_T_62) @[Mux.scala 81:58]
    node _aluRes_T_65 = eq(UInt<5>("h1b"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_66 = mux(_aluRes_T_65, _aluRes_T_30, _aluRes_T_64) @[Mux.scala 81:58]
    node _aluRes_T_67 = eq(UInt<5>("h16"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_68 = mux(_aluRes_T_67, _aluRes_T_32, _aluRes_T_66) @[Mux.scala 81:58]
    node _aluRes_T_69 = eq(UInt<5>("h15"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_70 = mux(_aluRes_T_69, _aluRes_T_34, _aluRes_T_68) @[Mux.scala 81:58]
    node _aluRes_T_71 = eq(UInt<5>("h14"), io.decInfo.aluop) @[Mux.scala 81:61]
    node aluRes = mux(_aluRes_T_71, _aluRes_T_36, _aluRes_T_70) @[Mux.scala 81:58]
    wire _io_writeRfOp_WIRE : { en : UInt<1>, data : UInt<64>, addr : UInt<5>} @[Ex.scala 48:36]
    _io_writeRfOp_WIRE.addr <= UInt<5>("h0") @[Ex.scala 48:36]
    _io_writeRfOp_WIRE.data <= UInt<64>("h0") @[Ex.scala 48:36]
    _io_writeRfOp_WIRE.en <= UInt<1>("h0") @[Ex.scala 48:36]
    io.writeRfOp <= _io_writeRfOp_WIRE @[Ex.scala 48:21]
    node _T = eq(UInt<6>("h33"), io.decInfo.opcode) @[Ex.scala 50:30]
    when _T : @[Ex.scala 50:30]
      io.writeRfOp.data <= aluRes @[Ex.scala 52:32]
      io.writeRfOp.en <= UInt<1>("h1") @[Ex.scala 53:32]
      io.writeRfOp.addr <= io.decInfo.rd @[Ex.scala 54:32]
    else :
      node _T_1 = eq(UInt<5>("h13"), io.decInfo.opcode) @[Ex.scala 50:30]
      when _T_1 : @[Ex.scala 50:30]
        io.writeRfOp.data <= aluRes @[Ex.scala 57:32]
        io.writeRfOp.en <= UInt<1>("h1") @[Ex.scala 58:32]
        io.writeRfOp.addr <= io.decInfo.rd @[Ex.scala 59:32]
      else :
        node _T_2 = eq(UInt<2>("h3"), io.decInfo.opcode) @[Ex.scala 50:30]
        when _T_2 : @[Ex.scala 50:30]
          io.writeRfOp.data is invalid @[Ex.scala 62:32]
          io.writeRfOp.en <= UInt<1>("h1") @[Ex.scala 63:32]
          io.writeRfOp.addr <= io.decInfo.rd @[Ex.scala 64:32]
          io.loadOp.addr <= aluRes @[Ex.scala 66:32]
        else :
          node _T_3 = eq(UInt<6>("h23"), io.decInfo.opcode) @[Ex.scala 50:30]
          when _T_3 : @[Ex.scala 50:30]
            io.storeOp.addr <= aluRes @[Ex.scala 69:32]
    io.exForwarding.data <= aluRes @[Ex.scala 75:28]
    io.exForwarding.addr <= io.decInfo.rd @[Ex.scala 76:28]

  module Ex_Mem :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip flush : UInt<1>, flip reset : UInt<1>, flip loadOp_i : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>}, flip storeOp_i : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, flip writeRfOp_i : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, loadOp_o : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>}, storeOp_o : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, writeRfOp_o : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}}

    reg writeRfOp : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, clock with :
      reset => (UInt<1>("h0"), writeRfOp) @[pipeline-registers.scala 79:33]
    writeRfOp.addr <= io.writeRfOp_i.addr @[pipeline-registers.scala 79:33]
    writeRfOp.data <= io.writeRfOp_i.data @[pipeline-registers.scala 79:33]
    writeRfOp.en <= io.writeRfOp_i.en @[pipeline-registers.scala 79:33]
    reg loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>}, clock with :
      reset => (UInt<1>("h0"), loadOp) @[pipeline-registers.scala 80:33]
    loadOp.dest <= io.loadOp_i.dest @[pipeline-registers.scala 80:33]
    loadOp.Width <= io.loadOp_i.Width @[pipeline-registers.scala 80:33]
    loadOp.addr <= io.loadOp_i.addr @[pipeline-registers.scala 80:33]
    loadOp.isLoad <= io.loadOp_i.isLoad @[pipeline-registers.scala 80:33]
    reg storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, clock with :
      reset => (UInt<1>("h0"), storeOp) @[pipeline-registers.scala 81:33]
    storeOp.Width <= io.storeOp_i.Width @[pipeline-registers.scala 81:33]
    storeOp.data <= io.storeOp_i.data @[pipeline-registers.scala 81:33]
    storeOp.addr <= io.storeOp_i.addr @[pipeline-registers.scala 81:33]
    storeOp.en <= io.storeOp_i.en @[pipeline-registers.scala 81:33]
    node _T = or(io.reset, io.flush) @[pipeline-registers.scala 83:19]
    when _T : @[pipeline-registers.scala 83:30]
      wire _writeRfOp_WIRE : { en : UInt<1>, data : UInt<64>, addr : UInt<5>} @[pipeline-registers.scala 84:37]
      _writeRfOp_WIRE.addr <= UInt<5>("h0") @[pipeline-registers.scala 84:37]
      _writeRfOp_WIRE.data <= UInt<64>("h0") @[pipeline-registers.scala 84:37]
      _writeRfOp_WIRE.en <= UInt<1>("h0") @[pipeline-registers.scala 84:37]
      writeRfOp.addr <= _writeRfOp_WIRE.addr @[pipeline-registers.scala 84:22]
      writeRfOp.data <= _writeRfOp_WIRE.data @[pipeline-registers.scala 84:22]
      writeRfOp.en <= _writeRfOp_WIRE.en @[pipeline-registers.scala 84:22]
      wire _loadOp_WIRE : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>} @[pipeline-registers.scala 85:37]
      _loadOp_WIRE.dest <= UInt<5>("h0") @[pipeline-registers.scala 85:37]
      _loadOp_WIRE.Width <= UInt<2>("h0") @[pipeline-registers.scala 85:37]
      _loadOp_WIRE.addr <= UInt<64>("h0") @[pipeline-registers.scala 85:37]
      _loadOp_WIRE.isLoad <= UInt<1>("h0") @[pipeline-registers.scala 85:37]
      loadOp.dest <= _loadOp_WIRE.dest @[pipeline-registers.scala 85:22]
      loadOp.Width <= _loadOp_WIRE.Width @[pipeline-registers.scala 85:22]
      loadOp.addr <= _loadOp_WIRE.addr @[pipeline-registers.scala 85:22]
      loadOp.isLoad <= _loadOp_WIRE.isLoad @[pipeline-registers.scala 85:22]
      wire _storeOp_WIRE : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>} @[pipeline-registers.scala 86:37]
      _storeOp_WIRE.Width <= UInt<2>("h0") @[pipeline-registers.scala 86:37]
      _storeOp_WIRE.data <= UInt<64>("h0") @[pipeline-registers.scala 86:37]
      _storeOp_WIRE.addr <= UInt<64>("h0") @[pipeline-registers.scala 86:37]
      _storeOp_WIRE.en <= UInt<1>("h0") @[pipeline-registers.scala 86:37]
      storeOp.Width <= _storeOp_WIRE.Width @[pipeline-registers.scala 86:22]
      storeOp.data <= _storeOp_WIRE.data @[pipeline-registers.scala 86:22]
      storeOp.addr <= _storeOp_WIRE.addr @[pipeline-registers.scala 86:22]
      storeOp.en <= _storeOp_WIRE.en @[pipeline-registers.scala 86:22]
    else :
      when io.stall : @[pipeline-registers.scala 87:25]
        writeRfOp.addr <= writeRfOp.addr @[pipeline-registers.scala 88:23]
        writeRfOp.data <= writeRfOp.data @[pipeline-registers.scala 88:23]
        writeRfOp.en <= writeRfOp.en @[pipeline-registers.scala 88:23]
        loadOp.dest <= loadOp.dest @[pipeline-registers.scala 89:23]
        loadOp.Width <= loadOp.Width @[pipeline-registers.scala 89:23]
        loadOp.addr <= loadOp.addr @[pipeline-registers.scala 89:23]
        loadOp.isLoad <= loadOp.isLoad @[pipeline-registers.scala 89:23]
        storeOp.Width <= storeOp.Width @[pipeline-registers.scala 90:23]
        storeOp.data <= storeOp.data @[pipeline-registers.scala 90:23]
        storeOp.addr <= storeOp.addr @[pipeline-registers.scala 90:23]
        storeOp.en <= storeOp.en @[pipeline-registers.scala 90:23]
    io.writeRfOp_o <= writeRfOp @[pipeline-registers.scala 92:23]
    io.loadOp_o <= loadOp @[pipeline-registers.scala 93:23]
    io.storeOp_o <= storeOp @[pipeline-registers.scala 94:23]

  module Memory :
    input clock : Clock
    input reset : Reset
    output io : { flip writeRfOp_i : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, flip loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, dest : UInt<5>}, flip storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, memForwarding : { addr : UInt<5>, data : UInt<64>}, writeRfOp_o : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}}

    smem ram : UInt<8> [1024] @[Mem.scala 18:26]
    node _loadVal_T = bits(io.loadOp.addr, 9, 0) @[Mem.scala 24:20]
    infer mport loadVal_MPORT = ram[_loadVal_T], clock @[Mem.scala 24:20]
    node _loadVal_T_1 = bits(io.loadOp.addr, 9, 0) @[Mem.scala 25:24]
    infer mport loadVal_MPORT_1 = ram[_loadVal_T_1], clock @[Mem.scala 25:24]
    node _loadVal_T_2 = add(io.loadOp.addr, UInt<1>("h1")) @[Mem.scala 25:43]
    node _loadVal_T_3 = tail(_loadVal_T_2, 1) @[Mem.scala 25:43]
    node _loadVal_T_4 = bits(_loadVal_T_3, 9, 0) @[Mem.scala 25:36]
    infer mport loadVal_MPORT_2 = ram[_loadVal_T_4], clock @[Mem.scala 25:36]
    node _loadVal_T_5 = cat(loadVal_MPORT_1, loadVal_MPORT_2) @[Cat.scala 31:58]
    node _loadVal_T_6 = bits(io.loadOp.addr, 9, 0) @[Mem.scala 26:24]
    infer mport loadVal_MPORT_3 = ram[_loadVal_T_6], clock @[Mem.scala 26:24]
    node _loadVal_T_7 = add(io.loadOp.addr, UInt<1>("h1")) @[Mem.scala 26:43]
    node _loadVal_T_8 = tail(_loadVal_T_7, 1) @[Mem.scala 26:43]
    node _loadVal_T_9 = bits(_loadVal_T_8, 9, 0) @[Mem.scala 26:36]
    infer mport loadVal_MPORT_4 = ram[_loadVal_T_9], clock @[Mem.scala 26:36]
    node _loadVal_T_10 = add(io.loadOp.addr, UInt<2>("h2")) @[Mem.scala 26:60]
    node _loadVal_T_11 = tail(_loadVal_T_10, 1) @[Mem.scala 26:60]
    node _loadVal_T_12 = bits(_loadVal_T_11, 9, 0) @[Mem.scala 26:53]
    infer mport loadVal_MPORT_5 = ram[_loadVal_T_12], clock @[Mem.scala 26:53]
    node _loadVal_T_13 = add(io.loadOp.addr, UInt<2>("h3")) @[Mem.scala 26:78]
    node _loadVal_T_14 = tail(_loadVal_T_13, 1) @[Mem.scala 26:78]
    node _loadVal_T_15 = bits(_loadVal_T_14, 9, 0) @[Mem.scala 26:71]
    infer mport loadVal_MPORT_6 = ram[_loadVal_T_15], clock @[Mem.scala 26:71]
    node loadVal_lo = cat(loadVal_MPORT_5, loadVal_MPORT_6) @[Cat.scala 31:58]
    node loadVal_hi = cat(loadVal_MPORT_3, loadVal_MPORT_4) @[Cat.scala 31:58]
    node _loadVal_T_16 = cat(loadVal_hi, loadVal_lo) @[Cat.scala 31:58]
    node _loadVal_T_17 = eq(UInt<1>("h0"), io.loadOp.Width) @[Mux.scala 81:61]
    node _loadVal_T_18 = mux(_loadVal_T_17, loadVal_MPORT, UInt<1>("h0")) @[Mux.scala 81:58]
    node _loadVal_T_19 = eq(UInt<1>("h1"), io.loadOp.Width) @[Mux.scala 81:61]
    node _loadVal_T_20 = mux(_loadVal_T_19, _loadVal_T_5, _loadVal_T_18) @[Mux.scala 81:58]
    node _loadVal_T_21 = eq(UInt<2>("h2"), io.loadOp.Width) @[Mux.scala 81:61]
    node loadVal = mux(_loadVal_T_21, _loadVal_T_16, _loadVal_T_20) @[Mux.scala 81:58]
    when io.storeOp.en : @[Mem.scala 33:24]
      node _T = eq(UInt<1>("h0"), io.storeOp.Width) @[Mem.scala 34:33]
      when _T : @[Mem.scala 34:33]
        node _T_1 = bits(io.storeOp.addr, 9, 0) @[Mem.scala 36:20]
        infer mport MPORT = ram[_T_1], clock @[Mem.scala 36:20]
        node _T_2 = bits(io.storeOp.data, 7, 0) @[Mem.scala 36:36]
        MPORT <= _T_2 @[Mem.scala 36:29]
      else :
        node _T_3 = eq(UInt<1>("h1"), io.storeOp.Width) @[Mem.scala 34:33]
        when _T_3 : @[Mem.scala 34:33]
          node _T_4 = bits(io.storeOp.addr, 9, 0) @[Mem.scala 39:20]
          infer mport MPORT_1 = ram[_T_4], clock @[Mem.scala 39:20]
          node _T_5 = bits(io.storeOp.data, 7, 0) @[Mem.scala 39:40]
          MPORT_1 <= _T_5 @[Mem.scala 39:33]
          node _T_6 = add(io.storeOp.addr, UInt<1>("h1")) @[Mem.scala 40:26]
          node _T_7 = tail(_T_6, 1) @[Mem.scala 40:26]
          node _T_8 = bits(_T_7, 9, 0) @[Mem.scala 40:20]
          infer mport MPORT_2 = ram[_T_8], clock @[Mem.scala 40:20]
          node _T_9 = bits(io.storeOp.data, 15, 8) @[Mem.scala 40:40]
          MPORT_2 <= _T_9 @[Mem.scala 40:33]
        else :
          node _T_10 = eq(UInt<2>("h2"), io.storeOp.Width) @[Mem.scala 34:33]
          when _T_10 : @[Mem.scala 34:33]
            node _T_11 = bits(io.storeOp.addr, 9, 0) @[Mem.scala 43:20]
            infer mport MPORT_3 = ram[_T_11], clock @[Mem.scala 43:20]
            node _T_12 = bits(io.storeOp.data, 7, 0) @[Mem.scala 43:40]
            MPORT_3 <= _T_12 @[Mem.scala 43:33]
            node _T_13 = add(io.storeOp.addr, UInt<1>("h1")) @[Mem.scala 44:26]
            node _T_14 = tail(_T_13, 1) @[Mem.scala 44:26]
            node _T_15 = bits(_T_14, 9, 0) @[Mem.scala 44:20]
            infer mport MPORT_4 = ram[_T_15], clock @[Mem.scala 44:20]
            node _T_16 = bits(io.storeOp.data, 15, 8) @[Mem.scala 44:40]
            MPORT_4 <= _T_16 @[Mem.scala 44:33]
            node _T_17 = add(io.storeOp.addr, UInt<2>("h2")) @[Mem.scala 45:26]
            node _T_18 = tail(_T_17, 1) @[Mem.scala 45:26]
            node _T_19 = bits(_T_18, 9, 0) @[Mem.scala 45:20]
            infer mport MPORT_5 = ram[_T_19], clock @[Mem.scala 45:20]
            node _T_20 = bits(io.storeOp.data, 23, 16) @[Mem.scala 45:40]
            MPORT_5 <= _T_20 @[Mem.scala 45:33]
            node _T_21 = add(io.storeOp.addr, UInt<2>("h3")) @[Mem.scala 46:26]
            node _T_22 = tail(_T_21, 1) @[Mem.scala 46:26]
            node _T_23 = bits(_T_22, 9, 0) @[Mem.scala 46:20]
            infer mport MPORT_6 = ram[_T_23], clock @[Mem.scala 46:20]
            node _T_24 = bits(io.storeOp.data, 31, 24) @[Mem.scala 46:40]
            MPORT_6 <= _T_24 @[Mem.scala 46:33]
    node _io_writeRfOp_o_data_T = mux(io.loadOp.isLoad, loadVal, io.writeRfOp_i.data) @[Mem.scala 51:33]
    io.writeRfOp_o.data <= _io_writeRfOp_o_data_T @[Mem.scala 51:27]
    io.writeRfOp_o.en <= io.writeRfOp_i.en @[Mem.scala 52:27]
    io.writeRfOp_o.addr <= io.writeRfOp_i.addr @[Mem.scala 53:27]
    io.memForwarding.addr <= io.writeRfOp_i.addr @[Mem.scala 55:27]
    node _io_memForwarding_data_T = mux(io.loadOp.isLoad, loadVal, io.writeRfOp_i.data) @[Mem.scala 56:33]
    io.memForwarding.data <= _io_memForwarding_data_T @[Mem.scala 56:27]

  module Mem_Wb :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip flush : UInt<1>, flip reset : UInt<1>, flip writeRfOp_i : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, writeRfOp_o : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}}

    reg writeRfOp : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, clock with :
      reset => (UInt<1>("h0"), writeRfOp) @[pipeline-registers.scala 107:30]
    writeRfOp.addr <= io.writeRfOp_i.addr @[pipeline-registers.scala 107:30]
    writeRfOp.data <= io.writeRfOp_i.data @[pipeline-registers.scala 107:30]
    writeRfOp.en <= io.writeRfOp_i.en @[pipeline-registers.scala 107:30]
    node _T = or(io.reset, io.flush) @[pipeline-registers.scala 108:19]
    when _T : @[pipeline-registers.scala 108:30]
      wire _writeRfOp_WIRE : { en : UInt<1>, data : UInt<64>, addr : UInt<5>} @[pipeline-registers.scala 109:35]
      _writeRfOp_WIRE.addr <= UInt<5>("h0") @[pipeline-registers.scala 109:35]
      _writeRfOp_WIRE.data <= UInt<64>("h0") @[pipeline-registers.scala 109:35]
      _writeRfOp_WIRE.en <= UInt<1>("h0") @[pipeline-registers.scala 109:35]
      writeRfOp.addr <= _writeRfOp_WIRE.addr @[pipeline-registers.scala 109:20]
      writeRfOp.data <= _writeRfOp_WIRE.data @[pipeline-registers.scala 109:20]
      writeRfOp.en <= _writeRfOp_WIRE.en @[pipeline-registers.scala 109:20]
    else :
      when io.stall : @[pipeline-registers.scala 110:25]
        writeRfOp.addr <= writeRfOp.addr @[pipeline-registers.scala 112:21]
        writeRfOp.data <= writeRfOp.data @[pipeline-registers.scala 112:21]
        writeRfOp.en <= writeRfOp.en @[pipeline-registers.scala 112:21]
    io.writeRfOp_o <= writeRfOp @[pipeline-registers.scala 114:21]

  module Wb :
    output io : { flip writeRfOp_i : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, wbForwarding : { addr : UInt<5>, data : UInt<64>}, writeRfOp_o : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}}

    io.writeRfOp_o <= io.writeRfOp_i @[Wb.scala 13:21]
    io.wbForwarding.data <= io.writeRfOp_i.data @[Wb.scala 14:21]
    io.wbForwarding.addr <= io.writeRfOp_i.addr @[Wb.scala 14:21]

  module Ctrl :
    input clock : Clock
    input reset : Reset
    output io : { flip id_stall_req : UInt<1>, flip id_flush_req : UInt<1>, stall : UInt<5>, flush : UInt<5>}

    io.stall <= UInt<1>("h0") @[Ctrl.scala 15:17]
    io.flush <= UInt<1>("h0") @[Ctrl.scala 16:17]
    when io.id_stall_req : @[Ctrl.scala 17:26]
      io.stall <= UInt<2>("h3") @[Ctrl.scala 18:21]
    when io.id_flush_req : @[Ctrl.scala 20:26]
      io.flush <= UInt<3>("h7") @[Ctrl.scala 23:21]

  module Top :
    output io : { flip clk : Clock, flip reset : UInt<1>, o1 : UInt<64>, o2 : UInt<32>, o3 : UInt<64>, o4 : UInt<64>}

    inst PC of Pc @[Top.scala 20:64]
    PC.clock <= io.clk
    PC.reset <= io.reset
    inst IF of If @[Top.scala 22:64]
    IF.clock <= io.clk
    IF.reset <= io.reset
    inst INST_ROM of Inst_Rom @[Top.scala 23:64]
    INST_ROM.clock <= io.clk
    INST_ROM.reset <= io.reset
    inst REGFILE of Regfile @[Top.scala 24:64]
    REGFILE.clock <= io.clk
    REGFILE.reset <= io.reset
    inst IF_ID of If_Id @[Top.scala 25:64]
    IF_ID.clock <= io.clk
    IF_ID.reset <= io.reset
    inst ID of Id @[Top.scala 26:64]
    ID.clock <= io.clk
    ID.reset <= io.reset
    inst ID_EX of Id_Ex @[Top.scala 27:64]
    ID_EX.clock <= io.clk
    ID_EX.reset <= io.reset
    inst EX of Ex @[Top.scala 28:64]
    inst EX_MEM of Ex_Mem @[Top.scala 29:64]
    EX_MEM.clock <= io.clk
    EX_MEM.reset <= io.reset
    inst MEM of Memory @[Top.scala 30:64]
    MEM.clock <= io.clk
    MEM.reset <= io.reset
    inst MEM_WB of Mem_Wb @[Top.scala 31:64]
    MEM_WB.clock <= io.clk
    MEM_WB.reset <= io.reset
    inst WB of Wb @[Top.scala 32:64]
    inst CTRL of Ctrl @[Top.scala 33:64]
    CTRL.clock <= io.clk
    CTRL.reset <= io.reset
    PC.io.reset <= io.reset @[Top.scala 36:25]
    INST_ROM.io.reset <= io.reset @[Top.scala 37:25]
    IF.io.reset <= io.reset @[Top.scala 38:25]
    IF_ID.io.reset <= io.reset @[Top.scala 39:25]
    ID_EX.io.reset <= io.reset @[Top.scala 40:25]
    EX_MEM.io.reset <= io.reset @[Top.scala 41:25]
    MEM_WB.io.reset <= io.reset @[Top.scala 42:25]
    node _PC_io_stall_T = bits(CTRL.io.stall, 0, 0) @[Top.scala 44:41]
    PC.io.stall <= _PC_io_stall_T @[Top.scala 44:25]
    node _IF_ID_io_stall_T = bits(CTRL.io.stall, 1, 1) @[Top.scala 45:41]
    IF_ID.io.stall <= _IF_ID_io_stall_T @[Top.scala 45:25]
    node _ID_EX_io_stall_T = bits(CTRL.io.stall, 2, 2) @[Top.scala 46:41]
    ID_EX.io.stall <= _ID_EX_io_stall_T @[Top.scala 46:25]
    node _EX_MEM_io_stall_T = bits(CTRL.io.stall, 3, 3) @[Top.scala 47:41]
    EX_MEM.io.stall <= _EX_MEM_io_stall_T @[Top.scala 47:25]
    node _MEM_WB_io_stall_T = bits(CTRL.io.stall, 4, 4) @[Top.scala 48:41]
    MEM_WB.io.stall <= _MEM_WB_io_stall_T @[Top.scala 48:25]
    node _INST_ROM_io_flush_T = bits(CTRL.io.flush, 0, 0) @[Top.scala 50:41]
    INST_ROM.io.flush <= _INST_ROM_io_flush_T @[Top.scala 50:25]
    node _IF_ID_io_flush_T = bits(CTRL.io.flush, 1, 1) @[Top.scala 51:41]
    IF_ID.io.flush <= _IF_ID_io_flush_T @[Top.scala 51:25]
    node _ID_EX_io_flush_T = bits(CTRL.io.flush, 2, 2) @[Top.scala 52:41]
    ID_EX.io.flush <= _ID_EX_io_flush_T @[Top.scala 52:25]
    node _EX_MEM_io_flush_T = bits(CTRL.io.flush, 3, 3) @[Top.scala 53:41]
    EX_MEM.io.flush <= _EX_MEM_io_flush_T @[Top.scala 53:25]
    node _MEM_WB_io_flush_T = bits(CTRL.io.flush, 4, 4) @[Top.scala 54:41]
    MEM_WB.io.flush <= _MEM_WB_io_flush_T @[Top.scala 54:25]
    PC.io.branchOp.target <= ID.io.branchOp.target @[Top.scala 56:25]
    PC.io.branchOp.taken <= ID.io.branchOp.taken @[Top.scala 56:25]
    IF.io.pc_i <= PC.io.pc @[Top.scala 58:25]
    IF.io.inst_i <= INST_ROM.io.inst_o @[Top.scala 59:25]
    INST_ROM.io.addr_i <= IF.io.pc_o @[Top.scala 60:25]
    IF_ID.io.inst_i <= IF.io.inst_o @[Top.scala 61:25]
    ID.io.inst_i <= IF_ID.io.inst_o @[Top.scala 63:25]
    IF_ID.io.pc_i <= IF.io.pc_o @[Top.scala 64:25]
    ID.io.pc <= IF_ID.io.pc_o @[Top.scala 65:25]
    REGFILE.io.id2Rf <= ID.io.id2Rf @[Top.scala 67:29]
    ID.io.rf2Id <= REGFILE.io.rf2Id @[Top.scala 68:29]
    ID_EX.io.decInfo_i <= ID.io.decInfo @[Top.scala 70:29]
    ID_EX.io.prev_is_load_i <= ID.io.decInfo.loadOp.isLoad @[Top.scala 71:29]
    ID.io.load_dest <= ID_EX.io.load_dest_o @[Top.scala 72:29]
    ID.io.prev_is_load <= ID_EX.io.prev_is_load_o @[Top.scala 73:29]
    EX.io.decInfo <= ID_EX.io.decInfo_o @[Top.scala 75:29]
    EX_MEM.io.loadOp_i <= EX.io.loadOp @[Top.scala 76:29]
    EX_MEM.io.storeOp_i <= EX.io.storeOp @[Top.scala 77:29]
    EX_MEM.io.writeRfOp_i <= EX.io.writeRfOp @[Top.scala 79:29]
    MEM.io.loadOp <= EX_MEM.io.loadOp_o @[Top.scala 80:29]
    MEM.io.storeOp <= EX_MEM.io.storeOp_o @[Top.scala 81:29]
    MEM.io.writeRfOp_i <= EX_MEM.io.writeRfOp_o @[Top.scala 83:29]
    MEM_WB.io.writeRfOp_i <= MEM.io.writeRfOp_o @[Top.scala 85:29]
    WB.io.writeRfOp_i <= MEM_WB.io.writeRfOp_o @[Top.scala 87:29]
    REGFILE.io.writeRfOp <= WB.io.writeRfOp_o @[Top.scala 89:29]
    ID.io.wbForwarding <= WB.io.wbForwarding @[Top.scala 93:29]
    ID.io.memForwarding <= MEM.io.memForwarding @[Top.scala 94:29]
    ID.io.exForwarding <= EX.io.exForwarding @[Top.scala 95:29]
    CTRL.io.id_stall_req <= ID.io.stall_req @[Top.scala 97:29]
    CTRL.io.id_flush_req <= ID.io.flush_req @[Top.scala 98:29]
    io.o1 <= WB.io.writeRfOp_o.data @[Top.scala 107:7]
    io.o2 <= UInt<1>("h0") @[Top.scala 108:7]
    io.o3 <= UInt<1>("h0") @[Top.scala 109:7]
    io.o4 <= UInt<1>("h0") @[Top.scala 110:7]

