circuit Top :
  module If :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip flush : UInt<1>, flip excep : { happen : UInt<1>, new_pc : UInt<64>}, flip branchOp : { taken : UInt<1>, target : UInt<64>}, pc_o : UInt<64>, inst_o : UInt<32>}

    cmem inst_rom : UInt<32> [4096] @[If.scala 15:24]
    reg pc : UInt<64>, clock with :
      reset => (reset, UInt<64>("h400")) @[If.scala 36:26]
    node _next_pc_T = asUInt(reset) @[If.scala 38:16]
    node _next_pc_T_1 = add(pc, UInt<3>("h4")) @[If.scala 42:36]
    node _next_pc_T_2 = tail(_next_pc_T_1, 1) @[If.scala 42:36]
    node _next_pc_T_3 = mux(io.stall, pc, _next_pc_T_2) @[Mux.scala 47:70]
    node _next_pc_T_4 = mux(io.branchOp.taken, io.branchOp.target, _next_pc_T_3) @[Mux.scala 47:70]
    node _next_pc_T_5 = mux(io.excep.happen, io.excep.new_pc, _next_pc_T_4) @[Mux.scala 47:70]
    node next_pc = mux(_next_pc_T, UInt<1>("h0"), _next_pc_T_5) @[Mux.scala 47:70]
    pc <= next_pc @[If.scala 44:9]
    node _io_inst_o_T = asUInt(reset) @[If.scala 48:31]
    node _io_inst_o_T_1 = shr(pc, 2) @[If.scala 48:56]
    node _io_inst_o_T_2 = bits(_io_inst_o_T_1, 11, 0) @[If.scala 48:52]
    infer mport io_inst_o_MPORT = inst_rom[_io_inst_o_T_2], clock @[If.scala 48:52]
    node _io_inst_o_T_3 = mux(_io_inst_o_T, UInt<1>("h0"), io_inst_o_MPORT) @[If.scala 48:24]
    io.inst_o <= _io_inst_o_T_3 @[If.scala 48:18]
    io.pc_o <= pc @[If.scala 49:18]

  module CSR :
    input clock : Clock
    input reset : Reset
    output io : { flip ID_2_CSR : { addr : UInt<12>, wdata : UInt<64>}, flip writeOp : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}, flip exception : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}, CSR_2_ID : { data : UInt<64>, legalWrite : UInt<1>, legalRead : UInt<1>, priv : UInt<2>, xtvec : UInt<64>, xepc : UInt<64>}}

    cmem csr : UInt<64> [1024] @[CSR.scala 24:22]
    node _T = asUInt(reset) @[CSR.scala 26:16]
    when _T : @[CSR.scala 26:23]
      skip
    wire nextPriv : UInt<2> @[CSR.scala 31:25]
    reg priv : UInt, clock with :
      reset => (reset, UInt<2>("h3")) @[CSR.scala 32:28]
    priv <= nextPriv @[CSR.scala 32:28]
    nextPriv <= priv @[CSR.scala 33:18]
    infer mport mtime = csr[UInt<10>("h320")], clock @[CSR.scala 36:25]
    node _mtime_T = add(mtime, UInt<1>("h1")) @[CSR.scala 36:61]
    node _mtime_T_1 = tail(_mtime_T, 1) @[CSR.scala 36:61]
    mtime <= _mtime_T_1 @[CSR.scala 36:51]
    infer mport mtimecmp = csr[UInt<10>("h321")], clock @[CSR.scala 37:25]
    infer mport MPORT = csr[UInt<10>("h301")], clock @[CSR.scala 39:8]
    node _T_1 = cat(UInt<1>("h1"), UInt<63>("h0")) @[Cat.scala 31:58]
    node _T_2 = or(_T_1, UInt<21>("h141100")) @[CSR.scala 39:54]
    MPORT <= _T_2 @[CSR.scala 39:25]
    infer mport MPORT_1 = csr[UInt<10>("h311")], clock @[CSR.scala 40:8]
    MPORT_1 <= UInt<21>("h114514") @[CSR.scala 40:25]
    infer mport MPORT_2 = csr[UInt<10>("h312")], clock @[CSR.scala 41:8]
    MPORT_2 <= UInt<25>("h1919810") @[CSR.scala 41:25]
    infer mport MPORT_3 = csr[UInt<10>("h314")], clock @[CSR.scala 42:8]
    MPORT_3 <= UInt<1>("h0") @[CSR.scala 42:25]
    infer mport MPORT_4 = csr[UInt<9>("h114")], clock @[CSR.scala 43:8]
    MPORT_4 <= UInt<49>("h1145141919810") @[CSR.scala 43:25]
    infer mport mie = csr[UInt<10>("h304")], clock @[CSR.scala 45:24]
    infer mport mip = csr[UInt<10>("h344")], clock @[CSR.scala 46:24]
    infer mport mtvec = csr[UInt<10>("h305")], clock @[CSR.scala 47:24]
    infer mport stvec = csr[UInt<9>("h105")], clock @[CSR.scala 48:24]
    infer mport utvec = csr[UInt<3>("h5")], clock @[CSR.scala 49:24]
    infer mport mtval = csr[UInt<10>("h343")], clock @[CSR.scala 50:24]
    infer mport stval = csr[UInt<9>("h143")], clock @[CSR.scala 51:24]
    infer mport utval = csr[UInt<7>("h43")], clock @[CSR.scala 52:24]
    infer mport mepc = csr[UInt<10>("h341")], clock @[CSR.scala 53:24]
    infer mport sepc = csr[UInt<9>("h141")], clock @[CSR.scala 54:24]
    infer mport uepc = csr[UInt<7>("h41")], clock @[CSR.scala 55:24]
    infer mport mcause = csr[UInt<10>("h342")], clock @[CSR.scala 56:24]
    infer mport scause = csr[UInt<9>("h142")], clock @[CSR.scala 57:24]
    infer mport ucause = csr[UInt<7>("h42")], clock @[CSR.scala 58:24]
    infer mport medeleg = csr[UInt<10>("h302")], clock @[CSR.scala 60:24]
    infer mport sedeleg = csr[UInt<9>("h102")], clock @[CSR.scala 61:24]
    infer mport mideleg = csr[UInt<10>("h303")], clock @[CSR.scala 62:24]
    infer mport sideleg = csr[UInt<9>("h103")], clock @[CSR.scala 63:24]
    wire _mstatus_WIRE : { SD : UInt<1>, WPRI25 : UInt<25>, MBE : UInt<1>, SBE : UInt<1>, SXL : UInt<2>, UXL : UInt<2>, WPRI9 : UInt<9>, TSR : UInt<1>, TW : UInt<1>, TVM : UInt<1>, MXR : UInt<1>, SUM : UInt<1>, MPRV : UInt<1>, XS : UInt<2>, FS : UInt<2>, MPP : UInt<2>, WPRI2 : UInt<2>, SPP : UInt<1>, MPIE : UInt<1>, UBE : UInt<1>, SPIE : UInt<1>, UPIE : UInt<1>, MIE : UInt<1>, WPRI1_2 : UInt<1>, SIE : UInt<1>, UIE : UInt<1>} @[CSR.scala 66:40]
    _mstatus_WIRE.UIE <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.SIE <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.WPRI1_2 <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.MIE <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.UPIE <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.SPIE <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.UBE <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.MPIE <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.SPP <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.WPRI2 <= UInt<2>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.MPP <= UInt<2>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.FS <= UInt<2>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.XS <= UInt<2>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.MPRV <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.SUM <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.MXR <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.TVM <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.TW <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.TSR <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.WPRI9 <= UInt<9>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.UXL <= UInt<2>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.SXL <= UInt<2>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.SBE <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.MBE <= UInt<1>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.WPRI25 <= UInt<25>("h0") @[CSR.scala 66:40]
    _mstatus_WIRE.SD <= UInt<1>("h0") @[CSR.scala 66:40]
    reg mstatus : { SD : UInt<1>, WPRI25 : UInt<25>, MBE : UInt<1>, SBE : UInt<1>, SXL : UInt<2>, UXL : UInt<2>, WPRI9 : UInt<9>, TSR : UInt<1>, TW : UInt<1>, TVM : UInt<1>, MXR : UInt<1>, SUM : UInt<1>, MPRV : UInt<1>, XS : UInt<2>, FS : UInt<2>, MPP : UInt<2>, WPRI2 : UInt<2>, SPP : UInt<1>, MPIE : UInt<1>, UBE : UInt<1>, SPIE : UInt<1>, UPIE : UInt<1>, MIE : UInt<1>, WPRI1_2 : UInt<1>, SIE : UInt<1>, UIE : UInt<1>}, clock with :
      reset => (reset, _mstatus_WIRE) @[CSR.scala 66:27]
    mie <= UInt<12>("haaa") @[CSR.scala 67:17]
    mip <= UInt<1>("h0") @[CSR.scala 68:17]
    node _mtvec_T = shl(UInt<64>("h0"), 2) @[CSR.scala 70:33]
    mtvec <= _mtvec_T @[CSR.scala 70:17]
    node _stvec_T = shl(UInt<64>("h100"), 2) @[CSR.scala 71:33]
    stvec <= _stvec_T @[CSR.scala 71:17]
    node _utvec_T = shl(UInt<64>("h200"), 2) @[CSR.scala 72:33]
    utvec <= _utvec_T @[CSR.scala 72:17]
    medeleg <= UInt<1>("h0") @[CSR.scala 73:17]
    mideleg <= UInt<1>("h0") @[CSR.scala 74:17]
    sedeleg <= UInt<1>("h0") @[CSR.scala 75:17]
    sideleg <= UInt<1>("h0") @[CSR.scala 76:17]
    node _R_ONLY_T = bits(io.ID_2_CSR.addr, 11, 10) @[CSR.scala 78:34]
    node R_ONLY = andr(_R_ONLY_T) @[CSR.scala 78:42]
    node privRequired = bits(io.ID_2_CSR.addr, 9, 8) @[CSR.scala 79:34]
    node legalRead = geq(priv, privRequired) @[CSR.scala 80:32]
    node _legalWrite_T = eq(R_ONLY, UInt<1>("h0")) @[CSR.scala 81:28]
    node _legalWrite_T_1 = eq(io.ID_2_CSR.wdata, UInt<1>("h0")) @[CSR.scala 81:69]
    node _legalWrite_T_2 = and(R_ONLY, _legalWrite_T_1) @[CSR.scala 81:49]
    node legalWrite = or(_legalWrite_T, _legalWrite_T_2) @[CSR.scala 81:39]
    when io.writeOp.en : @[CSR.scala 83:24]
      node _T_3 = bits(io.ID_2_CSR.addr, 9, 0) @[CSR.scala 84:12]
      infer mport MPORT_5 = csr[_T_3], clock @[CSR.scala 84:12]
      MPORT_5 <= io.writeOp.data @[CSR.scala 84:25]
    node _xtvec_T = eq(UInt<2>("h3"), nextPriv) @[Mux.scala 81:61]
    node _xtvec_T_1 = mux(_xtvec_T, mtvec, UInt<1>("h0")) @[Mux.scala 81:58]
    node _xtvec_T_2 = eq(UInt<2>("h1"), nextPriv) @[Mux.scala 81:61]
    node _xtvec_T_3 = mux(_xtvec_T_2, stvec, _xtvec_T_1) @[Mux.scala 81:58]
    node _xtvec_T_4 = eq(UInt<2>("h0"), nextPriv) @[Mux.scala 81:61]
    node xtvec = mux(_xtvec_T_4, utvec, _xtvec_T_3) @[Mux.scala 81:58]
    node _xepc_T = eq(UInt<2>("h3"), nextPriv) @[Mux.scala 81:61]
    node _xepc_T_1 = mux(_xepc_T, mepc, UInt<1>("h0")) @[Mux.scala 81:58]
    node _xepc_T_2 = eq(UInt<2>("h1"), nextPriv) @[Mux.scala 81:61]
    node _xepc_T_3 = mux(_xepc_T_2, sepc, _xepc_T_1) @[Mux.scala 81:58]
    node _xepc_T_4 = eq(UInt<2>("h0"), nextPriv) @[Mux.scala 81:61]
    node xepc = mux(_xepc_T_4, uepc, _xepc_T_3) @[Mux.scala 81:58]
    node cause_hi = cat(io.exception.int, UInt<58>("h0")) @[Cat.scala 31:58]
    node cause = cat(cause_hi, io.exception.cause) @[Cat.scala 31:58]
    node timer_inter = geq(mtime, mtimecmp) @[CSR.scala 102:30]
    node _xtvec_mode_T = bits(xtvec, 0, 0) @[CSR.scala 103:28]
    node _xtvec_mode_T_1 = bits(xtvec, 1, 1) @[CSR.scala 103:39]
    node xtvec_mode = or(_xtvec_mode_T, _xtvec_mode_T_1) @[CSR.scala 103:32]
    node base = bits(xtvec, 63, 2) @[CSR.scala 104:28]
    when io.exception.happen : @[CSR.scala 105:39]
      node _nextPriv_T = eq(io.exception.int, UInt<1>("h0")) @[CSR.scala 108:14]
      node _nextPriv_T_1 = bits(cause, 4, 0) @[CSR.scala 108:39]
      node _nextPriv_T_2 = dshr(medeleg, _nextPriv_T_1) @[CSR.scala 108:33]
      node _nextPriv_T_3 = bits(_nextPriv_T_2, 0, 0) @[CSR.scala 108:33]
      node _nextPriv_T_4 = eq(_nextPriv_T_3, UInt<1>("h0")) @[CSR.scala 108:25]
      node _nextPriv_T_5 = and(_nextPriv_T, _nextPriv_T_4) @[CSR.scala 108:22]
      node _nextPriv_T_6 = bits(cause, 4, 0) @[CSR.scala 109:39]
      node _nextPriv_T_7 = dshr(mideleg, _nextPriv_T_6) @[CSR.scala 109:33]
      node _nextPriv_T_8 = bits(_nextPriv_T_7, 0, 0) @[CSR.scala 109:33]
      node _nextPriv_T_9 = eq(_nextPriv_T_8, UInt<1>("h0")) @[CSR.scala 109:25]
      node _nextPriv_T_10 = and(io.exception.int, _nextPriv_T_9) @[CSR.scala 109:22]
      node _nextPriv_T_11 = eq(io.exception.int, UInt<1>("h0")) @[CSR.scala 110:14]
      node _nextPriv_T_12 = bits(cause, 4, 0) @[CSR.scala 110:39]
      node _nextPriv_T_13 = dshr(sedeleg, _nextPriv_T_12) @[CSR.scala 110:33]
      node _nextPriv_T_14 = bits(_nextPriv_T_13, 0, 0) @[CSR.scala 110:33]
      node _nextPriv_T_15 = eq(_nextPriv_T_14, UInt<1>("h0")) @[CSR.scala 110:25]
      node _nextPriv_T_16 = and(_nextPriv_T_11, _nextPriv_T_15) @[CSR.scala 110:22]
      node _nextPriv_T_17 = bits(cause, 4, 0) @[CSR.scala 111:39]
      node _nextPriv_T_18 = dshr(sideleg, _nextPriv_T_17) @[CSR.scala 111:33]
      node _nextPriv_T_19 = bits(_nextPriv_T_18, 0, 0) @[CSR.scala 111:33]
      node _nextPriv_T_20 = eq(_nextPriv_T_19, UInt<1>("h0")) @[CSR.scala 111:25]
      node _nextPriv_T_21 = and(io.exception.int, _nextPriv_T_20) @[CSR.scala 111:22]
      node _nextPriv_T_22 = mux(_nextPriv_T_21, UInt<2>("h1"), UInt<2>("h0")) @[Mux.scala 47:70]
      node _nextPriv_T_23 = mux(_nextPriv_T_16, UInt<2>("h1"), _nextPriv_T_22) @[Mux.scala 47:70]
      node _nextPriv_T_24 = mux(_nextPriv_T_10, UInt<2>("h3"), _nextPriv_T_23) @[Mux.scala 47:70]
      node _nextPriv_T_25 = mux(_nextPriv_T_5, UInt<2>("h3"), _nextPriv_T_24) @[Mux.scala 47:70]
      nextPriv <= _nextPriv_T_25 @[CSR.scala 107:18]
      node _T_4 = eq(UInt<2>("h3"), nextPriv) @[CSR.scala 115:26]
      when _T_4 : @[CSR.scala 115:26]
        mstatus.MPIE <= mstatus.MIE @[CSR.scala 117:30]
        mstatus.MIE <= UInt<1>("h0") @[CSR.scala 118:30]
        mstatus.MPP <= priv @[CSR.scala 119:30]
        mepc <= io.exception.pc @[CSR.scala 120:30]
        mcause <= cause @[CSR.scala 121:30]
        mtval <= io.exception.xtval @[CSR.scala 122:30]
      else :
        node _T_5 = eq(UInt<2>("h1"), nextPriv) @[CSR.scala 115:26]
        when _T_5 : @[CSR.scala 115:26]
          mstatus.SPIE <= mstatus.SIE @[CSR.scala 125:30]
          mstatus.SIE <= UInt<1>("h0") @[CSR.scala 126:30]
          node _mstatus_SPP_T = eq(priv, UInt<2>("h1")) @[CSR.scala 127:39]
          mstatus.SPP <= _mstatus_SPP_T @[CSR.scala 127:30]
          sepc <= io.exception.pc @[CSR.scala 128:30]
          scause <= cause @[CSR.scala 129:30]
          stval <= io.exception.xtval @[CSR.scala 130:30]
        else :
          node _T_6 = eq(UInt<2>("h0"), nextPriv) @[CSR.scala 115:26]
          when _T_6 : @[CSR.scala 115:26]
            mstatus.UPIE <= mstatus.UIE @[CSR.scala 133:30]
            mstatus.UIE <= UInt<1>("h0") @[CSR.scala 134:30]
            uepc <= io.exception.pc @[CSR.scala 135:30]
            ucause <= cause @[CSR.scala 136:30]
            utval <= io.exception.xtval @[CSR.scala 137:30]
    io.CSR_2_ID.xepc <= xepc @[CSR.scala 144:29]
    node _io_CSR_2_ID_xtvec_T = add(base, cause) @[CSR.scala 145:54]
    node _io_CSR_2_ID_xtvec_T_1 = tail(_io_CSR_2_ID_xtvec_T, 1) @[CSR.scala 145:54]
    node _io_CSR_2_ID_xtvec_T_2 = shl(_io_CSR_2_ID_xtvec_T_1, 2) @[CSR.scala 145:62]
    node _io_CSR_2_ID_xtvec_T_3 = mux(xtvec_mode, _io_CSR_2_ID_xtvec_T_2, base) @[CSR.scala 145:36]
    io.CSR_2_ID.xtvec <= _io_CSR_2_ID_xtvec_T_3 @[CSR.scala 145:29]
    node _io_CSR_2_ID_data_T = bits(io.ID_2_CSR.addr, 9, 0) @[CSR.scala 146:36]
    infer mport io_CSR_2_ID_data_MPORT = csr[_io_CSR_2_ID_data_T], clock @[CSR.scala 146:36]
    io.CSR_2_ID.data <= io_CSR_2_ID_data_MPORT @[CSR.scala 146:29]
    io.CSR_2_ID.legalWrite <= legalWrite @[CSR.scala 147:29]
    io.CSR_2_ID.legalRead <= legalRead @[CSR.scala 148:29]
    io.CSR_2_ID.priv <= priv @[CSR.scala 149:29]

  module Regfile :
    input clock : Clock
    input reset : Reset
    output io : { flip id2Rf : { ReadIdx1 : UInt<5>, ReadIdx2 : UInt<5>}, flip writeRfOp : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, rf2Id : { RegData1 : UInt<64>, RegData2 : UInt<64>}}

    wire _rf_WIRE : UInt<64>[31] @[Regfile.scala 12:32]
    _rf_WIRE[0] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[1] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[2] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[3] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[4] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[5] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[6] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[7] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[8] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[9] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[10] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[11] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[12] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[13] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[14] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[15] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[16] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[17] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[18] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[19] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[20] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[21] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[22] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[23] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[24] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[25] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[26] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[27] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[28] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[29] <= UInt<64>("h0") @[Regfile.scala 12:32]
    _rf_WIRE[30] <= UInt<64>("h0") @[Regfile.scala 12:32]
    reg rf : UInt<64>[31], clock with :
      reset => (reset, _rf_WIRE) @[Regfile.scala 12:24]
    rf[0] <= UInt<1>("h0") @[Regfile.scala 13:14]
    when io.writeRfOp.en : @[Regfile.scala 15:26]
      rf[io.writeRfOp.addr] <= io.writeRfOp.data @[Regfile.scala 17:35]
    io.rf2Id.RegData1 <= rf[io.id2Rf.ReadIdx1] @[Regfile.scala 20:23]
    io.rf2Id.RegData2 <= rf[io.id2Rf.ReadIdx2] @[Regfile.scala 21:23]

  module If_Id :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip flush : UInt<1>, flip pc_i : UInt<64>, flip inst_i : UInt<32>, pc_o : UInt<64>, inst_o : UInt<32>}

    reg inst : UInt, clock with :
      reset => (UInt<1>("h0"), inst) @[pipeline-registers.scala 15:27]
    inst <= io.inst_i @[pipeline-registers.scala 15:27]
    reg pc : UInt, clock with :
      reset => (UInt<1>("h0"), pc) @[pipeline-registers.scala 16:27]
    pc <= io.pc_i @[pipeline-registers.scala 16:27]
    node _T = asUInt(reset) @[pipeline-registers.scala 18:16]
    node _T_1 = or(_T, io.flush) @[pipeline-registers.scala 18:23]
    when _T_1 : @[pipeline-registers.scala 18:34]
      inst <= UInt<1>("h0") @[pipeline-registers.scala 19:17]
      pc <= UInt<1>("h0") @[pipeline-registers.scala 20:17]
    else :
      when io.stall : @[pipeline-registers.scala 21:25]
        inst <= inst @[pipeline-registers.scala 22:17]
        pc <= pc @[pipeline-registers.scala 23:17]
    io.inst_o <= inst @[pipeline-registers.scala 25:15]
    io.pc_o <= pc @[pipeline-registers.scala 26:15]

  module Id :
    output io : { flip pc : UInt<64>, flip inst_i : UInt<32>, flip rf2Id : { RegData1 : UInt<64>, RegData2 : UInt<64>}, flip fwd : { rf : { ex : { addr : UInt<5>, data : UInt<64>}, mem : { addr : UInt<5>, data : UInt<64>}, wb : { addr : UInt<5>, data : UInt<64>}}, csr : { ex : { addr : UInt<12>, data : UInt<64>}, mem : { addr : UInt<12>, data : UInt<64>}, wb : { addr : UInt<12>, data : UInt<64>}}}, flip CSR_2_ID : { data : UInt<64>, legalWrite : UInt<1>, legalRead : UInt<1>, priv : UInt<2>, xtvec : UInt<64>, xepc : UInt<64>}, flip prev_is_load : UInt<1>, flip prev_rd : UInt<5>, ID_2_CSR : { addr : UInt<12>, wdata : UInt<64>}, id2Rf : { ReadIdx1 : UInt<5>, ReadIdx2 : UInt<5>}, decInfo : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, InstType : UInt<3>, aluop : UInt<5>, branchOp : { taken : UInt<1>, target : UInt<64>}, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>}, writeCSROp : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}}, flush_req : UInt<1>, stall_req : UInt<1>, exception : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}}

    node funct3 = bits(io.inst_i, 14, 12) @[Id.scala 26:24]
    node csrAddr = bits(io.inst_i, 31, 20) @[Id.scala 27:24]
    node rs1 = bits(io.inst_i, 19, 15) @[Id.scala 35:24]
    node rs2 = bits(io.inst_i, 24, 20) @[Id.scala 36:24]
    node rd = bits(io.inst_i, 11, 7) @[Id.scala 37:24]
    node _imm_I_T = bits(io.inst_i, 31, 20) @[Id.scala 39:40]
    node _imm_I_T_1 = asSInt(_imm_I_T) @[helpers.scala 14:47]
    node _imm_I_T_2 = pad(_imm_I_T_1, 64) @[helpers.scala 14:57]
    node imm_I = asUInt(_imm_I_T_2) @[helpers.scala 14:62]
    node _imm_S_T = bits(io.inst_i, 31, 25) @[Id.scala 40:44]
    node _imm_S_T_1 = bits(io.inst_i, 11, 7) @[Id.scala 40:57]
    node _imm_S_T_2 = cat(_imm_S_T, _imm_S_T_1) @[Cat.scala 31:58]
    node _imm_S_T_3 = asSInt(_imm_S_T_2) @[helpers.scala 14:47]
    node _imm_S_T_4 = pad(_imm_S_T_3, 64) @[helpers.scala 14:57]
    node imm_S = asUInt(_imm_S_T_4) @[helpers.scala 14:62]
    node _imm_B_T = bits(io.inst_i, 31, 31) @[Id.scala 41:44]
    node _imm_B_T_1 = bits(io.inst_i, 7, 7) @[Id.scala 41:54]
    node _imm_B_T_2 = bits(io.inst_i, 30, 25) @[Id.scala 41:63]
    node _imm_B_T_3 = bits(io.inst_i, 11, 8) @[Id.scala 41:76]
    node imm_B_lo = cat(_imm_B_T_3, UInt<1>("h0")) @[Cat.scala 31:58]
    node imm_B_hi_hi = cat(_imm_B_T, _imm_B_T_1) @[Cat.scala 31:58]
    node imm_B_hi = cat(imm_B_hi_hi, _imm_B_T_2) @[Cat.scala 31:58]
    node _imm_B_T_4 = cat(imm_B_hi, imm_B_lo) @[Cat.scala 31:58]
    node _imm_B_T_5 = asSInt(_imm_B_T_4) @[helpers.scala 14:47]
    node _imm_B_T_6 = pad(_imm_B_T_5, 64) @[helpers.scala 14:57]
    node imm_B = asUInt(_imm_B_T_6) @[helpers.scala 14:62]
    node _imm_J_T = bits(io.inst_i, 31, 31) @[Id.scala 42:44]
    node _imm_J_T_1 = bits(io.inst_i, 19, 12) @[Id.scala 42:54]
    node _imm_J_T_2 = bits(io.inst_i, 20, 20) @[Id.scala 42:67]
    node _imm_J_T_3 = bits(io.inst_i, 30, 21) @[Id.scala 42:77]
    node imm_J_lo = cat(_imm_J_T_3, UInt<1>("h0")) @[Cat.scala 31:58]
    node imm_J_hi_hi = cat(_imm_J_T, _imm_J_T_1) @[Cat.scala 31:58]
    node imm_J_hi = cat(imm_J_hi_hi, _imm_J_T_2) @[Cat.scala 31:58]
    node _imm_J_T_4 = cat(imm_J_hi, imm_J_lo) @[Cat.scala 31:58]
    node _imm_J_T_5 = asSInt(_imm_J_T_4) @[helpers.scala 14:47]
    node _imm_J_T_6 = pad(_imm_J_T_5, 64) @[helpers.scala 14:57]
    node imm_J = asUInt(_imm_J_T_6) @[helpers.scala 14:62]
    node _imm_U_T = bits(io.inst_i, 31, 12) @[Id.scala 43:40]
    node _imm_U_T_1 = asSInt(_imm_U_T) @[helpers.scala 14:47]
    node _imm_U_T_2 = pad(_imm_U_T_1, 64) @[helpers.scala 14:57]
    node imm_U = asUInt(_imm_U_T_2) @[helpers.scala 14:62]
    node uimm = bits(io.inst_i, 19, 15) @[Id.scala 44:24]
    node _branch_target_T = add(imm_B, io.pc) @[Id.scala 46:33]
    node branch_target = tail(_branch_target_T, 1) @[Id.scala 46:33]
    node _jal_target_T = add(imm_J, io.pc) @[Id.scala 47:33]
    node jal_target = tail(_jal_target_T, 1) @[Id.scala 47:33]
    node _jalr_target_T = add(imm_I, io.pc) @[Id.scala 48:33]
    node jalr_target = tail(_jalr_target_T, 1) @[Id.scala 48:33]
    node _decRes_T = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_1 = eq(UInt<6>("h33"), _decRes_T) @[Lookup.scala 31:38]
    node _decRes_T_2 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_3 = eq(UInt<31>("h40000033"), _decRes_T_2) @[Lookup.scala 31:38]
    node _decRes_T_4 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_5 = eq(UInt<13>("h1033"), _decRes_T_4) @[Lookup.scala 31:38]
    node _decRes_T_6 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_7 = eq(UInt<14>("h2033"), _decRes_T_6) @[Lookup.scala 31:38]
    node _decRes_T_8 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_9 = eq(UInt<14>("h3033"), _decRes_T_8) @[Lookup.scala 31:38]
    node _decRes_T_10 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_11 = eq(UInt<15>("h4033"), _decRes_T_10) @[Lookup.scala 31:38]
    node _decRes_T_12 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_13 = eq(UInt<15>("h5033"), _decRes_T_12) @[Lookup.scala 31:38]
    node _decRes_T_14 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_15 = eq(UInt<31>("h40005033"), _decRes_T_14) @[Lookup.scala 31:38]
    node _decRes_T_16 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_17 = eq(UInt<15>("h6033"), _decRes_T_16) @[Lookup.scala 31:38]
    node _decRes_T_18 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_19 = eq(UInt<15>("h7033"), _decRes_T_18) @[Lookup.scala 31:38]
    node _decRes_T_20 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_21 = eq(UInt<5>("h13"), _decRes_T_20) @[Lookup.scala 31:38]
    node _decRes_T_22 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_23 = eq(UInt<14>("h2013"), _decRes_T_22) @[Lookup.scala 31:38]
    node _decRes_T_24 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_25 = eq(UInt<14>("h3013"), _decRes_T_24) @[Lookup.scala 31:38]
    node _decRes_T_26 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_27 = eq(UInt<15>("h4013"), _decRes_T_26) @[Lookup.scala 31:38]
    node _decRes_T_28 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_29 = eq(UInt<15>("h6013"), _decRes_T_28) @[Lookup.scala 31:38]
    node _decRes_T_30 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_31 = eq(UInt<15>("h7013"), _decRes_T_30) @[Lookup.scala 31:38]
    node _decRes_T_32 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_33 = eq(UInt<13>("h1013"), _decRes_T_32) @[Lookup.scala 31:38]
    node _decRes_T_34 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_35 = eq(UInt<15>("h5013"), _decRes_T_34) @[Lookup.scala 31:38]
    node _decRes_T_36 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_37 = eq(UInt<31>("h40005013"), _decRes_T_36) @[Lookup.scala 31:38]
    node _decRes_T_38 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_39 = eq(UInt<2>("h3"), _decRes_T_38) @[Lookup.scala 31:38]
    node _decRes_T_40 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_41 = eq(UInt<13>("h1003"), _decRes_T_40) @[Lookup.scala 31:38]
    node _decRes_T_42 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_43 = eq(UInt<14>("h2003"), _decRes_T_42) @[Lookup.scala 31:38]
    node _decRes_T_44 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_45 = eq(UInt<15>("h4003"), _decRes_T_44) @[Lookup.scala 31:38]
    node _decRes_T_46 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_47 = eq(UInt<15>("h5003"), _decRes_T_46) @[Lookup.scala 31:38]
    node _decRes_T_48 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_49 = eq(UInt<6>("h23"), _decRes_T_48) @[Lookup.scala 31:38]
    node _decRes_T_50 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_51 = eq(UInt<13>("h1023"), _decRes_T_50) @[Lookup.scala 31:38]
    node _decRes_T_52 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_53 = eq(UInt<14>("h2023"), _decRes_T_52) @[Lookup.scala 31:38]
    node _decRes_T_54 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_55 = eq(UInt<26>("h2000033"), _decRes_T_54) @[Lookup.scala 31:38]
    node _decRes_T_56 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_57 = eq(UInt<26>("h2001033"), _decRes_T_56) @[Lookup.scala 31:38]
    node _decRes_T_58 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_59 = eq(UInt<26>("h2002033"), _decRes_T_58) @[Lookup.scala 31:38]
    node _decRes_T_60 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_61 = eq(UInt<26>("h2004033"), _decRes_T_60) @[Lookup.scala 31:38]
    node _decRes_T_62 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_63 = eq(UInt<26>("h2005033"), _decRes_T_62) @[Lookup.scala 31:38]
    node _decRes_T_64 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_65 = eq(UInt<26>("h2006033"), _decRes_T_64) @[Lookup.scala 31:38]
    node _decRes_T_66 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_67 = eq(UInt<26>("h2007033"), _decRes_T_66) @[Lookup.scala 31:38]
    node _decRes_T_68 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_69 = eq(UInt<7>("h63"), _decRes_T_68) @[Lookup.scala 31:38]
    node _decRes_T_70 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_71 = eq(UInt<13>("h1063"), _decRes_T_70) @[Lookup.scala 31:38]
    node _decRes_T_72 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_73 = eq(UInt<15>("h4063"), _decRes_T_72) @[Lookup.scala 31:38]
    node _decRes_T_74 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_75 = eq(UInt<15>("h5063"), _decRes_T_74) @[Lookup.scala 31:38]
    node _decRes_T_76 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_77 = eq(UInt<15>("h6063"), _decRes_T_76) @[Lookup.scala 31:38]
    node _decRes_T_78 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_79 = eq(UInt<15>("h7063"), _decRes_T_78) @[Lookup.scala 31:38]
    node _decRes_T_80 = and(io.inst_i, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _decRes_T_81 = eq(UInt<7>("h6f"), _decRes_T_80) @[Lookup.scala 31:38]
    node _decRes_T_82 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_83 = eq(UInt<7>("h67"), _decRes_T_82) @[Lookup.scala 31:38]
    node _decRes_T_84 = and(io.inst_i, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _decRes_T_85 = eq(UInt<6>("h37"), _decRes_T_84) @[Lookup.scala 31:38]
    node _decRes_T_86 = and(io.inst_i, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _decRes_T_87 = eq(UInt<5>("h17"), _decRes_T_86) @[Lookup.scala 31:38]
    node _decRes_T_88 = and(io.inst_i, UInt<7>("h7f")) @[Lookup.scala 31:38]
    node _decRes_T_89 = eq(UInt<7>("h73"), _decRes_T_88) @[Lookup.scala 31:38]
    node _decRes_T_90 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_91 = eq(UInt<5>("h1b"), _decRes_T_90) @[Lookup.scala 31:38]
    node _decRes_T_92 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_93 = eq(UInt<13>("h101b"), _decRes_T_92) @[Lookup.scala 31:38]
    node _decRes_T_94 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_95 = eq(UInt<15>("h501b"), _decRes_T_94) @[Lookup.scala 31:38]
    node _decRes_T_96 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_97 = eq(UInt<31>("h4000501b"), _decRes_T_96) @[Lookup.scala 31:38]
    node _decRes_T_98 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_99 = eq(UInt<6>("h3b"), _decRes_T_98) @[Lookup.scala 31:38]
    node _decRes_T_100 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_101 = eq(UInt<31>("h4000003b"), _decRes_T_100) @[Lookup.scala 31:38]
    node _decRes_T_102 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_103 = eq(UInt<13>("h103b"), _decRes_T_102) @[Lookup.scala 31:38]
    node _decRes_T_104 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_105 = eq(UInt<15>("h503b"), _decRes_T_104) @[Lookup.scala 31:38]
    node _decRes_T_106 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_107 = eq(UInt<31>("h4000503b"), _decRes_T_106) @[Lookup.scala 31:38]
    node _decRes_T_108 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_109 = eq(UInt<15>("h6003"), _decRes_T_108) @[Lookup.scala 31:38]
    node _decRes_T_110 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_111 = eq(UInt<14>("h3003"), _decRes_T_110) @[Lookup.scala 31:38]
    node _decRes_T_112 = and(io.inst_i, UInt<15>("h707f")) @[Lookup.scala 31:38]
    node _decRes_T_113 = eq(UInt<14>("h3023"), _decRes_T_112) @[Lookup.scala 31:38]
    node _decRes_T_114 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_115 = eq(UInt<26>("h200003b"), _decRes_T_114) @[Lookup.scala 31:38]
    node _decRes_T_116 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_117 = eq(UInt<26>("h200403b"), _decRes_T_116) @[Lookup.scala 31:38]
    node _decRes_T_118 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_119 = eq(UInt<26>("h200503b"), _decRes_T_118) @[Lookup.scala 31:38]
    node _decRes_T_120 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_121 = eq(UInt<26>("h200603b"), _decRes_T_120) @[Lookup.scala 31:38]
    node _decRes_T_122 = and(io.inst_i, UInt<32>("hfe00707f")) @[Lookup.scala 31:38]
    node _decRes_T_123 = eq(UInt<26>("h200703b"), _decRes_T_122) @[Lookup.scala 31:38]
    node _decRes_T_124 = mux(_decRes_T_123, UInt<4>("h1"), UInt<4>("h0")) @[Lookup.scala 34:39]
    node _decRes_T_125 = mux(_decRes_T_121, UInt<4>("h1"), _decRes_T_124) @[Lookup.scala 34:39]
    node _decRes_T_126 = mux(_decRes_T_119, UInt<4>("h1"), _decRes_T_125) @[Lookup.scala 34:39]
    node _decRes_T_127 = mux(_decRes_T_117, UInt<4>("h1"), _decRes_T_126) @[Lookup.scala 34:39]
    node _decRes_T_128 = mux(_decRes_T_115, UInt<4>("h1"), _decRes_T_127) @[Lookup.scala 34:39]
    node _decRes_T_129 = mux(_decRes_T_113, UInt<4>("h3"), _decRes_T_128) @[Lookup.scala 34:39]
    node _decRes_T_130 = mux(_decRes_T_111, UInt<4>("h2"), _decRes_T_129) @[Lookup.scala 34:39]
    node _decRes_T_131 = mux(_decRes_T_109, UInt<4>("h2"), _decRes_T_130) @[Lookup.scala 34:39]
    node _decRes_T_132 = mux(_decRes_T_107, UInt<4>("h1"), _decRes_T_131) @[Lookup.scala 34:39]
    node _decRes_T_133 = mux(_decRes_T_105, UInt<4>("h1"), _decRes_T_132) @[Lookup.scala 34:39]
    node _decRes_T_134 = mux(_decRes_T_103, UInt<4>("h1"), _decRes_T_133) @[Lookup.scala 34:39]
    node _decRes_T_135 = mux(_decRes_T_101, UInt<4>("h1"), _decRes_T_134) @[Lookup.scala 34:39]
    node _decRes_T_136 = mux(_decRes_T_99, UInt<4>("h1"), _decRes_T_135) @[Lookup.scala 34:39]
    node _decRes_T_137 = mux(_decRes_T_97, UInt<4>("h2"), _decRes_T_136) @[Lookup.scala 34:39]
    node _decRes_T_138 = mux(_decRes_T_95, UInt<4>("h2"), _decRes_T_137) @[Lookup.scala 34:39]
    node _decRes_T_139 = mux(_decRes_T_93, UInt<4>("h2"), _decRes_T_138) @[Lookup.scala 34:39]
    node _decRes_T_140 = mux(_decRes_T_91, UInt<4>("h2"), _decRes_T_139) @[Lookup.scala 34:39]
    node _decRes_T_141 = mux(_decRes_T_89, UInt<4>("h7"), _decRes_T_140) @[Lookup.scala 34:39]
    node _decRes_T_142 = mux(_decRes_T_87, UInt<4>("h5"), _decRes_T_141) @[Lookup.scala 34:39]
    node _decRes_T_143 = mux(_decRes_T_85, UInt<4>("h5"), _decRes_T_142) @[Lookup.scala 34:39]
    node _decRes_T_144 = mux(_decRes_T_83, UInt<4>("h2"), _decRes_T_143) @[Lookup.scala 34:39]
    node _decRes_T_145 = mux(_decRes_T_81, UInt<4>("h6"), _decRes_T_144) @[Lookup.scala 34:39]
    node _decRes_T_146 = mux(_decRes_T_79, UInt<4>("h4"), _decRes_T_145) @[Lookup.scala 34:39]
    node _decRes_T_147 = mux(_decRes_T_77, UInt<4>("h4"), _decRes_T_146) @[Lookup.scala 34:39]
    node _decRes_T_148 = mux(_decRes_T_75, UInt<4>("h4"), _decRes_T_147) @[Lookup.scala 34:39]
    node _decRes_T_149 = mux(_decRes_T_73, UInt<4>("h4"), _decRes_T_148) @[Lookup.scala 34:39]
    node _decRes_T_150 = mux(_decRes_T_71, UInt<4>("h4"), _decRes_T_149) @[Lookup.scala 34:39]
    node _decRes_T_151 = mux(_decRes_T_69, UInt<4>("h4"), _decRes_T_150) @[Lookup.scala 34:39]
    node _decRes_T_152 = mux(_decRes_T_67, UInt<4>("h1"), _decRes_T_151) @[Lookup.scala 34:39]
    node _decRes_T_153 = mux(_decRes_T_65, UInt<4>("h1"), _decRes_T_152) @[Lookup.scala 34:39]
    node _decRes_T_154 = mux(_decRes_T_63, UInt<4>("h1"), _decRes_T_153) @[Lookup.scala 34:39]
    node _decRes_T_155 = mux(_decRes_T_61, UInt<4>("h1"), _decRes_T_154) @[Lookup.scala 34:39]
    node _decRes_T_156 = mux(_decRes_T_59, UInt<4>("h1"), _decRes_T_155) @[Lookup.scala 34:39]
    node _decRes_T_157 = mux(_decRes_T_57, UInt<4>("h1"), _decRes_T_156) @[Lookup.scala 34:39]
    node _decRes_T_158 = mux(_decRes_T_55, UInt<4>("h1"), _decRes_T_157) @[Lookup.scala 34:39]
    node _decRes_T_159 = mux(_decRes_T_53, UInt<4>("h3"), _decRes_T_158) @[Lookup.scala 34:39]
    node _decRes_T_160 = mux(_decRes_T_51, UInt<4>("h3"), _decRes_T_159) @[Lookup.scala 34:39]
    node _decRes_T_161 = mux(_decRes_T_49, UInt<4>("h3"), _decRes_T_160) @[Lookup.scala 34:39]
    node _decRes_T_162 = mux(_decRes_T_47, UInt<4>("h2"), _decRes_T_161) @[Lookup.scala 34:39]
    node _decRes_T_163 = mux(_decRes_T_45, UInt<4>("h2"), _decRes_T_162) @[Lookup.scala 34:39]
    node _decRes_T_164 = mux(_decRes_T_43, UInt<4>("h2"), _decRes_T_163) @[Lookup.scala 34:39]
    node _decRes_T_165 = mux(_decRes_T_41, UInt<4>("h2"), _decRes_T_164) @[Lookup.scala 34:39]
    node _decRes_T_166 = mux(_decRes_T_39, UInt<4>("h2"), _decRes_T_165) @[Lookup.scala 34:39]
    node _decRes_T_167 = mux(_decRes_T_37, UInt<4>("h2"), _decRes_T_166) @[Lookup.scala 34:39]
    node _decRes_T_168 = mux(_decRes_T_35, UInt<4>("h2"), _decRes_T_167) @[Lookup.scala 34:39]
    node _decRes_T_169 = mux(_decRes_T_33, UInt<4>("h2"), _decRes_T_168) @[Lookup.scala 34:39]
    node _decRes_T_170 = mux(_decRes_T_31, UInt<4>("h2"), _decRes_T_169) @[Lookup.scala 34:39]
    node _decRes_T_171 = mux(_decRes_T_29, UInt<4>("h2"), _decRes_T_170) @[Lookup.scala 34:39]
    node _decRes_T_172 = mux(_decRes_T_27, UInt<4>("h2"), _decRes_T_171) @[Lookup.scala 34:39]
    node _decRes_T_173 = mux(_decRes_T_25, UInt<4>("h2"), _decRes_T_172) @[Lookup.scala 34:39]
    node _decRes_T_174 = mux(_decRes_T_23, UInt<4>("h2"), _decRes_T_173) @[Lookup.scala 34:39]
    node _decRes_T_175 = mux(_decRes_T_21, UInt<4>("h2"), _decRes_T_174) @[Lookup.scala 34:39]
    node _decRes_T_176 = mux(_decRes_T_19, UInt<4>("h1"), _decRes_T_175) @[Lookup.scala 34:39]
    node _decRes_T_177 = mux(_decRes_T_17, UInt<4>("h1"), _decRes_T_176) @[Lookup.scala 34:39]
    node _decRes_T_178 = mux(_decRes_T_15, UInt<4>("h1"), _decRes_T_177) @[Lookup.scala 34:39]
    node _decRes_T_179 = mux(_decRes_T_13, UInt<4>("h1"), _decRes_T_178) @[Lookup.scala 34:39]
    node _decRes_T_180 = mux(_decRes_T_11, UInt<4>("h1"), _decRes_T_179) @[Lookup.scala 34:39]
    node _decRes_T_181 = mux(_decRes_T_9, UInt<4>("h1"), _decRes_T_180) @[Lookup.scala 34:39]
    node _decRes_T_182 = mux(_decRes_T_7, UInt<4>("h1"), _decRes_T_181) @[Lookup.scala 34:39]
    node _decRes_T_183 = mux(_decRes_T_5, UInt<4>("h1"), _decRes_T_182) @[Lookup.scala 34:39]
    node _decRes_T_184 = mux(_decRes_T_3, UInt<4>("h1"), _decRes_T_183) @[Lookup.scala 34:39]
    node decRes_0 = mux(_decRes_T_1, UInt<4>("h1"), _decRes_T_184) @[Lookup.scala 34:39]
    node _decRes_T_185 = mux(_decRes_T_123, UInt<5>("h0"), UInt<5>("h0")) @[Lookup.scala 34:39]
    node _decRes_T_186 = mux(_decRes_T_121, UInt<5>("h0"), _decRes_T_185) @[Lookup.scala 34:39]
    node _decRes_T_187 = mux(_decRes_T_119, UInt<5>("h0"), _decRes_T_186) @[Lookup.scala 34:39]
    node _decRes_T_188 = mux(_decRes_T_117, UInt<5>("h0"), _decRes_T_187) @[Lookup.scala 34:39]
    node _decRes_T_189 = mux(_decRes_T_115, UInt<5>("hb"), _decRes_T_188) @[Lookup.scala 34:39]
    node _decRes_T_190 = mux(_decRes_T_113, UInt<5>("h0"), _decRes_T_189) @[Lookup.scala 34:39]
    node _decRes_T_191 = mux(_decRes_T_111, UInt<5>("h0"), _decRes_T_190) @[Lookup.scala 34:39]
    node _decRes_T_192 = mux(_decRes_T_109, UInt<5>("h0"), _decRes_T_191) @[Lookup.scala 34:39]
    node _decRes_T_193 = mux(_decRes_T_107, UInt<5>("h14"), _decRes_T_192) @[Lookup.scala 34:39]
    node _decRes_T_194 = mux(_decRes_T_105, UInt<5>("h13"), _decRes_T_193) @[Lookup.scala 34:39]
    node _decRes_T_195 = mux(_decRes_T_103, UInt<5>("h12"), _decRes_T_194) @[Lookup.scala 34:39]
    node _decRes_T_196 = mux(_decRes_T_101, UInt<5>("h11"), _decRes_T_195) @[Lookup.scala 34:39]
    node _decRes_T_197 = mux(_decRes_T_99, UInt<5>("h10"), _decRes_T_196) @[Lookup.scala 34:39]
    node _decRes_T_198 = mux(_decRes_T_97, UInt<5>("h14"), _decRes_T_197) @[Lookup.scala 34:39]
    node _decRes_T_199 = mux(_decRes_T_95, UInt<5>("h13"), _decRes_T_198) @[Lookup.scala 34:39]
    node _decRes_T_200 = mux(_decRes_T_93, UInt<5>("h12"), _decRes_T_199) @[Lookup.scala 34:39]
    node _decRes_T_201 = mux(_decRes_T_91, UInt<5>("h10"), _decRes_T_200) @[Lookup.scala 34:39]
    node _decRes_T_202 = mux(_decRes_T_89, UInt<5>("h0"), _decRes_T_201) @[Lookup.scala 34:39]
    node _decRes_T_203 = mux(_decRes_T_87, UInt<5>("h19"), _decRes_T_202) @[Lookup.scala 34:39]
    node _decRes_T_204 = mux(_decRes_T_85, UInt<5>("h18"), _decRes_T_203) @[Lookup.scala 34:39]
    node _decRes_T_205 = mux(_decRes_T_83, UInt<5>("ha"), _decRes_T_204) @[Lookup.scala 34:39]
    node _decRes_T_206 = mux(_decRes_T_81, UInt<5>("h0"), _decRes_T_205) @[Lookup.scala 34:39]
    node _decRes_T_207 = mux(_decRes_T_79, UInt<3>("h7"), _decRes_T_206) @[Lookup.scala 34:39]
    node _decRes_T_208 = mux(_decRes_T_77, UInt<3>("h6"), _decRes_T_207) @[Lookup.scala 34:39]
    node _decRes_T_209 = mux(_decRes_T_75, UInt<3>("h5"), _decRes_T_208) @[Lookup.scala 34:39]
    node _decRes_T_210 = mux(_decRes_T_73, UInt<3>("h4"), _decRes_T_209) @[Lookup.scala 34:39]
    node _decRes_T_211 = mux(_decRes_T_71, UInt<3>("h1"), _decRes_T_210) @[Lookup.scala 34:39]
    node _decRes_T_212 = mux(_decRes_T_69, UInt<3>("h0"), _decRes_T_211) @[Lookup.scala 34:39]
    node _decRes_T_213 = mux(_decRes_T_67, UInt<5>("h1d"), _decRes_T_212) @[Lookup.scala 34:39]
    node _decRes_T_214 = mux(_decRes_T_65, UInt<5>("h1c"), _decRes_T_213) @[Lookup.scala 34:39]
    node _decRes_T_215 = mux(_decRes_T_63, UInt<5>("h1b"), _decRes_T_214) @[Lookup.scala 34:39]
    node _decRes_T_216 = mux(_decRes_T_61, UInt<5>("h1a"), _decRes_T_215) @[Lookup.scala 34:39]
    node _decRes_T_217 = mux(_decRes_T_59, UInt<5>("hd"), _decRes_T_216) @[Lookup.scala 34:39]
    node _decRes_T_218 = mux(_decRes_T_57, UInt<5>("hc"), _decRes_T_217) @[Lookup.scala 34:39]
    node _decRes_T_219 = mux(_decRes_T_55, UInt<5>("hb"), _decRes_T_218) @[Lookup.scala 34:39]
    node _decRes_T_220 = mux(_decRes_T_53, UInt<5>("h0"), _decRes_T_219) @[Lookup.scala 34:39]
    node _decRes_T_221 = mux(_decRes_T_51, UInt<5>("h0"), _decRes_T_220) @[Lookup.scala 34:39]
    node _decRes_T_222 = mux(_decRes_T_49, UInt<5>("h0"), _decRes_T_221) @[Lookup.scala 34:39]
    node _decRes_T_223 = mux(_decRes_T_47, UInt<5>("h0"), _decRes_T_222) @[Lookup.scala 34:39]
    node _decRes_T_224 = mux(_decRes_T_45, UInt<5>("h0"), _decRes_T_223) @[Lookup.scala 34:39]
    node _decRes_T_225 = mux(_decRes_T_43, UInt<5>("h0"), _decRes_T_224) @[Lookup.scala 34:39]
    node _decRes_T_226 = mux(_decRes_T_41, UInt<5>("h0"), _decRes_T_225) @[Lookup.scala 34:39]
    node _decRes_T_227 = mux(_decRes_T_39, UInt<5>("h0"), _decRes_T_226) @[Lookup.scala 34:39]
    node _decRes_T_228 = mux(_decRes_T_37, UInt<5>("h9"), _decRes_T_227) @[Lookup.scala 34:39]
    node _decRes_T_229 = mux(_decRes_T_35, UInt<5>("h8"), _decRes_T_228) @[Lookup.scala 34:39]
    node _decRes_T_230 = mux(_decRes_T_33, UInt<5>("h7"), _decRes_T_229) @[Lookup.scala 34:39]
    node _decRes_T_231 = mux(_decRes_T_31, UInt<5>("h6"), _decRes_T_230) @[Lookup.scala 34:39]
    node _decRes_T_232 = mux(_decRes_T_29, UInt<5>("h5"), _decRes_T_231) @[Lookup.scala 34:39]
    node _decRes_T_233 = mux(_decRes_T_27, UInt<5>("h4"), _decRes_T_232) @[Lookup.scala 34:39]
    node _decRes_T_234 = mux(_decRes_T_25, UInt<5>("h3"), _decRes_T_233) @[Lookup.scala 34:39]
    node _decRes_T_235 = mux(_decRes_T_23, UInt<5>("h2"), _decRes_T_234) @[Lookup.scala 34:39]
    node _decRes_T_236 = mux(_decRes_T_21, UInt<5>("h0"), _decRes_T_235) @[Lookup.scala 34:39]
    node _decRes_T_237 = mux(_decRes_T_19, UInt<5>("h6"), _decRes_T_236) @[Lookup.scala 34:39]
    node _decRes_T_238 = mux(_decRes_T_17, UInt<5>("h5"), _decRes_T_237) @[Lookup.scala 34:39]
    node _decRes_T_239 = mux(_decRes_T_15, UInt<5>("h9"), _decRes_T_238) @[Lookup.scala 34:39]
    node _decRes_T_240 = mux(_decRes_T_13, UInt<5>("h8"), _decRes_T_239) @[Lookup.scala 34:39]
    node _decRes_T_241 = mux(_decRes_T_11, UInt<5>("h4"), _decRes_T_240) @[Lookup.scala 34:39]
    node _decRes_T_242 = mux(_decRes_T_9, UInt<5>("h3"), _decRes_T_241) @[Lookup.scala 34:39]
    node _decRes_T_243 = mux(_decRes_T_7, UInt<5>("h2"), _decRes_T_242) @[Lookup.scala 34:39]
    node _decRes_T_244 = mux(_decRes_T_5, UInt<5>("h7"), _decRes_T_243) @[Lookup.scala 34:39]
    node _decRes_T_245 = mux(_decRes_T_3, UInt<5>("h1"), _decRes_T_244) @[Lookup.scala 34:39]
    node decOpt = mux(_decRes_T_1, UInt<5>("h0"), _decRes_T_245) @[Lookup.scala 34:39]
    node _rs1Val_T = eq(rs1, UInt<1>("h0")) @[Id.scala 55:14]
    node _rs1Val_T_1 = eq(rs1, io.fwd.rf.wb.addr) @[Id.scala 56:14]
    node _rs1Val_T_2 = eq(rs1, io.fwd.rf.mem.addr) @[Id.scala 57:14]
    node _rs1Val_T_3 = eq(rs1, io.fwd.rf.ex.addr) @[Id.scala 58:14]
    node _rs1Val_T_4 = mux(_rs1Val_T_3, io.fwd.rf.ex.data, io.rf2Id.RegData1) @[Mux.scala 47:70]
    node _rs1Val_T_5 = mux(_rs1Val_T_2, io.fwd.rf.mem.data, _rs1Val_T_4) @[Mux.scala 47:70]
    node _rs1Val_T_6 = mux(_rs1Val_T_1, io.fwd.rf.wb.data, _rs1Val_T_5) @[Mux.scala 47:70]
    node rs1Val = mux(_rs1Val_T, UInt<1>("h0"), _rs1Val_T_6) @[Mux.scala 47:70]
    node _rs2Val_T = eq(rs2, UInt<1>("h0")) @[Id.scala 63:14]
    node _rs2Val_T_1 = eq(rs2, io.fwd.rf.wb.addr) @[Id.scala 64:14]
    node _rs2Val_T_2 = eq(rs2, io.fwd.rf.mem.addr) @[Id.scala 65:14]
    node _rs2Val_T_3 = eq(rs2, io.fwd.rf.ex.addr) @[Id.scala 66:14]
    node _rs2Val_T_4 = mux(_rs2Val_T_3, io.fwd.rf.ex.data, io.rf2Id.RegData2) @[Mux.scala 47:70]
    node _rs2Val_T_5 = mux(_rs2Val_T_2, io.fwd.rf.mem.data, _rs2Val_T_4) @[Mux.scala 47:70]
    node _rs2Val_T_6 = mux(_rs2Val_T_1, io.fwd.rf.wb.data, _rs2Val_T_5) @[Mux.scala 47:70]
    node rs2Val = mux(_rs2Val_T, UInt<1>("h0"), _rs2Val_T_6) @[Mux.scala 47:70]
    node _csrVal_T = eq(csrAddr, io.fwd.csr.wb.addr) @[Id.scala 71:18]
    node _csrVal_T_1 = eq(csrAddr, io.fwd.csr.mem.addr) @[Id.scala 72:18]
    node _csrVal_T_2 = eq(csrAddr, io.fwd.csr.ex.addr) @[Id.scala 73:18]
    node _csrVal_T_3 = mux(_csrVal_T_2, io.fwd.csr.ex.data, io.CSR_2_ID.data) @[Mux.scala 47:70]
    node _csrVal_T_4 = mux(_csrVal_T_1, io.fwd.csr.mem.data, _csrVal_T_3) @[Mux.scala 47:70]
    node csrVal = mux(_csrVal_T, io.fwd.csr.wb.data, _csrVal_T_4) @[Mux.scala 47:70]
    node csr_useImm = bits(funct3, 2, 2) @[Id.scala 78:29]
    node rsVal = mux(csr_useImm, uimm, rs1Val) @[Id.scala 79:26]
    node _csrNewVal_T = or(csrVal, rsVal) @[Id.scala 82:29]
    node _csrNewVal_T_1 = not(rsVal) @[Id.scala 83:31]
    node _csrNewVal_T_2 = and(csrVal, _csrNewVal_T_1) @[Id.scala 83:29]
    node _csrNewVal_T_3 = eq(UInt<3>("h1"), funct3) @[Mux.scala 81:61]
    node _csrNewVal_T_4 = mux(_csrNewVal_T_3, rs1Val, UInt<1>("h0")) @[Mux.scala 81:58]
    node _csrNewVal_T_5 = eq(UInt<3>("h2"), funct3) @[Mux.scala 81:61]
    node _csrNewVal_T_6 = mux(_csrNewVal_T_5, _csrNewVal_T, _csrNewVal_T_4) @[Mux.scala 81:58]
    node _csrNewVal_T_7 = eq(UInt<3>("h3"), funct3) @[Mux.scala 81:61]
    node csrNewVal = mux(_csrNewVal_T_7, _csrNewVal_T_2, _csrNewVal_T_6) @[Mux.scala 81:58]
    wire _io_decInfo_WIRE : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, InstType : UInt<3>, aluop : UInt<5>, branchOp : { taken : UInt<1>, target : UInt<64>}, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>}, writeCSROp : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}} @[Id.scala 86:40]
    _io_decInfo_WIRE.writeCSROp.data <= UInt<64>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.writeCSROp.addr <= UInt<12>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.writeCSROp.en <= UInt<1>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.loadOp.sign <= UInt<1>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.loadOp.Width <= UInt<2>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.loadOp.addr <= UInt<64>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.loadOp.isLoad <= UInt<1>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.storeOp.Width <= UInt<2>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.storeOp.data <= UInt<64>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.storeOp.addr <= UInt<64>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.storeOp.en <= UInt<1>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.branchOp.target <= UInt<64>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.branchOp.taken <= UInt<1>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.aluop <= UInt<5>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.InstType <= UInt<3>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.wreg <= UInt<1>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.rd <= UInt<5>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.oprand2 <= UInt<64>("h0") @[Id.scala 86:40]
    _io_decInfo_WIRE.oprand1 <= UInt<64>("h0") @[Id.scala 86:40]
    io.decInfo <= _io_decInfo_WIRE @[Id.scala 86:25]
    io.flush_req <= UInt<1>("h0") @[Id.scala 87:25]
    io.stall_req <= UInt<1>("h0") @[Id.scala 88:25]
    wire _io_ID_2_CSR_WIRE : { addr : UInt<12>, wdata : UInt<64>} @[Id.scala 89:40]
    _io_ID_2_CSR_WIRE.wdata <= UInt<64>("h0") @[Id.scala 89:40]
    _io_ID_2_CSR_WIRE.addr <= UInt<12>("h0") @[Id.scala 89:40]
    io.ID_2_CSR <= _io_ID_2_CSR_WIRE @[Id.scala 89:25]
    io.decInfo.aluop <= decOpt @[Id.scala 90:25]
    io.decInfo.InstType <= decRes_0 @[Id.scala 91:25]
    io.exception.pc <= io.pc @[Id.scala 94:25]
    io.exception.priv <= io.CSR_2_ID.priv @[Id.scala 95:25]
    io.exception.happen <= UInt<1>("h0") @[Id.scala 97:25]
    io.exception.int <= UInt<1>("h0") @[Id.scala 98:25]
    io.exception.cause <= UInt<1>("h0") @[Id.scala 99:25]
    io.exception.xtval <= UInt<1>("h0") @[Id.scala 100:25]
    io.exception.new_pc <= io.CSR_2_ID.xtvec @[Id.scala 102:25]
    node _T = bits(io.inst_i, 6, 0) @[Id.scala 104:14]
    node _T_1 = eq(_T, UInt<2>("h3")) @[Id.scala 104:20]
    when _T_1 : @[Id.scala 104:38]
      io.decInfo.loadOp.isLoad <= UInt<1>("h1") @[Id.scala 106:34]
      node _io_decInfo_loadOp_Width_T = eq(UInt<3>("h0"), funct3) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_Width_T_1 = mux(_io_decInfo_loadOp_Width_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
      node _io_decInfo_loadOp_Width_T_2 = eq(UInt<3>("h1"), funct3) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_Width_T_3 = mux(_io_decInfo_loadOp_Width_T_2, UInt<1>("h1"), _io_decInfo_loadOp_Width_T_1) @[Mux.scala 81:58]
      node _io_decInfo_loadOp_Width_T_4 = eq(UInt<3>("h2"), funct3) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_Width_T_5 = mux(_io_decInfo_loadOp_Width_T_4, UInt<2>("h2"), _io_decInfo_loadOp_Width_T_3) @[Mux.scala 81:58]
      node _io_decInfo_loadOp_Width_T_6 = eq(UInt<3>("h4"), funct3) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_Width_T_7 = mux(_io_decInfo_loadOp_Width_T_6, UInt<1>("h0"), _io_decInfo_loadOp_Width_T_5) @[Mux.scala 81:58]
      node _io_decInfo_loadOp_Width_T_8 = eq(UInt<3>("h5"), funct3) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_Width_T_9 = mux(_io_decInfo_loadOp_Width_T_8, UInt<1>("h1"), _io_decInfo_loadOp_Width_T_7) @[Mux.scala 81:58]
      node _io_decInfo_loadOp_Width_T_10 = eq(UInt<3>("h6"), funct3) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_Width_T_11 = mux(_io_decInfo_loadOp_Width_T_10, UInt<2>("h2"), _io_decInfo_loadOp_Width_T_9) @[Mux.scala 81:58]
      io.decInfo.loadOp.Width <= _io_decInfo_loadOp_Width_T_11 @[Id.scala 107:34]
      node _io_decInfo_loadOp_sign_T = eq(UInt<3>("h0"), funct3) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_sign_T_1 = mux(_io_decInfo_loadOp_sign_T, UInt<1>("h1"), UInt<1>("h0")) @[Mux.scala 81:58]
      node _io_decInfo_loadOp_sign_T_2 = eq(UInt<3>("h1"), funct3) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_sign_T_3 = mux(_io_decInfo_loadOp_sign_T_2, UInt<1>("h1"), _io_decInfo_loadOp_sign_T_1) @[Mux.scala 81:58]
      node _io_decInfo_loadOp_sign_T_4 = eq(UInt<3>("h2"), funct3) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_sign_T_5 = mux(_io_decInfo_loadOp_sign_T_4, UInt<1>("h1"), _io_decInfo_loadOp_sign_T_3) @[Mux.scala 81:58]
      node _io_decInfo_loadOp_sign_T_6 = eq(UInt<3>("h4"), funct3) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_sign_T_7 = mux(_io_decInfo_loadOp_sign_T_6, UInt<1>("h0"), _io_decInfo_loadOp_sign_T_5) @[Mux.scala 81:58]
      node _io_decInfo_loadOp_sign_T_8 = eq(UInt<3>("h5"), funct3) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_sign_T_9 = mux(_io_decInfo_loadOp_sign_T_8, UInt<1>("h0"), _io_decInfo_loadOp_sign_T_7) @[Mux.scala 81:58]
      node _io_decInfo_loadOp_sign_T_10 = eq(UInt<3>("h6"), funct3) @[Mux.scala 81:61]
      node _io_decInfo_loadOp_sign_T_11 = mux(_io_decInfo_loadOp_sign_T_10, UInt<1>("h0"), _io_decInfo_loadOp_sign_T_9) @[Mux.scala 81:58]
      io.decInfo.loadOp.sign <= _io_decInfo_loadOp_sign_T_11 @[Id.scala 111:34]
    when io.prev_is_load : @[Id.scala 119:26]
      node _T_2 = eq(io.prev_rd, rs1) @[Id.scala 120:25]
      node _T_3 = eq(io.prev_rd, rs2) @[Id.scala 120:46]
      node _T_4 = or(_T_2, _T_3) @[Id.scala 120:33]
      when _T_4 : @[Id.scala 120:54]
        io.stall_req <= UInt<1>("h1") @[Id.scala 121:29]
    node _T_5 = eq(UInt<4>("h0"), decRes_0) @[Id.scala 125:21]
    when _T_5 : @[Id.scala 125:21]
      node _io_exception_happen_T = eq(io.inst_i, UInt<1>("h0")) @[Id.scala 129:49]
      node _io_exception_happen_T_1 = mux(_io_exception_happen_T, UInt<1>("h0"), UInt<1>("h1")) @[Id.scala 129:43]
      io.exception.happen <= _io_exception_happen_T_1 @[Id.scala 129:37]
      io.exception.cause <= UInt<2>("h2") @[Id.scala 130:37]
      io.exception.xtval <= io.inst_i @[Id.scala 131:37]
    else :
      node _T_6 = eq(UInt<4>("h1"), decRes_0) @[Id.scala 125:21]
      when _T_6 : @[Id.scala 125:21]
        io.decInfo.oprand1 <= rs1Val @[Id.scala 134:37]
        io.decInfo.oprand2 <= rs2Val @[Id.scala 135:37]
        io.decInfo.wreg <= UInt<1>("h1") @[Id.scala 136:37]
        io.decInfo.rd <= rd @[Id.scala 137:37]
      else :
        node _T_7 = eq(UInt<4>("h2"), decRes_0) @[Id.scala 125:21]
        when _T_7 : @[Id.scala 125:21]
          io.decInfo.oprand1 <= rs1Val @[Id.scala 140:37]
          io.decInfo.oprand2 <= imm_I @[Id.scala 141:37]
          io.decInfo.wreg <= UInt<1>("h1") @[Id.scala 142:37]
          io.decInfo.rd <= rd @[Id.scala 143:37]
          node _T_8 = eq(decOpt, UInt<5>("ha")) @[Id.scala 145:39]
          when _T_8 : @[Id.scala 145:56]
            io.decInfo.oprand1 <= io.pc @[Id.scala 146:37]
            io.decInfo.oprand2 <= UInt<3>("h4") @[Id.scala 147:37]
            io.decInfo.branchOp.taken <= UInt<1>("h1") @[Id.scala 148:45]
            io.decInfo.branchOp.target <= jalr_target @[Id.scala 149:45]
            io.flush_req <= UInt<1>("h1") @[Id.scala 150:37]
        else :
          node _T_9 = eq(UInt<4>("h3"), decRes_0) @[Id.scala 125:21]
          when _T_9 : @[Id.scala 125:21]
            io.decInfo.oprand1 <= rs1Val @[Id.scala 154:38]
            io.decInfo.oprand2 <= imm_S @[Id.scala 155:38]
            io.decInfo.storeOp.data <= rs2Val @[Id.scala 157:38]
            io.decInfo.storeOp.en <= UInt<1>("h1") @[Id.scala 158:38]
            node _io_decInfo_storeOp_Width_T = eq(UInt<3>("h0"), funct3) @[Mux.scala 81:61]
            node _io_decInfo_storeOp_Width_T_1 = mux(_io_decInfo_storeOp_Width_T, UInt<1>("h0"), UInt<1>("h0")) @[Mux.scala 81:58]
            node _io_decInfo_storeOp_Width_T_2 = eq(UInt<3>("h1"), funct3) @[Mux.scala 81:61]
            node _io_decInfo_storeOp_Width_T_3 = mux(_io_decInfo_storeOp_Width_T_2, UInt<1>("h1"), _io_decInfo_storeOp_Width_T_1) @[Mux.scala 81:58]
            node _io_decInfo_storeOp_Width_T_4 = eq(UInt<3>("h2"), funct3) @[Mux.scala 81:61]
            node _io_decInfo_storeOp_Width_T_5 = mux(_io_decInfo_storeOp_Width_T_4, UInt<2>("h2"), _io_decInfo_storeOp_Width_T_3) @[Mux.scala 81:58]
            node _io_decInfo_storeOp_Width_T_6 = eq(UInt<3>("h3"), funct3) @[Mux.scala 81:61]
            node _io_decInfo_storeOp_Width_T_7 = mux(_io_decInfo_storeOp_Width_T_6, UInt<2>("h3"), _io_decInfo_storeOp_Width_T_5) @[Mux.scala 81:58]
            io.decInfo.storeOp.Width <= _io_decInfo_storeOp_Width_T_7 @[Id.scala 159:38]
          else :
            node _T_10 = eq(UInt<4>("h4"), decRes_0) @[Id.scala 125:21]
            when _T_10 : @[Id.scala 125:21]
              node _taken_T = eq(rs1Val, rs2Val) @[Id.scala 165:35]
              node _taken_T_1 = neq(rs1Val, rs2Val) @[Id.scala 166:35]
              node _taken_T_2 = asSInt(rs1Val) @[Id.scala 167:34]
              node _taken_T_3 = asSInt(rs2Val) @[Id.scala 167:51]
              node _taken_T_4 = lt(_taken_T_2, _taken_T_3) @[Id.scala 167:41]
              node _taken_T_5 = asSInt(rs1Val) @[Id.scala 168:34]
              node _taken_T_6 = asSInt(rs2Val) @[Id.scala 168:51]
              node _taken_T_7 = geq(_taken_T_5, _taken_T_6) @[Id.scala 168:41]
              node _taken_T_8 = lt(rs1Val, rs2Val) @[Id.scala 169:35]
              node _taken_T_9 = geq(rs1Val, rs2Val) @[Id.scala 170:35]
              node _taken_T_10 = eq(UInt<3>("h0"), funct3) @[Mux.scala 81:61]
              node _taken_T_11 = mux(_taken_T_10, _taken_T, UInt<1>("h0")) @[Mux.scala 81:58]
              node _taken_T_12 = eq(UInt<3>("h1"), funct3) @[Mux.scala 81:61]
              node _taken_T_13 = mux(_taken_T_12, _taken_T_1, _taken_T_11) @[Mux.scala 81:58]
              node _taken_T_14 = eq(UInt<3>("h4"), funct3) @[Mux.scala 81:61]
              node _taken_T_15 = mux(_taken_T_14, _taken_T_4, _taken_T_13) @[Mux.scala 81:58]
              node _taken_T_16 = eq(UInt<3>("h5"), funct3) @[Mux.scala 81:61]
              node _taken_T_17 = mux(_taken_T_16, _taken_T_7, _taken_T_15) @[Mux.scala 81:58]
              node _taken_T_18 = eq(UInt<3>("h6"), funct3) @[Mux.scala 81:61]
              node _taken_T_19 = mux(_taken_T_18, _taken_T_8, _taken_T_17) @[Mux.scala 81:58]
              node _taken_T_20 = eq(UInt<3>("h7"), funct3) @[Mux.scala 81:61]
              node taken = mux(_taken_T_20, _taken_T_9, _taken_T_19) @[Mux.scala 81:58]
              io.decInfo.branchOp.taken <= taken @[Id.scala 172:41]
              io.decInfo.branchOp.target <= branch_target @[Id.scala 173:41]
              node _io_flush_req_T = mux(taken, UInt<1>("h1"), UInt<1>("h0")) @[Id.scala 174:39]
              io.flush_req <= _io_flush_req_T @[Id.scala 174:33]
            else :
              node _T_11 = eq(UInt<4>("h6"), decRes_0) @[Id.scala 125:21]
              when _T_11 : @[Id.scala 125:21]
                io.decInfo.oprand1 <= io.pc @[Id.scala 177:41]
                io.decInfo.oprand2 <= UInt<3>("h4") @[Id.scala 178:41]
                io.decInfo.wreg <= UInt<1>("h1") @[Id.scala 179:41]
                io.decInfo.branchOp.taken <= UInt<1>("h1") @[Id.scala 180:41]
                io.decInfo.branchOp.target <= jal_target @[Id.scala 181:41]
                io.flush_req <= UInt<1>("h1") @[Id.scala 182:41]
              else :
                node _T_12 = eq(UInt<4>("h5"), decRes_0) @[Id.scala 125:21]
                when _T_12 : @[Id.scala 125:21]
                  node _io_decInfo_oprand1_T = bits(io.inst_i, 5, 5) @[Id.scala 185:45]
                  node _io_decInfo_oprand1_T_1 = mux(_io_decInfo_oprand1_T, UInt<1>("h0"), io.pc) @[Id.scala 185:40]
                  io.decInfo.oprand1 <= _io_decInfo_oprand1_T_1 @[Id.scala 185:33]
                  node _io_decInfo_oprand2_T = shl(imm_U, 12) @[Id.scala 186:43]
                  io.decInfo.oprand2 <= _io_decInfo_oprand2_T @[Id.scala 186:33]
                  io.decInfo.wreg <= UInt<1>("h1") @[Id.scala 187:33]
                  io.decInfo.rd <= rd @[Id.scala 188:33]
                else :
                  node _T_13 = eq(UInt<4>("h7"), decRes_0) @[Id.scala 125:21]
                  when _T_13 : @[Id.scala 125:21]
                    node _T_14 = orr(funct3) @[Id.scala 192:25]
                    when _T_14 : @[Id.scala 192:29]
                      node _io_decInfo_rd_T = mux(io.CSR_2_ID.legalRead, rd, UInt<1>("h0")) @[Id.scala 193:52]
                      io.decInfo.rd <= _io_decInfo_rd_T @[Id.scala 193:45]
                      io.decInfo.wreg <= UInt<1>("h1") @[Id.scala 194:45]
                      io.decInfo.oprand1 <= csrVal @[Id.scala 195:45]
                      io.decInfo.oprand2 <= UInt<1>("h0") @[Id.scala 196:45]
                      node _io_decInfo_writeCSROp_data_T = mux(io.CSR_2_ID.legalWrite, csrNewVal, UInt<1>("h0")) @[Id.scala 198:52]
                      io.decInfo.writeCSROp.data <= _io_decInfo_writeCSROp_data_T @[Id.scala 198:45]
                      node _io_decInfo_writeCSROp_addr_T = mux(io.CSR_2_ID.legalWrite, csrAddr, UInt<1>("h0")) @[Id.scala 199:52]
                      io.decInfo.writeCSROp.addr <= _io_decInfo_writeCSROp_addr_T @[Id.scala 199:45]
                      node _io_decInfo_writeCSROp_en_T = mux(io.CSR_2_ID.legalWrite, UInt<1>("h1"), UInt<1>("h0")) @[Id.scala 200:52]
                      io.decInfo.writeCSROp.en <= _io_decInfo_writeCSROp_en_T @[Id.scala 200:45]
                    else :
                      node inst_p2 = bits(io.inst_i, 21, 20) @[Id.scala 202:43]
                      node X = bits(io.inst_i, 29, 28) @[Id.scala 203:43]
                      io.exception.happen <= UInt<1>("h1") @[Id.scala 204:37]
                      node _T_15 = eq(UInt<2>("h2"), inst_p2) @[Id.scala 206:32]
                      when _T_15 : @[Id.scala 206:32]
                        node _cause_T = geq(io.CSR_2_ID.priv, X) @[Id.scala 208:53]
                        node cause = mux(_cause_T, UInt<5>("h10"), UInt<2>("h2")) @[Id.scala 208:47]
                        node new_pc_Sel = bits(cause, 4, 4) @[Id.scala 209:49]
                        io.exception.cause <= cause @[Id.scala 211:45]
                        node _io_exception_new_pc_T = mux(new_pc_Sel, io.CSR_2_ID.xepc, io.CSR_2_ID.xtvec) @[Id.scala 212:52]
                        io.exception.new_pc <= _io_exception_new_pc_T @[Id.scala 212:45]
    io.id2Rf.ReadIdx1 <= rs1 @[Id.scala 220:25]
    io.id2Rf.ReadIdx2 <= rs2 @[Id.scala 221:25]
    io.ID_2_CSR.addr <= csrAddr @[Id.scala 223:25]
    node _io_ID_2_CSR_wdata_T = eq(decRes_0, UInt<4>("h7")) @[Id.scala 224:42]
    node _io_ID_2_CSR_wdata_T_1 = mux(_io_ID_2_CSR_wdata_T, csrNewVal, UInt<1>("h0")) @[Id.scala 224:32]
    io.ID_2_CSR.wdata <= _io_ID_2_CSR_wdata_T_1 @[Id.scala 224:25]

  module Id_Ex :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip flush : UInt<1>, flip decInfo_i : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, InstType : UInt<3>, aluop : UInt<5>, branchOp : { taken : UInt<1>, target : UInt<64>}, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>}, writeCSROp : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}}, flip exception_i : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}, decInfo_o : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, InstType : UInt<3>, aluop : UInt<5>, branchOp : { taken : UInt<1>, target : UInt<64>}, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>}, writeCSROp : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}}, exception_o : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}}

    reg decInfo : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, InstType : UInt<3>, aluop : UInt<5>, branchOp : { taken : UInt<1>, target : UInt<64>}, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>}, writeCSROp : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}}, clock with :
      reset => (UInt<1>("h0"), decInfo) @[pipeline-registers.scala 41:32]
    decInfo.writeCSROp.data <= io.decInfo_i.writeCSROp.data @[pipeline-registers.scala 41:32]
    decInfo.writeCSROp.addr <= io.decInfo_i.writeCSROp.addr @[pipeline-registers.scala 41:32]
    decInfo.writeCSROp.en <= io.decInfo_i.writeCSROp.en @[pipeline-registers.scala 41:32]
    decInfo.loadOp.sign <= io.decInfo_i.loadOp.sign @[pipeline-registers.scala 41:32]
    decInfo.loadOp.Width <= io.decInfo_i.loadOp.Width @[pipeline-registers.scala 41:32]
    decInfo.loadOp.addr <= io.decInfo_i.loadOp.addr @[pipeline-registers.scala 41:32]
    decInfo.loadOp.isLoad <= io.decInfo_i.loadOp.isLoad @[pipeline-registers.scala 41:32]
    decInfo.storeOp.Width <= io.decInfo_i.storeOp.Width @[pipeline-registers.scala 41:32]
    decInfo.storeOp.data <= io.decInfo_i.storeOp.data @[pipeline-registers.scala 41:32]
    decInfo.storeOp.addr <= io.decInfo_i.storeOp.addr @[pipeline-registers.scala 41:32]
    decInfo.storeOp.en <= io.decInfo_i.storeOp.en @[pipeline-registers.scala 41:32]
    decInfo.branchOp.target <= io.decInfo_i.branchOp.target @[pipeline-registers.scala 41:32]
    decInfo.branchOp.taken <= io.decInfo_i.branchOp.taken @[pipeline-registers.scala 41:32]
    decInfo.aluop <= io.decInfo_i.aluop @[pipeline-registers.scala 41:32]
    decInfo.InstType <= io.decInfo_i.InstType @[pipeline-registers.scala 41:32]
    decInfo.wreg <= io.decInfo_i.wreg @[pipeline-registers.scala 41:32]
    decInfo.rd <= io.decInfo_i.rd @[pipeline-registers.scala 41:32]
    decInfo.oprand2 <= io.decInfo_i.oprand2 @[pipeline-registers.scala 41:32]
    decInfo.oprand1 <= io.decInfo_i.oprand1 @[pipeline-registers.scala 41:32]
    reg exception : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}, clock with :
      reset => (UInt<1>("h0"), exception) @[pipeline-registers.scala 42:32]
    exception.new_pc <= io.exception_i.new_pc @[pipeline-registers.scala 42:32]
    exception.happen <= io.exception_i.happen @[pipeline-registers.scala 42:32]
    exception.priv <= io.exception_i.priv @[pipeline-registers.scala 42:32]
    exception.xtval <= io.exception_i.xtval @[pipeline-registers.scala 42:32]
    exception.pc <= io.exception_i.pc @[pipeline-registers.scala 42:32]
    exception.int <= io.exception_i.int @[pipeline-registers.scala 42:32]
    exception.cause <= io.exception_i.cause @[pipeline-registers.scala 42:32]
    node _T = asUInt(reset) @[pipeline-registers.scala 43:16]
    node _T_1 = or(_T, io.flush) @[pipeline-registers.scala 43:23]
    when _T_1 : @[pipeline-registers.scala 43:34]
      wire _decInfo_WIRE : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, InstType : UInt<3>, aluop : UInt<5>, branchOp : { taken : UInt<1>, target : UInt<64>}, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>}, writeCSROp : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}} @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.writeCSROp.data <= UInt<64>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.writeCSROp.addr <= UInt<12>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.writeCSROp.en <= UInt<1>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.loadOp.sign <= UInt<1>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.loadOp.Width <= UInt<2>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.loadOp.addr <= UInt<64>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.loadOp.isLoad <= UInt<1>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.storeOp.Width <= UInt<2>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.storeOp.data <= UInt<64>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.storeOp.addr <= UInt<64>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.storeOp.en <= UInt<1>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.branchOp.target <= UInt<64>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.branchOp.taken <= UInt<1>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.aluop <= UInt<5>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.InstType <= UInt<3>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.wreg <= UInt<1>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.rd <= UInt<5>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.oprand2 <= UInt<64>("h0") @[pipeline-registers.scala 44:39]
      _decInfo_WIRE.oprand1 <= UInt<64>("h0") @[pipeline-registers.scala 44:39]
      decInfo.writeCSROp.data <= _decInfo_WIRE.writeCSROp.data @[pipeline-registers.scala 44:24]
      decInfo.writeCSROp.addr <= _decInfo_WIRE.writeCSROp.addr @[pipeline-registers.scala 44:24]
      decInfo.writeCSROp.en <= _decInfo_WIRE.writeCSROp.en @[pipeline-registers.scala 44:24]
      decInfo.loadOp.sign <= _decInfo_WIRE.loadOp.sign @[pipeline-registers.scala 44:24]
      decInfo.loadOp.Width <= _decInfo_WIRE.loadOp.Width @[pipeline-registers.scala 44:24]
      decInfo.loadOp.addr <= _decInfo_WIRE.loadOp.addr @[pipeline-registers.scala 44:24]
      decInfo.loadOp.isLoad <= _decInfo_WIRE.loadOp.isLoad @[pipeline-registers.scala 44:24]
      decInfo.storeOp.Width <= _decInfo_WIRE.storeOp.Width @[pipeline-registers.scala 44:24]
      decInfo.storeOp.data <= _decInfo_WIRE.storeOp.data @[pipeline-registers.scala 44:24]
      decInfo.storeOp.addr <= _decInfo_WIRE.storeOp.addr @[pipeline-registers.scala 44:24]
      decInfo.storeOp.en <= _decInfo_WIRE.storeOp.en @[pipeline-registers.scala 44:24]
      decInfo.branchOp.target <= _decInfo_WIRE.branchOp.target @[pipeline-registers.scala 44:24]
      decInfo.branchOp.taken <= _decInfo_WIRE.branchOp.taken @[pipeline-registers.scala 44:24]
      decInfo.aluop <= _decInfo_WIRE.aluop @[pipeline-registers.scala 44:24]
      decInfo.InstType <= _decInfo_WIRE.InstType @[pipeline-registers.scala 44:24]
      decInfo.wreg <= _decInfo_WIRE.wreg @[pipeline-registers.scala 44:24]
      decInfo.rd <= _decInfo_WIRE.rd @[pipeline-registers.scala 44:24]
      decInfo.oprand2 <= _decInfo_WIRE.oprand2 @[pipeline-registers.scala 44:24]
      decInfo.oprand1 <= _decInfo_WIRE.oprand1 @[pipeline-registers.scala 44:24]
      wire _exception_WIRE : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>} @[pipeline-registers.scala 45:39]
      _exception_WIRE.new_pc <= UInt<64>("h0") @[pipeline-registers.scala 45:39]
      _exception_WIRE.happen <= UInt<1>("h0") @[pipeline-registers.scala 45:39]
      _exception_WIRE.priv <= UInt<2>("h0") @[pipeline-registers.scala 45:39]
      _exception_WIRE.xtval <= UInt<64>("h0") @[pipeline-registers.scala 45:39]
      _exception_WIRE.pc <= UInt<64>("h0") @[pipeline-registers.scala 45:39]
      _exception_WIRE.int <= UInt<1>("h0") @[pipeline-registers.scala 45:39]
      _exception_WIRE.cause <= UInt<5>("h0") @[pipeline-registers.scala 45:39]
      exception.new_pc <= _exception_WIRE.new_pc @[pipeline-registers.scala 45:24]
      exception.happen <= _exception_WIRE.happen @[pipeline-registers.scala 45:24]
      exception.priv <= _exception_WIRE.priv @[pipeline-registers.scala 45:24]
      exception.xtval <= _exception_WIRE.xtval @[pipeline-registers.scala 45:24]
      exception.pc <= _exception_WIRE.pc @[pipeline-registers.scala 45:24]
      exception.int <= _exception_WIRE.int @[pipeline-registers.scala 45:24]
      exception.cause <= _exception_WIRE.cause @[pipeline-registers.scala 45:24]
    else :
      when io.stall : @[pipeline-registers.scala 46:25]
        decInfo.writeCSROp.data <= decInfo.writeCSROp.data @[pipeline-registers.scala 47:24]
        decInfo.writeCSROp.addr <= decInfo.writeCSROp.addr @[pipeline-registers.scala 47:24]
        decInfo.writeCSROp.en <= decInfo.writeCSROp.en @[pipeline-registers.scala 47:24]
        decInfo.loadOp.sign <= decInfo.loadOp.sign @[pipeline-registers.scala 47:24]
        decInfo.loadOp.Width <= decInfo.loadOp.Width @[pipeline-registers.scala 47:24]
        decInfo.loadOp.addr <= decInfo.loadOp.addr @[pipeline-registers.scala 47:24]
        decInfo.loadOp.isLoad <= decInfo.loadOp.isLoad @[pipeline-registers.scala 47:24]
        decInfo.storeOp.Width <= decInfo.storeOp.Width @[pipeline-registers.scala 47:24]
        decInfo.storeOp.data <= decInfo.storeOp.data @[pipeline-registers.scala 47:24]
        decInfo.storeOp.addr <= decInfo.storeOp.addr @[pipeline-registers.scala 47:24]
        decInfo.storeOp.en <= decInfo.storeOp.en @[pipeline-registers.scala 47:24]
        decInfo.branchOp.target <= decInfo.branchOp.target @[pipeline-registers.scala 47:24]
        decInfo.branchOp.taken <= decInfo.branchOp.taken @[pipeline-registers.scala 47:24]
        decInfo.aluop <= decInfo.aluop @[pipeline-registers.scala 47:24]
        decInfo.InstType <= decInfo.InstType @[pipeline-registers.scala 47:24]
        decInfo.wreg <= decInfo.wreg @[pipeline-registers.scala 47:24]
        decInfo.rd <= decInfo.rd @[pipeline-registers.scala 47:24]
        decInfo.oprand2 <= decInfo.oprand2 @[pipeline-registers.scala 47:24]
        decInfo.oprand1 <= decInfo.oprand1 @[pipeline-registers.scala 47:24]
        exception.new_pc <= exception.new_pc @[pipeline-registers.scala 48:24]
        exception.happen <= exception.happen @[pipeline-registers.scala 48:24]
        exception.priv <= exception.priv @[pipeline-registers.scala 48:24]
        exception.xtval <= exception.xtval @[pipeline-registers.scala 48:24]
        exception.pc <= exception.pc @[pipeline-registers.scala 48:24]
        exception.int <= exception.int @[pipeline-registers.scala 48:24]
        exception.cause <= exception.cause @[pipeline-registers.scala 48:24]
    io.decInfo_o <= decInfo @[pipeline-registers.scala 50:24]
    io.exception_o <= exception @[pipeline-registers.scala 51:24]

  module Ex :
    output io : { flip decInfo : { oprand1 : UInt<64>, oprand2 : UInt<64>, rd : UInt<5>, wreg : UInt<1>, InstType : UInt<3>, aluop : UInt<5>, branchOp : { taken : UInt<1>, target : UInt<64>}, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>}, writeCSROp : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}}, flip divRes : { quo : UInt<64>, rem : UInt<64>, err : UInt<1>, finish : UInt<1>}, flip exception_i : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}, rf_fwd : { addr : UInt<5>, data : UInt<64>}, csr_fwd : { addr : UInt<12>, data : UInt<64>}, writeRfOp : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, writeCSROp : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}, loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>}, storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, divOP : { start : UInt<1>, a : UInt<64>, b : UInt<64>, sign : UInt<1>}, stall_req : UInt<1>, exception_o : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}}

    io.storeOp <= io.decInfo.storeOp @[Ex.scala 28:17]
    node _aluRes_T = add(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 30:37]
    node _aluRes_T_1 = tail(_aluRes_T, 1) @[Ex.scala 30:37]
    node _aluRes_T_2 = add(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 31:20]
    node _aluRes_T_3 = tail(_aluRes_T_2, 1) @[Ex.scala 31:20]
    node _aluRes_T_4 = sub(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 32:20]
    node _aluRes_T_5 = tail(_aluRes_T_4, 1) @[Ex.scala 32:20]
    node _aluRes_T_6 = asSInt(io.decInfo.oprand1) @[Ex.scala 33:23]
    node _aluRes_T_7 = asSInt(io.decInfo.oprand2) @[Ex.scala 33:34]
    node _aluRes_T_8 = lt(_aluRes_T_6, _aluRes_T_7) @[Ex.scala 33:30]
    node _aluRes_T_9 = mux(_aluRes_T_8, UInt<1>("h1"), UInt<1>("h0")) @[Ex.scala 33:20]
    node _aluRes_T_10 = lt(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 34:23]
    node _aluRes_T_11 = mux(_aluRes_T_10, UInt<1>("h1"), UInt<1>("h0")) @[Ex.scala 34:20]
    node _aluRes_T_12 = mul(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 35:20]
    node _aluRes_T_13 = bits(_aluRes_T_12, 63, 0) @[Ex.scala 35:24]
    node _aluRes_T_14 = mul(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 36:20]
    node _aluRes_T_15 = bits(_aluRes_T_14, 127, 64) @[Ex.scala 36:24]
    node _aluRes_T_16 = xor(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 37:20]
    node _aluRes_T_17 = or(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 38:20]
    node _aluRes_T_18 = and(io.decInfo.oprand1, io.decInfo.oprand2) @[Ex.scala 39:20]
    node _aluRes_T_19 = bits(io.decInfo.oprand2, 5, 0) @[Ex.scala 40:24]
    node _aluRes_T_20 = dshl(io.decInfo.oprand1, _aluRes_T_19) @[Ex.scala 40:20]
    node _aluRes_T_21 = bits(io.decInfo.oprand2, 5, 0) @[Ex.scala 41:24]
    node _aluRes_T_22 = dshr(io.decInfo.oprand1, _aluRes_T_21) @[Ex.scala 41:20]
    node _aluRes_T_23 = asSInt(io.decInfo.oprand1) @[Ex.scala 42:20]
    node _aluRes_T_24 = bits(io.decInfo.oprand2, 5, 0) @[Ex.scala 42:31]
    node _aluRes_T_25 = dshr(_aluRes_T_23, _aluRes_T_24) @[Ex.scala 42:27]
    node _aluRes_T_26 = asUInt(_aluRes_T_25) @[Ex.scala 42:38]
    node _aluRes_T_27 = bits(io.decInfo.oprand1, 31, 0) @[Ex.scala 44:34]
    node _aluRes_T_28 = bits(io.decInfo.oprand2, 31, 0) @[Ex.scala 44:44]
    node _aluRes_T_29 = add(_aluRes_T_27, _aluRes_T_28) @[Ex.scala 44:41]
    node _aluRes_T_30 = tail(_aluRes_T_29, 1) @[Ex.scala 44:41]
    node _aluRes_T_31 = asSInt(_aluRes_T_30) @[helpers.scala 14:47]
    node _aluRes_T_32 = pad(_aluRes_T_31, 64) @[helpers.scala 14:57]
    node _aluRes_T_33 = asUInt(_aluRes_T_32) @[helpers.scala 14:62]
    node _aluRes_T_34 = bits(io.decInfo.oprand1, 31, 0) @[Ex.scala 45:34]
    node _aluRes_T_35 = bits(io.decInfo.oprand2, 31, 0) @[Ex.scala 45:44]
    node _aluRes_T_36 = sub(_aluRes_T_34, _aluRes_T_35) @[Ex.scala 45:41]
    node _aluRes_T_37 = tail(_aluRes_T_36, 1) @[Ex.scala 45:41]
    node _aluRes_T_38 = asSInt(_aluRes_T_37) @[helpers.scala 14:47]
    node _aluRes_T_39 = pad(_aluRes_T_38, 64) @[helpers.scala 14:57]
    node _aluRes_T_40 = asUInt(_aluRes_T_39) @[helpers.scala 14:62]
    node _aluRes_T_41 = bits(io.decInfo.oprand1, 31, 0) @[Ex.scala 46:34]
    node _aluRes_T_42 = bits(io.decInfo.oprand2, 31, 0) @[Ex.scala 46:44]
    node _aluRes_T_43 = bits(_aluRes_T_42, 31, 0) @[Ex.scala 46:50]
    node _aluRes_T_44 = mul(_aluRes_T_41, _aluRes_T_43) @[Ex.scala 46:41]
    node _aluRes_T_45 = asSInt(_aluRes_T_44) @[helpers.scala 14:47]
    node _aluRes_T_46 = asUInt(_aluRes_T_45) @[helpers.scala 14:62]
    node _aluRes_T_47 = bits(io.decInfo.oprand2, 4, 0) @[Ex.scala 47:40]
    node _aluRes_T_48 = dshl(io.decInfo.oprand1, _aluRes_T_47) @[Ex.scala 47:36]
    node _aluRes_T_49 = bits(_aluRes_T_48, 31, 0) @[Ex.scala 47:46]
    node _aluRes_T_50 = asSInt(_aluRes_T_49) @[helpers.scala 14:47]
    node _aluRes_T_51 = pad(_aluRes_T_50, 64) @[helpers.scala 14:57]
    node _aluRes_T_52 = asUInt(_aluRes_T_51) @[helpers.scala 14:62]
    node _aluRes_T_53 = bits(io.decInfo.oprand2, 4, 0) @[Ex.scala 48:40]
    node _aluRes_T_54 = dshl(io.decInfo.oprand1, _aluRes_T_53) @[Ex.scala 48:36]
    node _aluRes_T_55 = bits(_aluRes_T_54, 31, 0) @[Ex.scala 48:46]
    node _aluRes_T_56 = asSInt(_aluRes_T_55) @[helpers.scala 14:47]
    node _aluRes_T_57 = pad(_aluRes_T_56, 64) @[helpers.scala 14:57]
    node _aluRes_T_58 = asUInt(_aluRes_T_57) @[helpers.scala 14:62]
    node _aluRes_T_59 = bits(io.decInfo.oprand1, 31, 0) @[Ex.scala 49:35]
    node _aluRes_T_60 = asSInt(_aluRes_T_59) @[Ex.scala 49:42]
    node _aluRes_T_61 = bits(io.decInfo.oprand2, 4, 0) @[Ex.scala 49:53]
    node _aluRes_T_62 = dshr(_aluRes_T_60, _aluRes_T_61) @[Ex.scala 49:49]
    node _aluRes_T_63 = asUInt(_aluRes_T_62) @[Ex.scala 49:60]
    node _aluRes_T_64 = asSInt(_aluRes_T_63) @[helpers.scala 14:47]
    node _aluRes_T_65 = pad(_aluRes_T_64, 64) @[helpers.scala 14:57]
    node _aluRes_T_66 = asUInt(_aluRes_T_65) @[helpers.scala 14:62]
    node _aluRes_T_67 = eq(UInt<5>("h0"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_68 = mux(_aluRes_T_67, _aluRes_T_3, _aluRes_T_1) @[Mux.scala 81:58]
    node _aluRes_T_69 = eq(UInt<5>("h1"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_70 = mux(_aluRes_T_69, _aluRes_T_5, _aluRes_T_68) @[Mux.scala 81:58]
    node _aluRes_T_71 = eq(UInt<5>("h2"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_72 = mux(_aluRes_T_71, _aluRes_T_9, _aluRes_T_70) @[Mux.scala 81:58]
    node _aluRes_T_73 = eq(UInt<5>("h3"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_74 = mux(_aluRes_T_73, _aluRes_T_11, _aluRes_T_72) @[Mux.scala 81:58]
    node _aluRes_T_75 = eq(UInt<5>("hb"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_76 = mux(_aluRes_T_75, _aluRes_T_13, _aluRes_T_74) @[Mux.scala 81:58]
    node _aluRes_T_77 = eq(UInt<5>("hc"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_78 = mux(_aluRes_T_77, _aluRes_T_15, _aluRes_T_76) @[Mux.scala 81:58]
    node _aluRes_T_79 = eq(UInt<5>("h4"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_80 = mux(_aluRes_T_79, _aluRes_T_16, _aluRes_T_78) @[Mux.scala 81:58]
    node _aluRes_T_81 = eq(UInt<5>("h5"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_82 = mux(_aluRes_T_81, _aluRes_T_17, _aluRes_T_80) @[Mux.scala 81:58]
    node _aluRes_T_83 = eq(UInt<5>("h6"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_84 = mux(_aluRes_T_83, _aluRes_T_18, _aluRes_T_82) @[Mux.scala 81:58]
    node _aluRes_T_85 = eq(UInt<5>("h7"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_86 = mux(_aluRes_T_85, _aluRes_T_20, _aluRes_T_84) @[Mux.scala 81:58]
    node _aluRes_T_87 = eq(UInt<5>("h8"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_88 = mux(_aluRes_T_87, _aluRes_T_22, _aluRes_T_86) @[Mux.scala 81:58]
    node _aluRes_T_89 = eq(UInt<5>("h9"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_90 = mux(_aluRes_T_89, _aluRes_T_26, _aluRes_T_88) @[Mux.scala 81:58]
    node _aluRes_T_91 = eq(UInt<5>("h10"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_92 = mux(_aluRes_T_91, _aluRes_T_33, _aluRes_T_90) @[Mux.scala 81:58]
    node _aluRes_T_93 = eq(UInt<5>("h11"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_94 = mux(_aluRes_T_93, _aluRes_T_40, _aluRes_T_92) @[Mux.scala 81:58]
    node _aluRes_T_95 = eq(UInt<5>("hf"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_96 = mux(_aluRes_T_95, _aluRes_T_46, _aluRes_T_94) @[Mux.scala 81:58]
    node _aluRes_T_97 = eq(UInt<5>("h12"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_98 = mux(_aluRes_T_97, _aluRes_T_52, _aluRes_T_96) @[Mux.scala 81:58]
    node _aluRes_T_99 = eq(UInt<5>("h13"), io.decInfo.aluop) @[Mux.scala 81:61]
    node _aluRes_T_100 = mux(_aluRes_T_99, _aluRes_T_58, _aluRes_T_98) @[Mux.scala 81:58]
    node _aluRes_T_101 = eq(UInt<5>("h14"), io.decInfo.aluop) @[Mux.scala 81:61]
    node aluRes = mux(_aluRes_T_101, _aluRes_T_66, _aluRes_T_100) @[Mux.scala 81:58]
    io.stall_req <= UInt<1>("h0") @[Ex.scala 56:21]
    node _isDiv_T = eq(io.decInfo.aluop, UInt<5>("h1a")) @[Ex.scala 57:27]
    node _isDiv_T_1 = eq(io.decInfo.aluop, UInt<5>("h1b")) @[Ex.scala 57:45]
    node _isDiv_T_2 = or(_isDiv_T, _isDiv_T_1) @[Ex.scala 57:36]
    node _isDiv_T_3 = eq(io.decInfo.aluop, UInt<5>("h1c")) @[Ex.scala 57:64]
    node _isDiv_T_4 = or(_isDiv_T_2, _isDiv_T_3) @[Ex.scala 57:55]
    node _isDiv_T_5 = eq(io.decInfo.aluop, UInt<5>("h1d")) @[Ex.scala 57:82]
    node isDiv = or(_isDiv_T_4, _isDiv_T_5) @[Ex.scala 57:73]
    wire divRes : UInt<64> @[Ex.scala 58:23]
    divRes <= UInt<1>("h0") @[Ex.scala 58:45]
    wire _io_divOP_WIRE : { start : UInt<1>, a : UInt<64>, b : UInt<64>, sign : UInt<1>} @[Ex.scala 59:31]
    _io_divOP_WIRE.sign <= UInt<1>("h0") @[Ex.scala 59:31]
    _io_divOP_WIRE.b <= UInt<64>("h0") @[Ex.scala 59:31]
    _io_divOP_WIRE.a <= UInt<64>("h0") @[Ex.scala 59:31]
    _io_divOP_WIRE.start <= UInt<1>("h0") @[Ex.scala 59:31]
    io.divOP <= _io_divOP_WIRE @[Ex.scala 59:16]
    when isDiv : @[Ex.scala 60:16]
      node _io_divOP_start_T = mux(io.divRes.finish, UInt<1>("h0"), UInt<1>("h1")) @[Ex.scala 61:33]
      io.divOP.start <= _io_divOP_start_T @[Ex.scala 61:27]
      io.divOP.a <= io.decInfo.oprand1 @[Ex.scala 62:27]
      io.divOP.b <= io.decInfo.oprand2 @[Ex.scala 63:27]
      node _T = eq(io.decInfo.aluop, UInt<5>("h1a")) @[Ex.scala 64:20]
      when _T : @[Ex.scala 64:28]
        io.divOP.sign <= UInt<1>("h1") @[Ex.scala 65:29]
      else :
        io.divOP.sign <= UInt<1>("h0") @[Ex.scala 67:29]
      io.stall_req <= UInt<1>("h1") @[Ex.scala 69:27]
      when io.divRes.finish : @[Ex.scala 70:31]
        node _divRes_T = eq(UInt<5>("h1a"), io.decInfo.aluop) @[Mux.scala 81:61]
        node _divRes_T_1 = mux(_divRes_T, io.divRes.quo, UInt<1>("h0")) @[Mux.scala 81:58]
        node _divRes_T_2 = eq(UInt<5>("h1b"), io.decInfo.aluop) @[Mux.scala 81:61]
        node _divRes_T_3 = mux(_divRes_T_2, io.divRes.quo, _divRes_T_1) @[Mux.scala 81:58]
        node _divRes_T_4 = eq(UInt<5>("h1c"), io.decInfo.aluop) @[Mux.scala 81:61]
        node _divRes_T_5 = mux(_divRes_T_4, io.divRes.rem, _divRes_T_3) @[Mux.scala 81:58]
        node _divRes_T_6 = eq(UInt<5>("h1d"), io.decInfo.aluop) @[Mux.scala 81:61]
        node _divRes_T_7 = mux(_divRes_T_6, io.divRes.rem, _divRes_T_5) @[Mux.scala 81:58]
        divRes <= _divRes_T_7 @[Ex.scala 71:21]
        io.stall_req <= UInt<1>("h0") @[Ex.scala 77:29]
    wire _io_writeRfOp_WIRE : { en : UInt<1>, data : UInt<64>, addr : UInt<5>} @[Ex.scala 81:36]
    _io_writeRfOp_WIRE.addr <= UInt<5>("h0") @[Ex.scala 81:36]
    _io_writeRfOp_WIRE.data <= UInt<64>("h0") @[Ex.scala 81:36]
    _io_writeRfOp_WIRE.en <= UInt<1>("h0") @[Ex.scala 81:36]
    io.writeRfOp <= _io_writeRfOp_WIRE @[Ex.scala 81:21]
    node _T_1 = eq(UInt<4>("h1"), io.decInfo.InstType) @[Ex.scala 82:32]
    when _T_1 : @[Ex.scala 82:32]
      node _io_writeRfOp_data_T = mux(isDiv, divRes, aluRes) @[Ex.scala 84:38]
      io.writeRfOp.data <= _io_writeRfOp_data_T @[Ex.scala 84:32]
      io.writeRfOp.en <= UInt<1>("h1") @[Ex.scala 85:32]
      io.writeRfOp.addr <= io.decInfo.rd @[Ex.scala 86:32]
    else :
      node _T_2 = eq(UInt<4>("h2"), io.decInfo.InstType) @[Ex.scala 82:32]
      when _T_2 : @[Ex.scala 82:32]
        io.writeRfOp.data <= aluRes @[Ex.scala 89:32]
        io.writeRfOp.en <= UInt<1>("h1") @[Ex.scala 90:32]
        io.writeRfOp.addr <= io.decInfo.rd @[Ex.scala 91:32]
      else :
        node _T_3 = eq(UInt<4>("h3"), io.decInfo.InstType) @[Ex.scala 82:32]
        when _T_3 : @[Ex.scala 82:32]
          io.storeOp.addr <= aluRes @[Ex.scala 95:32]
        else :
          node _T_4 = eq(UInt<4>("h6"), io.decInfo.InstType) @[Ex.scala 82:32]
          when _T_4 : @[Ex.scala 82:32]
            io.writeRfOp.data <= aluRes @[Ex.scala 99:32]
            io.writeRfOp.en <= UInt<1>("h1") @[Ex.scala 100:32]
            io.writeRfOp.addr <= io.decInfo.rd @[Ex.scala 101:32]
          else :
            node _T_5 = eq(UInt<4>("h7"), io.decInfo.InstType) @[Ex.scala 82:32]
            when _T_5 : @[Ex.scala 82:32]
              when io.writeCSROp.en : @[Ex.scala 104:35]
                io.writeRfOp.data <= aluRes @[Ex.scala 105:36]
                io.writeRfOp.en <= UInt<1>("h1") @[Ex.scala 106:36]
                io.writeRfOp.addr <= io.decInfo.rd @[Ex.scala 107:36]
    io.writeCSROp <= io.decInfo.writeCSROp @[Ex.scala 113:22]
    io.loadOp.addr <= aluRes @[Ex.scala 115:22]
    io.loadOp.isLoad <= io.decInfo.loadOp.isLoad @[Ex.scala 116:22]
    io.loadOp.Width <= io.decInfo.loadOp.Width @[Ex.scala 117:22]
    io.loadOp.sign <= io.decInfo.loadOp.sign @[Ex.scala 118:22]
    io.rf_fwd.data <= aluRes @[Ex.scala 121:22]
    io.rf_fwd.addr <= io.decInfo.rd @[Ex.scala 122:22]
    io.csr_fwd.data <= io.writeCSROp.data @[Ex.scala 124:22]
    io.csr_fwd.addr <= io.writeCSROp.addr @[Ex.scala 125:22]
    io.exception_o <= io.exception_i @[Ex.scala 127:22]

  module Ex_Mem :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip flush : UInt<1>, flip loadOp_i : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>}, flip storeOp_i : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, flip writeRfOp_i : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, flip writeCSROp_i : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}, flip exception_i : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}, loadOp_o : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>}, storeOp_o : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, writeRfOp_o : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, writeCSROp_o : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}, exception_o : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}}

    reg writeRfOp : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, clock with :
      reset => (UInt<1>("h0"), writeRfOp) @[pipeline-registers.scala 72:33]
    writeRfOp.addr <= io.writeRfOp_i.addr @[pipeline-registers.scala 72:33]
    writeRfOp.data <= io.writeRfOp_i.data @[pipeline-registers.scala 72:33]
    writeRfOp.en <= io.writeRfOp_i.en @[pipeline-registers.scala 72:33]
    reg loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>}, clock with :
      reset => (UInt<1>("h0"), loadOp) @[pipeline-registers.scala 73:33]
    loadOp.sign <= io.loadOp_i.sign @[pipeline-registers.scala 73:33]
    loadOp.Width <= io.loadOp_i.Width @[pipeline-registers.scala 73:33]
    loadOp.addr <= io.loadOp_i.addr @[pipeline-registers.scala 73:33]
    loadOp.isLoad <= io.loadOp_i.isLoad @[pipeline-registers.scala 73:33]
    reg storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, clock with :
      reset => (UInt<1>("h0"), storeOp) @[pipeline-registers.scala 74:33]
    storeOp.Width <= io.storeOp_i.Width @[pipeline-registers.scala 74:33]
    storeOp.data <= io.storeOp_i.data @[pipeline-registers.scala 74:33]
    storeOp.addr <= io.storeOp_i.addr @[pipeline-registers.scala 74:33]
    storeOp.en <= io.storeOp_i.en @[pipeline-registers.scala 74:33]
    reg writeCSROp : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}, clock with :
      reset => (UInt<1>("h0"), writeCSROp) @[pipeline-registers.scala 75:33]
    writeCSROp.data <= io.writeCSROp_i.data @[pipeline-registers.scala 75:33]
    writeCSROp.addr <= io.writeCSROp_i.addr @[pipeline-registers.scala 75:33]
    writeCSROp.en <= io.writeCSROp_i.en @[pipeline-registers.scala 75:33]
    reg exception : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}, clock with :
      reset => (UInt<1>("h0"), exception) @[pipeline-registers.scala 76:33]
    exception.new_pc <= io.exception_i.new_pc @[pipeline-registers.scala 76:33]
    exception.happen <= io.exception_i.happen @[pipeline-registers.scala 76:33]
    exception.priv <= io.exception_i.priv @[pipeline-registers.scala 76:33]
    exception.xtval <= io.exception_i.xtval @[pipeline-registers.scala 76:33]
    exception.pc <= io.exception_i.pc @[pipeline-registers.scala 76:33]
    exception.int <= io.exception_i.int @[pipeline-registers.scala 76:33]
    exception.cause <= io.exception_i.cause @[pipeline-registers.scala 76:33]
    node _T = asUInt(reset) @[pipeline-registers.scala 78:16]
    node _T_1 = or(_T, io.flush) @[pipeline-registers.scala 78:23]
    when _T_1 : @[pipeline-registers.scala 78:34]
      wire _writeRfOp_WIRE : { en : UInt<1>, data : UInt<64>, addr : UInt<5>} @[pipeline-registers.scala 79:37]
      _writeRfOp_WIRE.addr <= UInt<5>("h0") @[pipeline-registers.scala 79:37]
      _writeRfOp_WIRE.data <= UInt<64>("h0") @[pipeline-registers.scala 79:37]
      _writeRfOp_WIRE.en <= UInt<1>("h0") @[pipeline-registers.scala 79:37]
      writeRfOp.addr <= _writeRfOp_WIRE.addr @[pipeline-registers.scala 79:22]
      writeRfOp.data <= _writeRfOp_WIRE.data @[pipeline-registers.scala 79:22]
      writeRfOp.en <= _writeRfOp_WIRE.en @[pipeline-registers.scala 79:22]
      wire _loadOp_WIRE : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>} @[pipeline-registers.scala 80:37]
      _loadOp_WIRE.sign <= UInt<1>("h0") @[pipeline-registers.scala 80:37]
      _loadOp_WIRE.Width <= UInt<2>("h0") @[pipeline-registers.scala 80:37]
      _loadOp_WIRE.addr <= UInt<64>("h0") @[pipeline-registers.scala 80:37]
      _loadOp_WIRE.isLoad <= UInt<1>("h0") @[pipeline-registers.scala 80:37]
      loadOp.sign <= _loadOp_WIRE.sign @[pipeline-registers.scala 80:22]
      loadOp.Width <= _loadOp_WIRE.Width @[pipeline-registers.scala 80:22]
      loadOp.addr <= _loadOp_WIRE.addr @[pipeline-registers.scala 80:22]
      loadOp.isLoad <= _loadOp_WIRE.isLoad @[pipeline-registers.scala 80:22]
      wire _storeOp_WIRE : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>} @[pipeline-registers.scala 81:37]
      _storeOp_WIRE.Width <= UInt<2>("h0") @[pipeline-registers.scala 81:37]
      _storeOp_WIRE.data <= UInt<64>("h0") @[pipeline-registers.scala 81:37]
      _storeOp_WIRE.addr <= UInt<64>("h0") @[pipeline-registers.scala 81:37]
      _storeOp_WIRE.en <= UInt<1>("h0") @[pipeline-registers.scala 81:37]
      storeOp.Width <= _storeOp_WIRE.Width @[pipeline-registers.scala 81:22]
      storeOp.data <= _storeOp_WIRE.data @[pipeline-registers.scala 81:22]
      storeOp.addr <= _storeOp_WIRE.addr @[pipeline-registers.scala 81:22]
      storeOp.en <= _storeOp_WIRE.en @[pipeline-registers.scala 81:22]
      wire _writeCSROp_WIRE : { en : UInt<1>, addr : UInt<12>, data : UInt<64>} @[pipeline-registers.scala 82:37]
      _writeCSROp_WIRE.data <= UInt<64>("h0") @[pipeline-registers.scala 82:37]
      _writeCSROp_WIRE.addr <= UInt<12>("h0") @[pipeline-registers.scala 82:37]
      _writeCSROp_WIRE.en <= UInt<1>("h0") @[pipeline-registers.scala 82:37]
      writeCSROp.data <= _writeCSROp_WIRE.data @[pipeline-registers.scala 82:22]
      writeCSROp.addr <= _writeCSROp_WIRE.addr @[pipeline-registers.scala 82:22]
      writeCSROp.en <= _writeCSROp_WIRE.en @[pipeline-registers.scala 82:22]
      wire _exception_WIRE : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>} @[pipeline-registers.scala 83:37]
      _exception_WIRE.new_pc <= UInt<64>("h0") @[pipeline-registers.scala 83:37]
      _exception_WIRE.happen <= UInt<1>("h0") @[pipeline-registers.scala 83:37]
      _exception_WIRE.priv <= UInt<2>("h0") @[pipeline-registers.scala 83:37]
      _exception_WIRE.xtval <= UInt<64>("h0") @[pipeline-registers.scala 83:37]
      _exception_WIRE.pc <= UInt<64>("h0") @[pipeline-registers.scala 83:37]
      _exception_WIRE.int <= UInt<1>("h0") @[pipeline-registers.scala 83:37]
      _exception_WIRE.cause <= UInt<5>("h0") @[pipeline-registers.scala 83:37]
      exception.new_pc <= _exception_WIRE.new_pc @[pipeline-registers.scala 83:22]
      exception.happen <= _exception_WIRE.happen @[pipeline-registers.scala 83:22]
      exception.priv <= _exception_WIRE.priv @[pipeline-registers.scala 83:22]
      exception.xtval <= _exception_WIRE.xtval @[pipeline-registers.scala 83:22]
      exception.pc <= _exception_WIRE.pc @[pipeline-registers.scala 83:22]
      exception.int <= _exception_WIRE.int @[pipeline-registers.scala 83:22]
      exception.cause <= _exception_WIRE.cause @[pipeline-registers.scala 83:22]
    else :
      when io.stall : @[pipeline-registers.scala 84:25]
        writeRfOp.addr <= writeRfOp.addr @[pipeline-registers.scala 85:23]
        writeRfOp.data <= writeRfOp.data @[pipeline-registers.scala 85:23]
        writeRfOp.en <= writeRfOp.en @[pipeline-registers.scala 85:23]
        loadOp.sign <= loadOp.sign @[pipeline-registers.scala 86:23]
        loadOp.Width <= loadOp.Width @[pipeline-registers.scala 86:23]
        loadOp.addr <= loadOp.addr @[pipeline-registers.scala 86:23]
        loadOp.isLoad <= loadOp.isLoad @[pipeline-registers.scala 86:23]
        storeOp.Width <= storeOp.Width @[pipeline-registers.scala 87:23]
        storeOp.data <= storeOp.data @[pipeline-registers.scala 87:23]
        storeOp.addr <= storeOp.addr @[pipeline-registers.scala 87:23]
        storeOp.en <= storeOp.en @[pipeline-registers.scala 87:23]
        writeCSROp.data <= writeCSROp.data @[pipeline-registers.scala 88:23]
        writeCSROp.addr <= writeCSROp.addr @[pipeline-registers.scala 88:23]
        writeCSROp.en <= writeCSROp.en @[pipeline-registers.scala 88:23]
        exception.new_pc <= exception.new_pc @[pipeline-registers.scala 89:22]
        exception.happen <= exception.happen @[pipeline-registers.scala 89:22]
        exception.priv <= exception.priv @[pipeline-registers.scala 89:22]
        exception.xtval <= exception.xtval @[pipeline-registers.scala 89:22]
        exception.pc <= exception.pc @[pipeline-registers.scala 89:22]
        exception.int <= exception.int @[pipeline-registers.scala 89:22]
        exception.cause <= exception.cause @[pipeline-registers.scala 89:22]
    io.writeRfOp_o <= writeRfOp @[pipeline-registers.scala 91:23]
    io.loadOp_o <= loadOp @[pipeline-registers.scala 92:23]
    io.storeOp_o <= storeOp @[pipeline-registers.scala 93:23]
    io.writeCSROp_o <= writeCSROp @[pipeline-registers.scala 94:23]
    io.exception_o <= exception @[pipeline-registers.scala 95:23]

  module MEM :
    input clock : Clock
    input reset : Reset
    output io : { flip writeRfOp_i : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, flip writeCSROp_i : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}, flip loadOp : { isLoad : UInt<1>, addr : UInt<64>, Width : UInt<2>, sign : UInt<1>}, flip storeOp : { en : UInt<1>, addr : UInt<64>, data : UInt<64>, Width : UInt<2>}, flip exception_i : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}, rf_fwd : { addr : UInt<5>, data : UInt<64>}, csr_fwd : { addr : UInt<12>, data : UInt<64>}, writeRfOp_o : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, writeCSROp_o : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}, exception_o : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}}

    cmem ram : UInt<8> [1024] @[Mem.scala 30:24]
    node _LoadIsLegal_T = bits(io.loadOp.addr, 0, 0) @[Mem.scala 11:26]
    node _LoadIsLegal_T_1 = not(_LoadIsLegal_T) @[Mem.scala 11:21]
    node _LoadIsLegal_T_2 = bits(io.loadOp.addr, 0, 0) @[Mem.scala 12:27]
    node _LoadIsLegal_T_3 = not(_LoadIsLegal_T_2) @[Mem.scala 12:22]
    node _LoadIsLegal_T_4 = bits(io.loadOp.addr, 1, 1) @[Mem.scala 12:38]
    node _LoadIsLegal_T_5 = not(_LoadIsLegal_T_4) @[Mem.scala 12:33]
    node _LoadIsLegal_T_6 = and(_LoadIsLegal_T_3, _LoadIsLegal_T_5) @[Mem.scala 12:31]
    node _LoadIsLegal_T_7 = bits(io.loadOp.addr, 0, 0) @[Mem.scala 13:27]
    node _LoadIsLegal_T_8 = not(_LoadIsLegal_T_7) @[Mem.scala 13:22]
    node _LoadIsLegal_T_9 = bits(io.loadOp.addr, 1, 1) @[Mem.scala 13:38]
    node _LoadIsLegal_T_10 = not(_LoadIsLegal_T_9) @[Mem.scala 13:33]
    node _LoadIsLegal_T_11 = and(_LoadIsLegal_T_8, _LoadIsLegal_T_10) @[Mem.scala 13:31]
    node _LoadIsLegal_T_12 = bits(io.loadOp.addr, 2, 2) @[Mem.scala 13:49]
    node _LoadIsLegal_T_13 = not(_LoadIsLegal_T_12) @[Mem.scala 13:44]
    node _LoadIsLegal_T_14 = and(_LoadIsLegal_T_11, _LoadIsLegal_T_13) @[Mem.scala 13:42]
    node _LoadIsLegal_T_15 = eq(UInt<1>("h1"), io.loadOp.Width) @[Mux.scala 81:61]
    node _LoadIsLegal_T_16 = mux(_LoadIsLegal_T_15, _LoadIsLegal_T_1, UInt<1>("h1")) @[Mux.scala 81:58]
    node _LoadIsLegal_T_17 = eq(UInt<2>("h2"), io.loadOp.Width) @[Mux.scala 81:61]
    node _LoadIsLegal_T_18 = mux(_LoadIsLegal_T_17, _LoadIsLegal_T_6, _LoadIsLegal_T_16) @[Mux.scala 81:58]
    node _LoadIsLegal_T_19 = eq(UInt<2>("h3"), io.loadOp.Width) @[Mux.scala 81:61]
    node LoadIsLegal = mux(_LoadIsLegal_T_19, _LoadIsLegal_T_14, _LoadIsLegal_T_18) @[Mux.scala 81:58]
    node _BYTE_T = bits(io.loadOp.addr, 9, 0) @[Mem.scala 38:26]
    infer mport BYTE = ram[_BYTE_T], clock @[Mem.scala 38:26]
    node _HALFWORD_T = bits(io.loadOp.addr, 9, 0) @[Mem.scala 39:30]
    infer mport HALFWORD_MPORT = ram[_HALFWORD_T], clock @[Mem.scala 39:30]
    node _HALFWORD_T_1 = add(io.loadOp.addr, UInt<1>("h1")) @[Mem.scala 39:49]
    node _HALFWORD_T_2 = tail(_HALFWORD_T_1, 1) @[Mem.scala 39:49]
    node _HALFWORD_T_3 = bits(_HALFWORD_T_2, 9, 0) @[Mem.scala 39:42]
    infer mport HALFWORD_MPORT_1 = ram[_HALFWORD_T_3], clock @[Mem.scala 39:42]
    node HALFWORD = cat(HALFWORD_MPORT, HALFWORD_MPORT_1) @[Cat.scala 31:58]
    node _WORD_T = bits(io.loadOp.addr, 9, 0) @[Mem.scala 40:30]
    infer mport WORD_MPORT = ram[_WORD_T], clock @[Mem.scala 40:30]
    node _WORD_T_1 = add(io.loadOp.addr, UInt<1>("h1")) @[Mem.scala 40:49]
    node _WORD_T_2 = tail(_WORD_T_1, 1) @[Mem.scala 40:49]
    node _WORD_T_3 = bits(_WORD_T_2, 9, 0) @[Mem.scala 40:42]
    infer mport WORD_MPORT_1 = ram[_WORD_T_3], clock @[Mem.scala 40:42]
    node _WORD_T_4 = add(io.loadOp.addr, UInt<2>("h2")) @[Mem.scala 40:66]
    node _WORD_T_5 = tail(_WORD_T_4, 1) @[Mem.scala 40:66]
    node _WORD_T_6 = bits(_WORD_T_5, 9, 0) @[Mem.scala 40:59]
    infer mport WORD_MPORT_2 = ram[_WORD_T_6], clock @[Mem.scala 40:59]
    node _WORD_T_7 = add(io.loadOp.addr, UInt<2>("h3")) @[Mem.scala 40:84]
    node _WORD_T_8 = tail(_WORD_T_7, 1) @[Mem.scala 40:84]
    node _WORD_T_9 = bits(_WORD_T_8, 9, 0) @[Mem.scala 40:77]
    infer mport WORD_MPORT_3 = ram[_WORD_T_9], clock @[Mem.scala 40:77]
    node WORD_lo = cat(WORD_MPORT_2, WORD_MPORT_3) @[Cat.scala 31:58]
    node WORD_hi = cat(WORD_MPORT, WORD_MPORT_1) @[Cat.scala 31:58]
    node WORD = cat(WORD_hi, WORD_lo) @[Cat.scala 31:58]
    node _DWORD_T = bits(io.loadOp.addr, 9, 0) @[Mem.scala 41:30]
    infer mport DWORD_MPORT = ram[_DWORD_T], clock @[Mem.scala 41:30]
    node _DWORD_T_1 = add(io.loadOp.addr, UInt<1>("h1")) @[Mem.scala 41:49]
    node _DWORD_T_2 = tail(_DWORD_T_1, 1) @[Mem.scala 41:49]
    node _DWORD_T_3 = bits(_DWORD_T_2, 9, 0) @[Mem.scala 41:42]
    infer mport DWORD_MPORT_1 = ram[_DWORD_T_3], clock @[Mem.scala 41:42]
    node _DWORD_T_4 = add(io.loadOp.addr, UInt<2>("h2")) @[Mem.scala 41:66]
    node _DWORD_T_5 = tail(_DWORD_T_4, 1) @[Mem.scala 41:66]
    node _DWORD_T_6 = bits(_DWORD_T_5, 9, 0) @[Mem.scala 41:59]
    infer mport DWORD_MPORT_2 = ram[_DWORD_T_6], clock @[Mem.scala 41:59]
    node _DWORD_T_7 = add(io.loadOp.addr, UInt<2>("h3")) @[Mem.scala 41:84]
    node _DWORD_T_8 = tail(_DWORD_T_7, 1) @[Mem.scala 41:84]
    node _DWORD_T_9 = bits(_DWORD_T_8, 9, 0) @[Mem.scala 41:77]
    infer mport DWORD_MPORT_3 = ram[_DWORD_T_9], clock @[Mem.scala 41:77]
    node _DWORD_T_10 = add(io.loadOp.addr, UInt<3>("h4")) @[Mem.scala 41:100]
    node _DWORD_T_11 = tail(_DWORD_T_10, 1) @[Mem.scala 41:100]
    node _DWORD_T_12 = bits(_DWORD_T_11, 9, 0) @[Mem.scala 41:94]
    infer mport DWORD_MPORT_4 = ram[_DWORD_T_12], clock @[Mem.scala 41:94]
    node _DWORD_T_13 = add(io.loadOp.addr, UInt<3>("h5")) @[Mem.scala 41:117]
    node _DWORD_T_14 = tail(_DWORD_T_13, 1) @[Mem.scala 41:117]
    node _DWORD_T_15 = bits(_DWORD_T_14, 9, 0) @[Mem.scala 41:110]
    infer mport DWORD_MPORT_5 = ram[_DWORD_T_15], clock @[Mem.scala 41:110]
    node _DWORD_T_16 = add(io.loadOp.addr, UInt<3>("h6")) @[Mem.scala 41:134]
    node _DWORD_T_17 = tail(_DWORD_T_16, 1) @[Mem.scala 41:134]
    node _DWORD_T_18 = bits(_DWORD_T_17, 9, 0) @[Mem.scala 41:127]
    infer mport DWORD_MPORT_6 = ram[_DWORD_T_18], clock @[Mem.scala 41:127]
    node _DWORD_T_19 = add(io.loadOp.addr, UInt<3>("h7")) @[Mem.scala 41:152]
    node _DWORD_T_20 = tail(_DWORD_T_19, 1) @[Mem.scala 41:152]
    node _DWORD_T_21 = bits(_DWORD_T_20, 9, 0) @[Mem.scala 41:145]
    infer mport DWORD_MPORT_7 = ram[_DWORD_T_21], clock @[Mem.scala 41:145]
    node DWORD_lo_lo = cat(DWORD_MPORT_6, DWORD_MPORT_7) @[Cat.scala 31:58]
    node DWORD_lo_hi = cat(DWORD_MPORT_4, DWORD_MPORT_5) @[Cat.scala 31:58]
    node DWORD_lo = cat(DWORD_lo_hi, DWORD_lo_lo) @[Cat.scala 31:58]
    node DWORD_hi_lo = cat(DWORD_MPORT_2, DWORD_MPORT_3) @[Cat.scala 31:58]
    node DWORD_hi_hi = cat(DWORD_MPORT, DWORD_MPORT_1) @[Cat.scala 31:58]
    node DWORD_hi = cat(DWORD_hi_hi, DWORD_hi_lo) @[Cat.scala 31:58]
    node DWORD = cat(DWORD_hi, DWORD_lo) @[Cat.scala 31:58]
    node _loadVal_T = asSInt(BYTE) @[helpers.scala 14:47]
    node _loadVal_T_1 = pad(_loadVal_T, 64) @[helpers.scala 14:57]
    node _loadVal_T_2 = asUInt(_loadVal_T_1) @[helpers.scala 14:62]
    node _loadVal_T_3 = mux(io.loadOp.sign, _loadVal_T_2, BYTE) @[Mem.scala 44:20]
    node _loadVal_T_4 = asSInt(HALFWORD) @[helpers.scala 14:47]
    node _loadVal_T_5 = pad(_loadVal_T_4, 64) @[helpers.scala 14:57]
    node _loadVal_T_6 = asUInt(_loadVal_T_5) @[helpers.scala 14:62]
    node _loadVal_T_7 = mux(io.loadOp.sign, _loadVal_T_6, HALFWORD) @[Mem.scala 45:20]
    node _loadVal_T_8 = asSInt(WORD) @[helpers.scala 14:47]
    node _loadVal_T_9 = pad(_loadVal_T_8, 64) @[helpers.scala 14:57]
    node _loadVal_T_10 = asUInt(_loadVal_T_9) @[helpers.scala 14:62]
    node _loadVal_T_11 = mux(io.loadOp.sign, _loadVal_T_10, WORD) @[Mem.scala 46:20]
    node _loadVal_T_12 = eq(UInt<1>("h1"), io.loadOp.Width) @[Mux.scala 81:61]
    node _loadVal_T_13 = mux(_loadVal_T_12, _loadVal_T_7, _loadVal_T_3) @[Mux.scala 81:58]
    node _loadVal_T_14 = eq(UInt<2>("h2"), io.loadOp.Width) @[Mux.scala 81:61]
    node _loadVal_T_15 = mux(_loadVal_T_14, _loadVal_T_11, _loadVal_T_13) @[Mux.scala 81:58]
    node _loadVal_T_16 = eq(UInt<2>("h3"), io.loadOp.Width) @[Mux.scala 81:61]
    node loadVal = mux(_loadVal_T_16, DWORD, _loadVal_T_15) @[Mux.scala 81:58]
    node ldata = mux(LoadIsLegal, loadVal, UInt<1>("h0")) @[Mem.scala 50:22]
    node _StoreIsLegal_T = bits(io.storeOp.addr, 0, 0) @[Mem.scala 11:26]
    node _StoreIsLegal_T_1 = not(_StoreIsLegal_T) @[Mem.scala 11:21]
    node _StoreIsLegal_T_2 = bits(io.storeOp.addr, 0, 0) @[Mem.scala 12:27]
    node _StoreIsLegal_T_3 = not(_StoreIsLegal_T_2) @[Mem.scala 12:22]
    node _StoreIsLegal_T_4 = bits(io.storeOp.addr, 1, 1) @[Mem.scala 12:38]
    node _StoreIsLegal_T_5 = not(_StoreIsLegal_T_4) @[Mem.scala 12:33]
    node _StoreIsLegal_T_6 = and(_StoreIsLegal_T_3, _StoreIsLegal_T_5) @[Mem.scala 12:31]
    node _StoreIsLegal_T_7 = bits(io.storeOp.addr, 0, 0) @[Mem.scala 13:27]
    node _StoreIsLegal_T_8 = not(_StoreIsLegal_T_7) @[Mem.scala 13:22]
    node _StoreIsLegal_T_9 = bits(io.storeOp.addr, 1, 1) @[Mem.scala 13:38]
    node _StoreIsLegal_T_10 = not(_StoreIsLegal_T_9) @[Mem.scala 13:33]
    node _StoreIsLegal_T_11 = and(_StoreIsLegal_T_8, _StoreIsLegal_T_10) @[Mem.scala 13:31]
    node _StoreIsLegal_T_12 = bits(io.storeOp.addr, 2, 2) @[Mem.scala 13:49]
    node _StoreIsLegal_T_13 = not(_StoreIsLegal_T_12) @[Mem.scala 13:44]
    node _StoreIsLegal_T_14 = and(_StoreIsLegal_T_11, _StoreIsLegal_T_13) @[Mem.scala 13:42]
    node _StoreIsLegal_T_15 = eq(UInt<1>("h1"), io.storeOp.Width) @[Mux.scala 81:61]
    node _StoreIsLegal_T_16 = mux(_StoreIsLegal_T_15, _StoreIsLegal_T_1, UInt<1>("h1")) @[Mux.scala 81:58]
    node _StoreIsLegal_T_17 = eq(UInt<2>("h2"), io.storeOp.Width) @[Mux.scala 81:61]
    node _StoreIsLegal_T_18 = mux(_StoreIsLegal_T_17, _StoreIsLegal_T_6, _StoreIsLegal_T_16) @[Mux.scala 81:58]
    node _StoreIsLegal_T_19 = eq(UInt<2>("h3"), io.storeOp.Width) @[Mux.scala 81:61]
    node StoreIsLegal = mux(_StoreIsLegal_T_19, _StoreIsLegal_T_14, _StoreIsLegal_T_18) @[Mux.scala 81:58]
    node _T = and(io.storeOp.en, StoreIsLegal) @[Mem.scala 57:24]
    when _T : @[Mem.scala 57:39]
      node _T_1 = eq(UInt<1>("h0"), io.storeOp.Width) @[Mem.scala 58:33]
      when _T_1 : @[Mem.scala 58:33]
        node _T_2 = bits(io.storeOp.addr, 9, 0) @[Mem.scala 60:20]
        infer mport MPORT = ram[_T_2], clock @[Mem.scala 60:20]
        node _T_3 = bits(io.storeOp.data, 7, 0) @[Mem.scala 60:40]
        MPORT <= _T_3 @[Mem.scala 60:33]
      else :
        node _T_4 = eq(UInt<1>("h1"), io.storeOp.Width) @[Mem.scala 58:33]
        when _T_4 : @[Mem.scala 58:33]
          node _T_5 = bits(io.storeOp.addr, 9, 0) @[Mem.scala 63:20]
          infer mport MPORT_1 = ram[_T_5], clock @[Mem.scala 63:20]
          node _T_6 = bits(io.storeOp.data, 7, 0) @[Mem.scala 63:40]
          MPORT_1 <= _T_6 @[Mem.scala 63:33]
          node _T_7 = add(io.storeOp.addr, UInt<1>("h1")) @[Mem.scala 64:26]
          node _T_8 = tail(_T_7, 1) @[Mem.scala 64:26]
          node _T_9 = bits(_T_8, 9, 0) @[Mem.scala 64:20]
          infer mport MPORT_2 = ram[_T_9], clock @[Mem.scala 64:20]
          node _T_10 = bits(io.storeOp.data, 15, 8) @[Mem.scala 64:40]
          MPORT_2 <= _T_10 @[Mem.scala 64:33]
        else :
          node _T_11 = eq(UInt<2>("h2"), io.storeOp.Width) @[Mem.scala 58:33]
          when _T_11 : @[Mem.scala 58:33]
            node _T_12 = bits(io.storeOp.addr, 9, 0) @[Mem.scala 67:20]
            infer mport MPORT_3 = ram[_T_12], clock @[Mem.scala 67:20]
            node _T_13 = bits(io.storeOp.data, 7, 0) @[Mem.scala 67:40]
            MPORT_3 <= _T_13 @[Mem.scala 67:33]
            node _T_14 = add(io.storeOp.addr, UInt<1>("h1")) @[Mem.scala 68:26]
            node _T_15 = tail(_T_14, 1) @[Mem.scala 68:26]
            node _T_16 = bits(_T_15, 9, 0) @[Mem.scala 68:20]
            infer mport MPORT_4 = ram[_T_16], clock @[Mem.scala 68:20]
            node _T_17 = bits(io.storeOp.data, 15, 8) @[Mem.scala 68:40]
            MPORT_4 <= _T_17 @[Mem.scala 68:33]
            node _T_18 = add(io.storeOp.addr, UInt<2>("h2")) @[Mem.scala 69:26]
            node _T_19 = tail(_T_18, 1) @[Mem.scala 69:26]
            node _T_20 = bits(_T_19, 9, 0) @[Mem.scala 69:20]
            infer mport MPORT_5 = ram[_T_20], clock @[Mem.scala 69:20]
            node _T_21 = bits(io.storeOp.data, 23, 16) @[Mem.scala 69:40]
            MPORT_5 <= _T_21 @[Mem.scala 69:33]
            node _T_22 = add(io.storeOp.addr, UInt<2>("h3")) @[Mem.scala 70:26]
            node _T_23 = tail(_T_22, 1) @[Mem.scala 70:26]
            node _T_24 = bits(_T_23, 9, 0) @[Mem.scala 70:20]
            infer mport MPORT_6 = ram[_T_24], clock @[Mem.scala 70:20]
            node _T_25 = bits(io.storeOp.data, 31, 24) @[Mem.scala 70:40]
            MPORT_6 <= _T_25 @[Mem.scala 70:33]
    node _io_writeRfOp_o_data_T = mux(io.loadOp.isLoad, ldata, io.writeRfOp_i.data) @[Mem.scala 75:33]
    io.writeRfOp_o.data <= _io_writeRfOp_o_data_T @[Mem.scala 75:27]
    io.writeRfOp_o.en <= io.writeRfOp_i.en @[Mem.scala 76:27]
    io.writeRfOp_o.addr <= io.writeRfOp_i.addr @[Mem.scala 77:27]
    io.writeCSROp_o <= io.writeCSROp_i @[Mem.scala 79:27]
    io.rf_fwd.addr <= io.writeRfOp_i.addr @[Mem.scala 81:20]
    node _io_rf_fwd_data_T = mux(io.loadOp.isLoad, loadVal, io.writeRfOp_i.data) @[Mem.scala 82:26]
    io.rf_fwd.data <= _io_rf_fwd_data_T @[Mem.scala 82:20]
    io.csr_fwd.data <= io.writeCSROp_o.data @[Mem.scala 84:22]
    io.csr_fwd.addr <= io.writeCSROp_o.addr @[Mem.scala 85:22]
    io.exception_o <= io.exception_i @[Mem.scala 87:22]

  module Mem_Wb :
    input clock : Clock
    input reset : Reset
    output io : { flip stall : UInt<1>, flip flush : UInt<1>, flip writeRfOp_i : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, flip writeCSROp_i : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}, flip exception_i : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}, writeRfOp_o : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, writeCSROp_o : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}, exception_o : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}}

    reg writeRfOp : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, clock with :
      reset => (UInt<1>("h0"), writeRfOp) @[pipeline-registers.scala 111:30]
    writeRfOp.addr <= io.writeRfOp_i.addr @[pipeline-registers.scala 111:30]
    writeRfOp.data <= io.writeRfOp_i.data @[pipeline-registers.scala 111:30]
    writeRfOp.en <= io.writeRfOp_i.en @[pipeline-registers.scala 111:30]
    reg writeCSROp : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}, clock with :
      reset => (UInt<1>("h0"), writeCSROp) @[pipeline-registers.scala 112:30]
    writeCSROp.data <= io.writeCSROp_i.data @[pipeline-registers.scala 112:30]
    writeCSROp.addr <= io.writeCSROp_i.addr @[pipeline-registers.scala 112:30]
    writeCSROp.en <= io.writeCSROp_i.en @[pipeline-registers.scala 112:30]
    reg exception : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}, clock with :
      reset => (UInt<1>("h0"), exception) @[pipeline-registers.scala 113:30]
    exception.new_pc <= io.exception_i.new_pc @[pipeline-registers.scala 113:30]
    exception.happen <= io.exception_i.happen @[pipeline-registers.scala 113:30]
    exception.priv <= io.exception_i.priv @[pipeline-registers.scala 113:30]
    exception.xtval <= io.exception_i.xtval @[pipeline-registers.scala 113:30]
    exception.pc <= io.exception_i.pc @[pipeline-registers.scala 113:30]
    exception.int <= io.exception_i.int @[pipeline-registers.scala 113:30]
    exception.cause <= io.exception_i.cause @[pipeline-registers.scala 113:30]
    node _T = asUInt(reset) @[pipeline-registers.scala 115:16]
    node _T_1 = or(_T, io.flush) @[pipeline-registers.scala 115:23]
    when _T_1 : @[pipeline-registers.scala 115:34]
      wire _writeRfOp_WIRE : { en : UInt<1>, data : UInt<64>, addr : UInt<5>} @[pipeline-registers.scala 116:36]
      _writeRfOp_WIRE.addr <= UInt<5>("h0") @[pipeline-registers.scala 116:36]
      _writeRfOp_WIRE.data <= UInt<64>("h0") @[pipeline-registers.scala 116:36]
      _writeRfOp_WIRE.en <= UInt<1>("h0") @[pipeline-registers.scala 116:36]
      writeRfOp.addr <= _writeRfOp_WIRE.addr @[pipeline-registers.scala 116:21]
      writeRfOp.data <= _writeRfOp_WIRE.data @[pipeline-registers.scala 116:21]
      writeRfOp.en <= _writeRfOp_WIRE.en @[pipeline-registers.scala 116:21]
      wire _writeCSROp_WIRE : { en : UInt<1>, addr : UInt<12>, data : UInt<64>} @[pipeline-registers.scala 117:36]
      _writeCSROp_WIRE.data <= UInt<64>("h0") @[pipeline-registers.scala 117:36]
      _writeCSROp_WIRE.addr <= UInt<12>("h0") @[pipeline-registers.scala 117:36]
      _writeCSROp_WIRE.en <= UInt<1>("h0") @[pipeline-registers.scala 117:36]
      writeCSROp.data <= _writeCSROp_WIRE.data @[pipeline-registers.scala 117:21]
      writeCSROp.addr <= _writeCSROp_WIRE.addr @[pipeline-registers.scala 117:21]
      writeCSROp.en <= _writeCSROp_WIRE.en @[pipeline-registers.scala 117:21]
      wire _exception_WIRE : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>} @[pipeline-registers.scala 118:36]
      _exception_WIRE.new_pc <= UInt<64>("h0") @[pipeline-registers.scala 118:36]
      _exception_WIRE.happen <= UInt<1>("h0") @[pipeline-registers.scala 118:36]
      _exception_WIRE.priv <= UInt<2>("h0") @[pipeline-registers.scala 118:36]
      _exception_WIRE.xtval <= UInt<64>("h0") @[pipeline-registers.scala 118:36]
      _exception_WIRE.pc <= UInt<64>("h0") @[pipeline-registers.scala 118:36]
      _exception_WIRE.int <= UInt<1>("h0") @[pipeline-registers.scala 118:36]
      _exception_WIRE.cause <= UInt<5>("h0") @[pipeline-registers.scala 118:36]
      exception.new_pc <= _exception_WIRE.new_pc @[pipeline-registers.scala 118:21]
      exception.happen <= _exception_WIRE.happen @[pipeline-registers.scala 118:21]
      exception.priv <= _exception_WIRE.priv @[pipeline-registers.scala 118:21]
      exception.xtval <= _exception_WIRE.xtval @[pipeline-registers.scala 118:21]
      exception.pc <= _exception_WIRE.pc @[pipeline-registers.scala 118:21]
      exception.int <= _exception_WIRE.int @[pipeline-registers.scala 118:21]
      exception.cause <= _exception_WIRE.cause @[pipeline-registers.scala 118:21]
    else :
      when io.stall : @[pipeline-registers.scala 119:25]
        writeRfOp.addr <= writeRfOp.addr @[pipeline-registers.scala 120:21]
        writeRfOp.data <= writeRfOp.data @[pipeline-registers.scala 120:21]
        writeRfOp.en <= writeRfOp.en @[pipeline-registers.scala 120:21]
        writeCSROp.data <= writeCSROp.data @[pipeline-registers.scala 121:21]
        writeCSROp.addr <= writeCSROp.addr @[pipeline-registers.scala 121:21]
        writeCSROp.en <= writeCSROp.en @[pipeline-registers.scala 121:21]
        exception.new_pc <= exception.new_pc @[pipeline-registers.scala 122:21]
        exception.happen <= exception.happen @[pipeline-registers.scala 122:21]
        exception.priv <= exception.priv @[pipeline-registers.scala 122:21]
        exception.xtval <= exception.xtval @[pipeline-registers.scala 122:21]
        exception.pc <= exception.pc @[pipeline-registers.scala 122:21]
        exception.int <= exception.int @[pipeline-registers.scala 122:21]
        exception.cause <= exception.cause @[pipeline-registers.scala 122:21]
    io.writeRfOp_o <= writeRfOp @[pipeline-registers.scala 124:21]
    io.writeCSROp_o <= writeCSROp @[pipeline-registers.scala 125:21]
    io.exception_o <= exception @[pipeline-registers.scala 126:21]

  module Wb :
    output io : { flip writeRfOp_i : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, flip writeCSROp_i : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}, flip exception_i : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}, writeRfOp_o : { en : UInt<1>, data : UInt<64>, addr : UInt<5>}, writeCSROp_o : { en : UInt<1>, addr : UInt<12>, data : UInt<64>}, exception_o : { cause : UInt<5>, int : UInt<1>, pc : UInt<64>, xtval : UInt<64>, priv : UInt<2>, happen : UInt<1>, new_pc : UInt<64>}, rf_fwd : { addr : UInt<5>, data : UInt<64>}, csr_fwd : { addr : UInt<12>, data : UInt<64>}, if_excep : { happen : UInt<1>, new_pc : UInt<64>}}

    io.writeRfOp_o <= io.writeRfOp_i @[Wb.scala 22:21]
    io.writeCSROp_o <= io.writeCSROp_i @[Wb.scala 23:21]
    io.rf_fwd.data <= io.writeRfOp_i.data @[Wb.scala 25:21]
    io.rf_fwd.addr <= io.writeRfOp_i.addr @[Wb.scala 25:21]
    io.csr_fwd.data <= io.writeCSROp_i.data @[Wb.scala 26:21]
    io.csr_fwd.addr <= io.writeCSROp_i.addr @[Wb.scala 26:21]
    io.exception_o <= io.exception_i @[Wb.scala 28:21]
    io.if_excep.new_pc <= io.exception_i.new_pc @[Wb.scala 33:17]
    io.if_excep.happen <= io.exception_i.happen @[Wb.scala 33:17]

  module Ctrl :
    output io : { flip excep : UInt<1>, flip id_stall_req : UInt<1>, flip id_flush_req : UInt<1>, flip ex_stall_req : UInt<1>, stall : UInt<5>, flush : UInt<5>}

    io.stall <= UInt<1>("h0") @[Ctrl.scala 18:17]
    io.flush <= UInt<1>("h0") @[Ctrl.scala 19:17]
    when io.id_stall_req : @[Ctrl.scala 21:26]
      io.stall <= UInt<2>("h3") @[Ctrl.scala 22:21]
    when io.ex_stall_req : @[Ctrl.scala 24:26]
      io.stall <= UInt<3>("h7") @[Ctrl.scala 25:21]
    when io.id_flush_req : @[Ctrl.scala 27:26]
      io.flush <= UInt<2>("h3") @[Ctrl.scala 28:21]
    when io.excep : @[Ctrl.scala 32:19]
      io.flush <= UInt<5>("h1f") @[Ctrl.scala 33:21]

  module Div :
    input clock : Clock
    input reset : Reset
    output io : { flip a : UInt<64>, flip b : UInt<64>, flip start : UInt<1>, rem : UInt<64>, quo : UInt<64>, finish : UInt<1>, div_err : UInt<1>}

    reg state : UInt<2>, clock with :
      reset => (reset, UInt<2>("h0")) @[Arith.scala 553:26]
    reg PA : UInt<129>, clock with :
      reset => (reset, UInt<129>("h0")) @[Arith.scala 554:26]
    node P = bits(PA, 128, 64) @[Arith.scala 555:21]
    node PASL2 = shl(PA, 2) @[Arith.scala 556:22]
    reg B : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[Arith.scala 557:26]
    node _negB_T = cat(UInt<1>("h0"), B) @[Cat.scala 31:58]
    node _negB_T_1 = not(_negB_T) @[Arith.scala 559:19]
    node _negB_T_2 = add(_negB_T_1, UInt<1>("h1")) @[Arith.scala 559:37]
    node negB = tail(_negB_T_2, 1) @[Arith.scala 559:37]
    node neg2B = shl(negB, 1) @[Arith.scala 560:24]
    node _clz_T = shl(UInt<32>("hffffffff"), 32) @[Bitwise.scala 104:52]
    node _clz_T_1 = xor(UInt<64>("hffffffffffffffff"), _clz_T) @[Bitwise.scala 104:21]
    node _clz_T_2 = shr(io.b, 32) @[Bitwise.scala 105:21]
    node _clz_T_3 = and(_clz_T_2, _clz_T_1) @[Bitwise.scala 105:31]
    node _clz_T_4 = bits(io.b, 31, 0) @[Bitwise.scala 105:46]
    node _clz_T_5 = shl(_clz_T_4, 32) @[Bitwise.scala 105:70]
    node _clz_T_6 = not(_clz_T_1) @[Bitwise.scala 105:82]
    node _clz_T_7 = and(_clz_T_5, _clz_T_6) @[Bitwise.scala 105:80]
    node _clz_T_8 = or(_clz_T_3, _clz_T_7) @[Bitwise.scala 105:39]
    node _clz_T_9 = bits(_clz_T_1, 47, 0) @[Bitwise.scala 104:28]
    node _clz_T_10 = shl(_clz_T_9, 16) @[Bitwise.scala 104:52]
    node _clz_T_11 = xor(_clz_T_1, _clz_T_10) @[Bitwise.scala 104:21]
    node _clz_T_12 = shr(_clz_T_8, 16) @[Bitwise.scala 105:21]
    node _clz_T_13 = and(_clz_T_12, _clz_T_11) @[Bitwise.scala 105:31]
    node _clz_T_14 = bits(_clz_T_8, 47, 0) @[Bitwise.scala 105:46]
    node _clz_T_15 = shl(_clz_T_14, 16) @[Bitwise.scala 105:70]
    node _clz_T_16 = not(_clz_T_11) @[Bitwise.scala 105:82]
    node _clz_T_17 = and(_clz_T_15, _clz_T_16) @[Bitwise.scala 105:80]
    node _clz_T_18 = or(_clz_T_13, _clz_T_17) @[Bitwise.scala 105:39]
    node _clz_T_19 = bits(_clz_T_11, 55, 0) @[Bitwise.scala 104:28]
    node _clz_T_20 = shl(_clz_T_19, 8) @[Bitwise.scala 104:52]
    node _clz_T_21 = xor(_clz_T_11, _clz_T_20) @[Bitwise.scala 104:21]
    node _clz_T_22 = shr(_clz_T_18, 8) @[Bitwise.scala 105:21]
    node _clz_T_23 = and(_clz_T_22, _clz_T_21) @[Bitwise.scala 105:31]
    node _clz_T_24 = bits(_clz_T_18, 55, 0) @[Bitwise.scala 105:46]
    node _clz_T_25 = shl(_clz_T_24, 8) @[Bitwise.scala 105:70]
    node _clz_T_26 = not(_clz_T_21) @[Bitwise.scala 105:82]
    node _clz_T_27 = and(_clz_T_25, _clz_T_26) @[Bitwise.scala 105:80]
    node _clz_T_28 = or(_clz_T_23, _clz_T_27) @[Bitwise.scala 105:39]
    node _clz_T_29 = bits(_clz_T_21, 59, 0) @[Bitwise.scala 104:28]
    node _clz_T_30 = shl(_clz_T_29, 4) @[Bitwise.scala 104:52]
    node _clz_T_31 = xor(_clz_T_21, _clz_T_30) @[Bitwise.scala 104:21]
    node _clz_T_32 = shr(_clz_T_28, 4) @[Bitwise.scala 105:21]
    node _clz_T_33 = and(_clz_T_32, _clz_T_31) @[Bitwise.scala 105:31]
    node _clz_T_34 = bits(_clz_T_28, 59, 0) @[Bitwise.scala 105:46]
    node _clz_T_35 = shl(_clz_T_34, 4) @[Bitwise.scala 105:70]
    node _clz_T_36 = not(_clz_T_31) @[Bitwise.scala 105:82]
    node _clz_T_37 = and(_clz_T_35, _clz_T_36) @[Bitwise.scala 105:80]
    node _clz_T_38 = or(_clz_T_33, _clz_T_37) @[Bitwise.scala 105:39]
    node _clz_T_39 = bits(_clz_T_31, 61, 0) @[Bitwise.scala 104:28]
    node _clz_T_40 = shl(_clz_T_39, 2) @[Bitwise.scala 104:52]
    node _clz_T_41 = xor(_clz_T_31, _clz_T_40) @[Bitwise.scala 104:21]
    node _clz_T_42 = shr(_clz_T_38, 2) @[Bitwise.scala 105:21]
    node _clz_T_43 = and(_clz_T_42, _clz_T_41) @[Bitwise.scala 105:31]
    node _clz_T_44 = bits(_clz_T_38, 61, 0) @[Bitwise.scala 105:46]
    node _clz_T_45 = shl(_clz_T_44, 2) @[Bitwise.scala 105:70]
    node _clz_T_46 = not(_clz_T_41) @[Bitwise.scala 105:82]
    node _clz_T_47 = and(_clz_T_45, _clz_T_46) @[Bitwise.scala 105:80]
    node _clz_T_48 = or(_clz_T_43, _clz_T_47) @[Bitwise.scala 105:39]
    node _clz_T_49 = bits(_clz_T_41, 62, 0) @[Bitwise.scala 104:28]
    node _clz_T_50 = shl(_clz_T_49, 1) @[Bitwise.scala 104:52]
    node _clz_T_51 = xor(_clz_T_41, _clz_T_50) @[Bitwise.scala 104:21]
    node _clz_T_52 = shr(_clz_T_48, 1) @[Bitwise.scala 105:21]
    node _clz_T_53 = and(_clz_T_52, _clz_T_51) @[Bitwise.scala 105:31]
    node _clz_T_54 = bits(_clz_T_48, 62, 0) @[Bitwise.scala 105:46]
    node _clz_T_55 = shl(_clz_T_54, 1) @[Bitwise.scala 105:70]
    node _clz_T_56 = not(_clz_T_51) @[Bitwise.scala 105:82]
    node _clz_T_57 = and(_clz_T_55, _clz_T_56) @[Bitwise.scala 105:80]
    node _clz_T_58 = or(_clz_T_53, _clz_T_57) @[Bitwise.scala 105:39]
    node _clz_T_59 = bits(_clz_T_58, 0, 0) @[OneHot.scala 47:45]
    node _clz_T_60 = bits(_clz_T_58, 1, 1) @[OneHot.scala 47:45]
    node _clz_T_61 = bits(_clz_T_58, 2, 2) @[OneHot.scala 47:45]
    node _clz_T_62 = bits(_clz_T_58, 3, 3) @[OneHot.scala 47:45]
    node _clz_T_63 = bits(_clz_T_58, 4, 4) @[OneHot.scala 47:45]
    node _clz_T_64 = bits(_clz_T_58, 5, 5) @[OneHot.scala 47:45]
    node _clz_T_65 = bits(_clz_T_58, 6, 6) @[OneHot.scala 47:45]
    node _clz_T_66 = bits(_clz_T_58, 7, 7) @[OneHot.scala 47:45]
    node _clz_T_67 = bits(_clz_T_58, 8, 8) @[OneHot.scala 47:45]
    node _clz_T_68 = bits(_clz_T_58, 9, 9) @[OneHot.scala 47:45]
    node _clz_T_69 = bits(_clz_T_58, 10, 10) @[OneHot.scala 47:45]
    node _clz_T_70 = bits(_clz_T_58, 11, 11) @[OneHot.scala 47:45]
    node _clz_T_71 = bits(_clz_T_58, 12, 12) @[OneHot.scala 47:45]
    node _clz_T_72 = bits(_clz_T_58, 13, 13) @[OneHot.scala 47:45]
    node _clz_T_73 = bits(_clz_T_58, 14, 14) @[OneHot.scala 47:45]
    node _clz_T_74 = bits(_clz_T_58, 15, 15) @[OneHot.scala 47:45]
    node _clz_T_75 = bits(_clz_T_58, 16, 16) @[OneHot.scala 47:45]
    node _clz_T_76 = bits(_clz_T_58, 17, 17) @[OneHot.scala 47:45]
    node _clz_T_77 = bits(_clz_T_58, 18, 18) @[OneHot.scala 47:45]
    node _clz_T_78 = bits(_clz_T_58, 19, 19) @[OneHot.scala 47:45]
    node _clz_T_79 = bits(_clz_T_58, 20, 20) @[OneHot.scala 47:45]
    node _clz_T_80 = bits(_clz_T_58, 21, 21) @[OneHot.scala 47:45]
    node _clz_T_81 = bits(_clz_T_58, 22, 22) @[OneHot.scala 47:45]
    node _clz_T_82 = bits(_clz_T_58, 23, 23) @[OneHot.scala 47:45]
    node _clz_T_83 = bits(_clz_T_58, 24, 24) @[OneHot.scala 47:45]
    node _clz_T_84 = bits(_clz_T_58, 25, 25) @[OneHot.scala 47:45]
    node _clz_T_85 = bits(_clz_T_58, 26, 26) @[OneHot.scala 47:45]
    node _clz_T_86 = bits(_clz_T_58, 27, 27) @[OneHot.scala 47:45]
    node _clz_T_87 = bits(_clz_T_58, 28, 28) @[OneHot.scala 47:45]
    node _clz_T_88 = bits(_clz_T_58, 29, 29) @[OneHot.scala 47:45]
    node _clz_T_89 = bits(_clz_T_58, 30, 30) @[OneHot.scala 47:45]
    node _clz_T_90 = bits(_clz_T_58, 31, 31) @[OneHot.scala 47:45]
    node _clz_T_91 = bits(_clz_T_58, 32, 32) @[OneHot.scala 47:45]
    node _clz_T_92 = bits(_clz_T_58, 33, 33) @[OneHot.scala 47:45]
    node _clz_T_93 = bits(_clz_T_58, 34, 34) @[OneHot.scala 47:45]
    node _clz_T_94 = bits(_clz_T_58, 35, 35) @[OneHot.scala 47:45]
    node _clz_T_95 = bits(_clz_T_58, 36, 36) @[OneHot.scala 47:45]
    node _clz_T_96 = bits(_clz_T_58, 37, 37) @[OneHot.scala 47:45]
    node _clz_T_97 = bits(_clz_T_58, 38, 38) @[OneHot.scala 47:45]
    node _clz_T_98 = bits(_clz_T_58, 39, 39) @[OneHot.scala 47:45]
    node _clz_T_99 = bits(_clz_T_58, 40, 40) @[OneHot.scala 47:45]
    node _clz_T_100 = bits(_clz_T_58, 41, 41) @[OneHot.scala 47:45]
    node _clz_T_101 = bits(_clz_T_58, 42, 42) @[OneHot.scala 47:45]
    node _clz_T_102 = bits(_clz_T_58, 43, 43) @[OneHot.scala 47:45]
    node _clz_T_103 = bits(_clz_T_58, 44, 44) @[OneHot.scala 47:45]
    node _clz_T_104 = bits(_clz_T_58, 45, 45) @[OneHot.scala 47:45]
    node _clz_T_105 = bits(_clz_T_58, 46, 46) @[OneHot.scala 47:45]
    node _clz_T_106 = bits(_clz_T_58, 47, 47) @[OneHot.scala 47:45]
    node _clz_T_107 = bits(_clz_T_58, 48, 48) @[OneHot.scala 47:45]
    node _clz_T_108 = bits(_clz_T_58, 49, 49) @[OneHot.scala 47:45]
    node _clz_T_109 = bits(_clz_T_58, 50, 50) @[OneHot.scala 47:45]
    node _clz_T_110 = bits(_clz_T_58, 51, 51) @[OneHot.scala 47:45]
    node _clz_T_111 = bits(_clz_T_58, 52, 52) @[OneHot.scala 47:45]
    node _clz_T_112 = bits(_clz_T_58, 53, 53) @[OneHot.scala 47:45]
    node _clz_T_113 = bits(_clz_T_58, 54, 54) @[OneHot.scala 47:45]
    node _clz_T_114 = bits(_clz_T_58, 55, 55) @[OneHot.scala 47:45]
    node _clz_T_115 = bits(_clz_T_58, 56, 56) @[OneHot.scala 47:45]
    node _clz_T_116 = bits(_clz_T_58, 57, 57) @[OneHot.scala 47:45]
    node _clz_T_117 = bits(_clz_T_58, 58, 58) @[OneHot.scala 47:45]
    node _clz_T_118 = bits(_clz_T_58, 59, 59) @[OneHot.scala 47:45]
    node _clz_T_119 = bits(_clz_T_58, 60, 60) @[OneHot.scala 47:45]
    node _clz_T_120 = bits(_clz_T_58, 61, 61) @[OneHot.scala 47:45]
    node _clz_T_121 = bits(_clz_T_58, 62, 62) @[OneHot.scala 47:45]
    node _clz_T_122 = bits(_clz_T_58, 63, 63) @[OneHot.scala 47:45]
    node _clz_T_123 = mux(_clz_T_121, UInt<6>("h3e"), UInt<6>("h3f")) @[Mux.scala 47:70]
    node _clz_T_124 = mux(_clz_T_120, UInt<6>("h3d"), _clz_T_123) @[Mux.scala 47:70]
    node _clz_T_125 = mux(_clz_T_119, UInt<6>("h3c"), _clz_T_124) @[Mux.scala 47:70]
    node _clz_T_126 = mux(_clz_T_118, UInt<6>("h3b"), _clz_T_125) @[Mux.scala 47:70]
    node _clz_T_127 = mux(_clz_T_117, UInt<6>("h3a"), _clz_T_126) @[Mux.scala 47:70]
    node _clz_T_128 = mux(_clz_T_116, UInt<6>("h39"), _clz_T_127) @[Mux.scala 47:70]
    node _clz_T_129 = mux(_clz_T_115, UInt<6>("h38"), _clz_T_128) @[Mux.scala 47:70]
    node _clz_T_130 = mux(_clz_T_114, UInt<6>("h37"), _clz_T_129) @[Mux.scala 47:70]
    node _clz_T_131 = mux(_clz_T_113, UInt<6>("h36"), _clz_T_130) @[Mux.scala 47:70]
    node _clz_T_132 = mux(_clz_T_112, UInt<6>("h35"), _clz_T_131) @[Mux.scala 47:70]
    node _clz_T_133 = mux(_clz_T_111, UInt<6>("h34"), _clz_T_132) @[Mux.scala 47:70]
    node _clz_T_134 = mux(_clz_T_110, UInt<6>("h33"), _clz_T_133) @[Mux.scala 47:70]
    node _clz_T_135 = mux(_clz_T_109, UInt<6>("h32"), _clz_T_134) @[Mux.scala 47:70]
    node _clz_T_136 = mux(_clz_T_108, UInt<6>("h31"), _clz_T_135) @[Mux.scala 47:70]
    node _clz_T_137 = mux(_clz_T_107, UInt<6>("h30"), _clz_T_136) @[Mux.scala 47:70]
    node _clz_T_138 = mux(_clz_T_106, UInt<6>("h2f"), _clz_T_137) @[Mux.scala 47:70]
    node _clz_T_139 = mux(_clz_T_105, UInt<6>("h2e"), _clz_T_138) @[Mux.scala 47:70]
    node _clz_T_140 = mux(_clz_T_104, UInt<6>("h2d"), _clz_T_139) @[Mux.scala 47:70]
    node _clz_T_141 = mux(_clz_T_103, UInt<6>("h2c"), _clz_T_140) @[Mux.scala 47:70]
    node _clz_T_142 = mux(_clz_T_102, UInt<6>("h2b"), _clz_T_141) @[Mux.scala 47:70]
    node _clz_T_143 = mux(_clz_T_101, UInt<6>("h2a"), _clz_T_142) @[Mux.scala 47:70]
    node _clz_T_144 = mux(_clz_T_100, UInt<6>("h29"), _clz_T_143) @[Mux.scala 47:70]
    node _clz_T_145 = mux(_clz_T_99, UInt<6>("h28"), _clz_T_144) @[Mux.scala 47:70]
    node _clz_T_146 = mux(_clz_T_98, UInt<6>("h27"), _clz_T_145) @[Mux.scala 47:70]
    node _clz_T_147 = mux(_clz_T_97, UInt<6>("h26"), _clz_T_146) @[Mux.scala 47:70]
    node _clz_T_148 = mux(_clz_T_96, UInt<6>("h25"), _clz_T_147) @[Mux.scala 47:70]
    node _clz_T_149 = mux(_clz_T_95, UInt<6>("h24"), _clz_T_148) @[Mux.scala 47:70]
    node _clz_T_150 = mux(_clz_T_94, UInt<6>("h23"), _clz_T_149) @[Mux.scala 47:70]
    node _clz_T_151 = mux(_clz_T_93, UInt<6>("h22"), _clz_T_150) @[Mux.scala 47:70]
    node _clz_T_152 = mux(_clz_T_92, UInt<6>("h21"), _clz_T_151) @[Mux.scala 47:70]
    node _clz_T_153 = mux(_clz_T_91, UInt<6>("h20"), _clz_T_152) @[Mux.scala 47:70]
    node _clz_T_154 = mux(_clz_T_90, UInt<5>("h1f"), _clz_T_153) @[Mux.scala 47:70]
    node _clz_T_155 = mux(_clz_T_89, UInt<5>("h1e"), _clz_T_154) @[Mux.scala 47:70]
    node _clz_T_156 = mux(_clz_T_88, UInt<5>("h1d"), _clz_T_155) @[Mux.scala 47:70]
    node _clz_T_157 = mux(_clz_T_87, UInt<5>("h1c"), _clz_T_156) @[Mux.scala 47:70]
    node _clz_T_158 = mux(_clz_T_86, UInt<5>("h1b"), _clz_T_157) @[Mux.scala 47:70]
    node _clz_T_159 = mux(_clz_T_85, UInt<5>("h1a"), _clz_T_158) @[Mux.scala 47:70]
    node _clz_T_160 = mux(_clz_T_84, UInt<5>("h19"), _clz_T_159) @[Mux.scala 47:70]
    node _clz_T_161 = mux(_clz_T_83, UInt<5>("h18"), _clz_T_160) @[Mux.scala 47:70]
    node _clz_T_162 = mux(_clz_T_82, UInt<5>("h17"), _clz_T_161) @[Mux.scala 47:70]
    node _clz_T_163 = mux(_clz_T_81, UInt<5>("h16"), _clz_T_162) @[Mux.scala 47:70]
    node _clz_T_164 = mux(_clz_T_80, UInt<5>("h15"), _clz_T_163) @[Mux.scala 47:70]
    node _clz_T_165 = mux(_clz_T_79, UInt<5>("h14"), _clz_T_164) @[Mux.scala 47:70]
    node _clz_T_166 = mux(_clz_T_78, UInt<5>("h13"), _clz_T_165) @[Mux.scala 47:70]
    node _clz_T_167 = mux(_clz_T_77, UInt<5>("h12"), _clz_T_166) @[Mux.scala 47:70]
    node _clz_T_168 = mux(_clz_T_76, UInt<5>("h11"), _clz_T_167) @[Mux.scala 47:70]
    node _clz_T_169 = mux(_clz_T_75, UInt<5>("h10"), _clz_T_168) @[Mux.scala 47:70]
    node _clz_T_170 = mux(_clz_T_74, UInt<4>("hf"), _clz_T_169) @[Mux.scala 47:70]
    node _clz_T_171 = mux(_clz_T_73, UInt<4>("he"), _clz_T_170) @[Mux.scala 47:70]
    node _clz_T_172 = mux(_clz_T_72, UInt<4>("hd"), _clz_T_171) @[Mux.scala 47:70]
    node _clz_T_173 = mux(_clz_T_71, UInt<4>("hc"), _clz_T_172) @[Mux.scala 47:70]
    node _clz_T_174 = mux(_clz_T_70, UInt<4>("hb"), _clz_T_173) @[Mux.scala 47:70]
    node _clz_T_175 = mux(_clz_T_69, UInt<4>("ha"), _clz_T_174) @[Mux.scala 47:70]
    node _clz_T_176 = mux(_clz_T_68, UInt<4>("h9"), _clz_T_175) @[Mux.scala 47:70]
    node _clz_T_177 = mux(_clz_T_67, UInt<4>("h8"), _clz_T_176) @[Mux.scala 47:70]
    node _clz_T_178 = mux(_clz_T_66, UInt<3>("h7"), _clz_T_177) @[Mux.scala 47:70]
    node _clz_T_179 = mux(_clz_T_65, UInt<3>("h6"), _clz_T_178) @[Mux.scala 47:70]
    node _clz_T_180 = mux(_clz_T_64, UInt<3>("h5"), _clz_T_179) @[Mux.scala 47:70]
    node _clz_T_181 = mux(_clz_T_63, UInt<3>("h4"), _clz_T_180) @[Mux.scala 47:70]
    node _clz_T_182 = mux(_clz_T_62, UInt<2>("h3"), _clz_T_181) @[Mux.scala 47:70]
    node _clz_T_183 = mux(_clz_T_61, UInt<2>("h2"), _clz_T_182) @[Mux.scala 47:70]
    node _clz_T_184 = mux(_clz_T_60, UInt<1>("h1"), _clz_T_183) @[Mux.scala 47:70]
    node clz = mux(_clz_T_59, UInt<1>("h0"), _clz_T_184) @[Mux.scala 47:70]
    node whichTable = bits(B, 63, 60) @[Arith.scala 564:23]
    node _offset_T = sub(whichTable, UInt<4>("h8")) @[Arith.scala 566:34]
    node _offset_T_1 = tail(_offset_T, 1) @[Arith.scala 566:34]
    node _offset_T_2 = shl(_offset_T_1, 2) @[Arith.scala 566:41]
    node _offset_T_3 = add(_offset_T_2, whichTable) @[Arith.scala 566:47]
    node _offset_T_4 = tail(_offset_T_3, 1) @[Arith.scala 566:47]
    node _offset_T_5 = sub(_offset_T_4, UInt<4>("h8")) @[Arith.scala 566:60]
    node _offset_T_6 = tail(_offset_T_5, 1) @[Arith.scala 566:60]
    node offset = shl(_offset_T_6, 1) @[Arith.scala 566:67]
    reg cnt : UInt<6>, clock with :
      reset => (reset, UInt<6>("h0")) @[Arith.scala 567:26]
    node P_neg = bits(PA, 128, 128) @[Arith.scala 568:21]
    reg pos_quo : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[Arith.scala 569:26]
    reg neg_quo : UInt<64>, clock with :
      reset => (reset, UInt<64>("h0")) @[Arith.scala 570:26]
    io.finish <= UInt<1>("h0") @[Arith.scala 571:16]
    io.div_err <= UInt<1>("h0") @[Arith.scala 572:16]
    node _io_rem_T = bits(PA, 128, 64) @[Arith.scala 573:21]
    io.rem <= _io_rem_T @[Arith.scala 573:16]
    node _io_quo_T = sub(pos_quo, neg_quo) @[Arith.scala 574:27]
    node _io_quo_T_1 = tail(_io_quo_T, 1) @[Arith.scala 574:27]
    io.quo <= _io_quo_T_1 @[Arith.scala 574:16]
    wire table : SInt<6>[80] @[Arith.scala 658:28]
    table[0] <= asSInt(UInt<5>("h14")) @[Arith.scala 658:28]
    table[1] <= asSInt(UInt<4>("h9")) @[Arith.scala 658:28]
    table[2] <= asSInt(UInt<4>("ha")) @[Arith.scala 658:28]
    table[3] <= asSInt(UInt<3>("h5")) @[Arith.scala 658:28]
    table[4] <= asSInt(UInt<2>("h2")) @[Arith.scala 658:28]
    table[5] <= asSInt(UInt<2>("h1")) @[Arith.scala 658:28]
    table[6] <= asSInt(UInt<3>("h2")) @[Arith.scala 658:28]
    table[7] <= asSInt(UInt<4>("h5")) @[Arith.scala 658:28]
    table[8] <= asSInt(UInt<4>("h6")) @[Arith.scala 658:28]
    table[9] <= asSInt(UInt<5>("hb")) @[Arith.scala 658:28]
    table[10] <= asSInt(UInt<5>("h12")) @[Arith.scala 658:28]
    table[11] <= asSInt(UInt<4>("h8")) @[Arith.scala 658:28]
    table[12] <= asSInt(UInt<4>("h9")) @[Arith.scala 658:28]
    table[13] <= asSInt(UInt<3>("h5")) @[Arith.scala 658:28]
    table[14] <= asSInt(UInt<3>("h5")) @[Arith.scala 658:28]
    table[15] <= asSInt(UInt<3>("h2")) @[Arith.scala 658:28]
    table[16] <= asSInt(UInt<3>("h2")) @[Arith.scala 658:28]
    table[17] <= asSInt(UInt<4>("h6")) @[Arith.scala 658:28]
    table[18] <= asSInt(UInt<4>("h7")) @[Arith.scala 658:28]
    table[19] <= asSInt(UInt<5>("hd")) @[Arith.scala 658:28]
    table[20] <= asSInt(UInt<5>("h11")) @[Arith.scala 658:28]
    table[21] <= asSInt(UInt<5>("h17")) @[Arith.scala 658:28]
    table[22] <= asSInt(UInt<4>("h8")) @[Arith.scala 658:28]
    table[23] <= asSInt(UInt<3>("h5")) @[Arith.scala 658:28]
    table[24] <= asSInt(UInt<3>("h5")) @[Arith.scala 658:28]
    table[25] <= asSInt(UInt<3>("h2")) @[Arith.scala 658:28]
    table[26] <= asSInt(UInt<3>("h2")) @[Arith.scala 658:28]
    table[27] <= asSInt(UInt<4>("h7")) @[Arith.scala 658:28]
    table[28] <= asSInt(UInt<5>("h8")) @[Arith.scala 658:28]
    table[29] <= asSInt(UInt<5>("he")) @[Arith.scala 658:28]
    table[30] <= asSInt(UInt<5>("h10")) @[Arith.scala 658:28]
    table[31] <= asSInt(UInt<5>("h17")) @[Arith.scala 658:28]
    table[32] <= asSInt(UInt<5>("h17")) @[Arith.scala 658:28]
    table[33] <= asSInt(UInt<3>("h5")) @[Arith.scala 658:28]
    table[34] <= asSInt(UInt<3>("h5")) @[Arith.scala 658:28]
    table[35] <= asSInt(UInt<3>("h2")) @[Arith.scala 658:28]
    table[36] <= asSInt(UInt<3>("h2")) @[Arith.scala 658:28]
    table[37] <= asSInt(UInt<5>("h8")) @[Arith.scala 658:28]
    table[38] <= asSInt(UInt<5>("h8")) @[Arith.scala 658:28]
    table[39] <= asSInt(UInt<5>("hf")) @[Arith.scala 658:28]
    table[40] <= asSInt(UInt<6>("h2e")) @[Arith.scala 658:28]
    table[41] <= asSInt(UInt<5>("h16")) @[Arith.scala 658:28]
    table[42] <= asSInt(UInt<5>("h16")) @[Arith.scala 658:28]
    table[43] <= asSInt(UInt<3>("h4")) @[Arith.scala 658:28]
    table[44] <= asSInt(UInt<3>("h4")) @[Arith.scala 658:28]
    table[45] <= asSInt(UInt<3>("h3")) @[Arith.scala 658:28]
    table[46] <= asSInt(UInt<3>("h3")) @[Arith.scala 658:28]
    table[47] <= asSInt(UInt<5>("h9")) @[Arith.scala 658:28]
    table[48] <= asSInt(UInt<5>("h9")) @[Arith.scala 658:28]
    table[49] <= asSInt(UInt<6>("h11")) @[Arith.scala 658:28]
    table[50] <= asSInt(UInt<6>("h2d")) @[Arith.scala 658:28]
    table[51] <= asSInt(UInt<5>("h15")) @[Arith.scala 658:28]
    table[52] <= asSInt(UInt<5>("h16")) @[Arith.scala 658:28]
    table[53] <= asSInt(UInt<3>("h4")) @[Arith.scala 658:28]
    table[54] <= asSInt(UInt<3>("h4")) @[Arith.scala 658:28]
    table[55] <= asSInt(UInt<3>("h3")) @[Arith.scala 658:28]
    table[56] <= asSInt(UInt<3>("h3")) @[Arith.scala 658:28]
    table[57] <= asSInt(UInt<5>("h9")) @[Arith.scala 658:28]
    table[58] <= asSInt(UInt<5>("ha")) @[Arith.scala 658:28]
    table[59] <= asSInt(UInt<6>("h12")) @[Arith.scala 658:28]
    table[60] <= asSInt(UInt<6>("h2c")) @[Arith.scala 658:28]
    table[61] <= asSInt(UInt<5>("h15")) @[Arith.scala 658:28]
    table[62] <= asSInt(UInt<5>("h15")) @[Arith.scala 658:28]
    table[63] <= asSInt(UInt<3>("h4")) @[Arith.scala 658:28]
    table[64] <= asSInt(UInt<3>("h4")) @[Arith.scala 658:28]
    table[65] <= asSInt(UInt<3>("h3")) @[Arith.scala 658:28]
    table[66] <= asSInt(UInt<3>("h3")) @[Arith.scala 658:28]
    table[67] <= asSInt(UInt<5>("ha")) @[Arith.scala 658:28]
    table[68] <= asSInt(UInt<5>("ha")) @[Arith.scala 658:28]
    table[69] <= asSInt(UInt<6>("h13")) @[Arith.scala 658:28]
    table[70] <= asSInt(UInt<6>("h2a")) @[Arith.scala 658:28]
    table[71] <= asSInt(UInt<5>("h14")) @[Arith.scala 658:28]
    table[72] <= asSInt(UInt<5>("h14")) @[Arith.scala 658:28]
    table[73] <= asSInt(UInt<3>("h4")) @[Arith.scala 658:28]
    table[74] <= asSInt(UInt<4>("hb")) @[Arith.scala 658:28]
    table[75] <= asSInt(UInt<4>("h4")) @[Arith.scala 658:28]
    table[76] <= asSInt(UInt<3>("h3")) @[Arith.scala 658:28]
    table[77] <= asSInt(UInt<5>("hb")) @[Arith.scala 658:28]
    table[78] <= asSInt(UInt<5>("hb")) @[Arith.scala 658:28]
    table[79] <= asSInt(UInt<6>("h15")) @[Arith.scala 658:28]
    node _qNeg2_T = bits(P, 64, 59) @[Arith.scala 578:28]
    node _qNeg2_T_1 = asSInt(_qNeg2_T) @[Arith.scala 578:36]
    node _qNeg2_T_2 = add(offset, UInt<1>("h1")) @[Arith.scala 578:77]
    node _qNeg2_T_3 = tail(_qNeg2_T_2, 1) @[Arith.scala 578:77]
    node _qNeg2_T_4 = geq(_qNeg2_T_1, table[offset]) @[Arith.scala 530:14]
    node _qNeg2_T_5 = leq(_qNeg2_T_1, table[_qNeg2_T_3]) @[Arith.scala 530:26]
    node qNeg2 = and(_qNeg2_T_4, _qNeg2_T_5) @[Arith.scala 530:19]
    node _qNeg1_T = bits(P, 64, 59) @[Arith.scala 579:28]
    node _qNeg1_T_1 = asSInt(_qNeg1_T) @[Arith.scala 579:36]
    node _qNeg1_T_2 = add(offset, UInt<2>("h2")) @[Arith.scala 579:57]
    node _qNeg1_T_3 = tail(_qNeg1_T_2, 1) @[Arith.scala 579:57]
    node _qNeg1_T_4 = add(offset, UInt<2>("h3")) @[Arith.scala 579:77]
    node _qNeg1_T_5 = tail(_qNeg1_T_4, 1) @[Arith.scala 579:77]
    node _qNeg1_T_6 = geq(_qNeg1_T_1, table[_qNeg1_T_3]) @[Arith.scala 530:14]
    node _qNeg1_T_7 = leq(_qNeg1_T_1, table[_qNeg1_T_5]) @[Arith.scala 530:26]
    node qNeg1 = and(_qNeg1_T_6, _qNeg1_T_7) @[Arith.scala 530:19]
    node _q0_T = bits(P, 64, 59) @[Arith.scala 580:28]
    node _q0_T_1 = asSInt(_q0_T) @[Arith.scala 580:36]
    node _q0_T_2 = add(offset, UInt<3>("h4")) @[Arith.scala 580:57]
    node _q0_T_3 = tail(_q0_T_2, 1) @[Arith.scala 580:57]
    node _q0_T_4 = add(offset, UInt<3>("h5")) @[Arith.scala 580:77]
    node _q0_T_5 = tail(_q0_T_4, 1) @[Arith.scala 580:77]
    node _q0_T_6 = geq(_q0_T_1, table[_q0_T_3]) @[Arith.scala 530:14]
    node _q0_T_7 = leq(_q0_T_1, table[_q0_T_5]) @[Arith.scala 530:26]
    node q0 = and(_q0_T_6, _q0_T_7) @[Arith.scala 530:19]
    node _q1_T = bits(P, 64, 59) @[Arith.scala 581:28]
    node _q1_T_1 = asSInt(_q1_T) @[Arith.scala 581:36]
    node _q1_T_2 = add(offset, UInt<3>("h6")) @[Arith.scala 581:57]
    node _q1_T_3 = tail(_q1_T_2, 1) @[Arith.scala 581:57]
    node _q1_T_4 = add(offset, UInt<3>("h7")) @[Arith.scala 581:77]
    node _q1_T_5 = tail(_q1_T_4, 1) @[Arith.scala 581:77]
    node _q1_T_6 = geq(_q1_T_1, table[_q1_T_3]) @[Arith.scala 530:14]
    node _q1_T_7 = leq(_q1_T_1, table[_q1_T_5]) @[Arith.scala 530:26]
    node q1 = and(_q1_T_6, _q1_T_7) @[Arith.scala 530:19]
    node _q2_T = bits(P, 64, 59) @[Arith.scala 582:28]
    node _q2_T_1 = asSInt(_q2_T) @[Arith.scala 582:36]
    node _q2_T_2 = add(offset, UInt<4>("h8")) @[Arith.scala 582:57]
    node _q2_T_3 = tail(_q2_T_2, 1) @[Arith.scala 582:57]
    node _q2_T_4 = add(offset, UInt<4>("h9")) @[Arith.scala 582:77]
    node _q2_T_5 = tail(_q2_T_4, 1) @[Arith.scala 582:77]
    node _q2_T_6 = geq(_q2_T_1, table[_q2_T_3]) @[Arith.scala 530:14]
    node _q2_T_7 = leq(_q2_T_1, table[_q2_T_5]) @[Arith.scala 530:26]
    node q2 = and(_q2_T_6, _q2_T_7) @[Arith.scala 530:19]
    node _T = eq(UInt<2>("h0"), state) @[Arith.scala 584:18]
    when _T : @[Arith.scala 584:18]
      when io.start : @[Arith.scala 586:27]
        node _state_T = eq(io.b, UInt<1>("h0")) @[Arith.scala 587:36]
        node _state_T_1 = mux(_state_T, UInt<2>("h3"), UInt<2>("h1")) @[Arith.scala 587:30]
        state <= _state_T_1 @[Arith.scala 587:23]
        node _PA_T = cat(UInt<65>("h0"), io.a) @[Cat.scala 31:58]
        node _PA_T_1 = dshl(_PA_T, clz) @[Arith.scala 588:48]
        PA <= _PA_T_1 @[Arith.scala 588:23]
        node _B_T = dshl(io.b, clz) @[Arith.scala 589:32]
        B <= _B_T @[Arith.scala 589:23]
      else :
        state <= UInt<2>("h0") @[Arith.scala 591:23]
      cnt <= UInt<6>("h3e") @[Arith.scala 593:24]
      io.finish <= UInt<1>("h0") @[Arith.scala 594:24]
      pos_quo <= UInt<1>("h0") @[Arith.scala 595:24]
      neg_quo <= UInt<1>("h0") @[Arith.scala 596:24]
    else :
      node _T_1 = eq(UInt<2>("h1"), state) @[Arith.scala 584:18]
      when _T_1 : @[Arith.scala 584:18]
        node _state_T_2 = eq(cnt, UInt<1>("h0")) @[Arith.scala 604:35]
        node _state_T_3 = mux(_state_T_2, UInt<2>("h2"), UInt<2>("h1")) @[Arith.scala 604:30]
        state <= _state_T_3 @[Arith.scala 604:24]
        io.finish <= UInt<1>("h0") @[Arith.scala 605:24]
        node _qSel_T = mux(qNeg1, UInt<3>("h7"), UInt<3>("h6")) @[Mux.scala 47:70]
        node _qSel_T_1 = mux(q2, UInt<3>("h2"), _qSel_T) @[Mux.scala 47:70]
        node _qSel_T_2 = mux(q1, UInt<3>("h1"), _qSel_T_1) @[Mux.scala 47:70]
        node qSel = mux(q0, UInt<3>("h0"), _qSel_T_2) @[Mux.scala 47:70]
        node _T_2 = eq(UInt<3>("h6"), qSel) @[Arith.scala 615:25]
        when _T_2 : @[Arith.scala 615:25]
          node _PA_T_2 = shl(B, 1) @[Arith.scala 617:47]
          node _PA_T_3 = cat(_PA_T_2, UInt<64>("h0")) @[Cat.scala 31:58]
          node _PA_T_4 = add(PASL2, _PA_T_3) @[Arith.scala 617:38]
          node _PA_T_5 = tail(_PA_T_4, 1) @[Arith.scala 617:38]
          PA <= _PA_T_5 @[Arith.scala 617:29]
          node _neg_quo_T = dshl(UInt<1>("h1"), cnt) @[Arith.scala 618:47]
          node _neg_quo_T_1 = shl(_neg_quo_T, 1) @[Arith.scala 618:54]
          node _neg_quo_T_2 = add(neg_quo, _neg_quo_T_1) @[Arith.scala 618:40]
          node _neg_quo_T_3 = tail(_neg_quo_T_2, 1) @[Arith.scala 618:40]
          neg_quo <= _neg_quo_T_3 @[Arith.scala 618:29]
        else :
          node _T_3 = eq(UInt<3>("h7"), qSel) @[Arith.scala 615:25]
          when _T_3 : @[Arith.scala 615:25]
            node _PA_T_6 = cat(B, UInt<64>("h0")) @[Cat.scala 31:58]
            node _PA_T_7 = add(PASL2, _PA_T_6) @[Arith.scala 621:38]
            node _PA_T_8 = tail(_PA_T_7, 1) @[Arith.scala 621:38]
            PA <= _PA_T_8 @[Arith.scala 621:29]
            node _neg_quo_T_4 = dshl(UInt<1>("h1"), cnt) @[Arith.scala 622:47]
            node _neg_quo_T_5 = add(neg_quo, _neg_quo_T_4) @[Arith.scala 622:40]
            node _neg_quo_T_6 = tail(_neg_quo_T_5, 1) @[Arith.scala 622:40]
            neg_quo <= _neg_quo_T_6 @[Arith.scala 622:29]
          else :
            node _T_4 = eq(UInt<3>("h0"), qSel) @[Arith.scala 615:25]
            when _T_4 : @[Arith.scala 615:25]
              PA <= PASL2 @[Arith.scala 625:29]
            else :
              node _T_5 = eq(UInt<3>("h1"), qSel) @[Arith.scala 615:25]
              when _T_5 : @[Arith.scala 615:25]
                node _PA_T_9 = cat(negB, UInt<64>("h0")) @[Cat.scala 31:58]
                node _PA_T_10 = add(PASL2, _PA_T_9) @[Arith.scala 628:38]
                node _PA_T_11 = tail(_PA_T_10, 1) @[Arith.scala 628:38]
                PA <= _PA_T_11 @[Arith.scala 628:29]
                node _pos_quo_T = dshl(UInt<1>("h1"), cnt) @[Arith.scala 629:47]
                node _pos_quo_T_1 = add(pos_quo, _pos_quo_T) @[Arith.scala 629:40]
                node _pos_quo_T_2 = tail(_pos_quo_T_1, 1) @[Arith.scala 629:40]
                pos_quo <= _pos_quo_T_2 @[Arith.scala 629:29]
              else :
                node _T_6 = eq(UInt<3>("h2"), qSel) @[Arith.scala 615:25]
                when _T_6 : @[Arith.scala 615:25]
                  node _PA_T_12 = cat(neg2B, UInt<64>("h0")) @[Cat.scala 31:58]
                  node _PA_T_13 = add(PASL2, _PA_T_12) @[Arith.scala 632:38]
                  node _PA_T_14 = tail(_PA_T_13, 1) @[Arith.scala 632:38]
                  PA <= _PA_T_14 @[Arith.scala 632:29]
                  node _pos_quo_T_3 = dshl(UInt<1>("h1"), cnt) @[Arith.scala 633:47]
                  node _pos_quo_T_4 = shl(_pos_quo_T_3, 1) @[Arith.scala 633:54]
                  node _pos_quo_T_5 = add(pos_quo, _pos_quo_T_4) @[Arith.scala 633:40]
                  node _pos_quo_T_6 = tail(_pos_quo_T_5, 1) @[Arith.scala 633:40]
                  pos_quo <= _pos_quo_T_6 @[Arith.scala 633:29]
        node _cnt_T = sub(cnt, UInt<2>("h2")) @[Arith.scala 637:24]
        node _cnt_T_1 = tail(_cnt_T, 1) @[Arith.scala 637:24]
        cnt <= _cnt_T_1 @[Arith.scala 637:17]
      else :
        node _T_7 = eq(UInt<2>("h3"), state) @[Arith.scala 584:18]
        when _T_7 : @[Arith.scala 584:18]
          state <= UInt<2>("h2") @[Arith.scala 641:24]
          io.quo <= UInt<1>("h0") @[Arith.scala 642:24]
          io.rem <= UInt<1>("h0") @[Arith.scala 643:24]
          io.finish <= UInt<1>("h1") @[Arith.scala 644:24]
          io.div_err <= UInt<1>("h1") @[Arith.scala 645:24]
        else :
          node _T_8 = eq(UInt<2>("h2"), state) @[Arith.scala 584:18]
          when _T_8 : @[Arith.scala 584:18]
            state <= UInt<2>("h2") @[Arith.scala 648:24]
            cnt <= UInt<1>("h0") @[Arith.scala 649:24]
            node _io_rem_T_1 = add(P, B) @[Arith.scala 650:41]
            node _io_rem_T_2 = tail(_io_rem_T_1, 1) @[Arith.scala 650:41]
            node _io_rem_T_3 = dshr(_io_rem_T_2, clz) @[Arith.scala 650:46]
            node _io_rem_T_4 = dshr(P, clz) @[Arith.scala 650:56]
            node _io_rem_T_5 = mux(P_neg, _io_rem_T_3, _io_rem_T_4) @[Arith.scala 650:30]
            io.rem <= _io_rem_T_5 @[Arith.scala 650:24]
            node _io_quo_T_2 = sub(pos_quo, neg_quo) @[Arith.scala 651:46]
            node _io_quo_T_3 = tail(_io_quo_T_2, 1) @[Arith.scala 651:46]
            node _io_quo_T_4 = sub(_io_quo_T_3, UInt<1>("h1")) @[Arith.scala 651:56]
            node _io_quo_T_5 = tail(_io_quo_T_4, 1) @[Arith.scala 651:56]
            node _io_quo_T_6 = sub(pos_quo, neg_quo) @[Arith.scala 651:71]
            node _io_quo_T_7 = tail(_io_quo_T_6, 1) @[Arith.scala 651:71]
            node _io_quo_T_8 = mux(P_neg, _io_quo_T_5, _io_quo_T_7) @[Arith.scala 651:30]
            io.quo <= _io_quo_T_8 @[Arith.scala 651:24]
            io.finish <= UInt<1>("h1") @[Arith.scala 652:24]

  module Top :
    input clock : Clock
    input reset : UInt<1>
    output io : { o1 : UInt<64>, o2 : UInt<32>, o3 : UInt<64>, o4 : UInt<64>}

    inst IF of If @[Top.scala 17:29]
    IF.clock <= clock
    IF.reset <= reset
    inst CSR of CSR @[Top.scala 18:29]
    CSR.clock <= clock
    CSR.reset <= reset
    inst REGFILE of Regfile @[Top.scala 19:29]
    REGFILE.clock <= clock
    REGFILE.reset <= reset
    inst IF_ID of If_Id @[Top.scala 20:29]
    IF_ID.clock <= clock
    IF_ID.reset <= reset
    inst ID of Id @[Top.scala 21:29]
    inst ID_EX of Id_Ex @[Top.scala 22:29]
    ID_EX.clock <= clock
    ID_EX.reset <= reset
    inst EX of Ex @[Top.scala 23:29]
    inst EX_MEM of Ex_Mem @[Top.scala 24:29]
    EX_MEM.clock <= clock
    EX_MEM.reset <= reset
    inst MEM of MEM @[Top.scala 25:29]
    MEM.clock <= clock
    MEM.reset <= reset
    inst MEM_WB of Mem_Wb @[Top.scala 26:29]
    MEM_WB.clock <= clock
    MEM_WB.reset <= reset
    inst WB of Wb @[Top.scala 27:29]
    inst CTRL of Ctrl @[Top.scala 28:29]
    inst DIV of Div @[Top.scala 29:29]
    DIV.clock <= clock
    DIV.reset <= reset
    node _IF_io_stall_T = bits(CTRL.io.stall, 0, 0) @[Top.scala 31:41]
    IF.io.stall <= _IF_io_stall_T @[Top.scala 31:25]
    node _IF_ID_io_stall_T = bits(CTRL.io.stall, 1, 1) @[Top.scala 32:41]
    IF_ID.io.stall <= _IF_ID_io_stall_T @[Top.scala 32:25]
    node _ID_EX_io_stall_T = bits(CTRL.io.stall, 2, 2) @[Top.scala 33:41]
    ID_EX.io.stall <= _ID_EX_io_stall_T @[Top.scala 33:25]
    node _EX_MEM_io_stall_T = bits(CTRL.io.stall, 3, 3) @[Top.scala 34:41]
    EX_MEM.io.stall <= _EX_MEM_io_stall_T @[Top.scala 34:25]
    node _MEM_WB_io_stall_T = bits(CTRL.io.stall, 4, 4) @[Top.scala 35:41]
    MEM_WB.io.stall <= _MEM_WB_io_stall_T @[Top.scala 35:25]
    node _IF_io_flush_T = bits(CTRL.io.flush, 0, 0) @[Top.scala 37:41]
    IF.io.flush <= _IF_io_flush_T @[Top.scala 37:25]
    node _IF_ID_io_flush_T = bits(CTRL.io.flush, 1, 1) @[Top.scala 38:41]
    IF_ID.io.flush <= _IF_ID_io_flush_T @[Top.scala 38:25]
    node _ID_EX_io_flush_T = bits(CTRL.io.flush, 2, 2) @[Top.scala 39:41]
    ID_EX.io.flush <= _ID_EX_io_flush_T @[Top.scala 39:25]
    node _EX_MEM_io_flush_T = bits(CTRL.io.flush, 3, 3) @[Top.scala 40:41]
    EX_MEM.io.flush <= _EX_MEM_io_flush_T @[Top.scala 40:25]
    node _MEM_WB_io_flush_T = bits(CTRL.io.flush, 4, 4) @[Top.scala 41:41]
    MEM_WB.io.flush <= _MEM_WB_io_flush_T @[Top.scala 41:25]
    IF.io.branchOp.target <= ID.io.decInfo.branchOp.target @[Top.scala 43:25]
    IF.io.branchOp.taken <= ID.io.decInfo.branchOp.taken @[Top.scala 43:25]
    IF.io.excep.new_pc <= WB.io.if_excep.new_pc @[Top.scala 44:25]
    IF.io.excep.happen <= WB.io.if_excep.happen @[Top.scala 44:25]
    IF_ID.io.inst_i <= IF.io.inst_o @[Top.scala 46:25]
    IF_ID.io.pc_i <= IF.io.pc_o @[Top.scala 47:25]
    ID.io.inst_i <= IF_ID.io.inst_o @[Top.scala 49:25]
    ID.io.pc <= IF_ID.io.pc_o @[Top.scala 50:25]
    ID.io.prev_rd <= ID_EX.io.decInfo_o.rd @[Top.scala 52:25]
    ID.io.prev_is_load <= ID_EX.io.decInfo_o.loadOp.isLoad @[Top.scala 53:25]
    REGFILE.io.id2Rf <= ID.io.id2Rf @[Top.scala 55:29]
    ID.io.rf2Id <= REGFILE.io.rf2Id @[Top.scala 56:29]
    CSR.io.ID_2_CSR <= ID.io.ID_2_CSR @[Top.scala 58:29]
    ID.io.CSR_2_ID <= CSR.io.CSR_2_ID @[Top.scala 59:29]
    ID_EX.io.decInfo_i <= ID.io.decInfo @[Top.scala 61:29]
    ID_EX.io.exception_i <= ID.io.exception @[Top.scala 62:29]
    EX.io.decInfo <= ID_EX.io.decInfo_o @[Top.scala 65:29]
    EX.io.exception_i <= ID_EX.io.exception_o @[Top.scala 66:29]
    EX_MEM.io.storeOp_i <= EX.io.storeOp @[Top.scala 68:29]
    EX_MEM.io.writeRfOp_i <= EX.io.writeRfOp @[Top.scala 69:29]
    EX_MEM.io.loadOp_i <= EX.io.loadOp @[Top.scala 70:29]
    EX_MEM.io.writeCSROp_i <= EX.io.writeCSROp @[Top.scala 71:29]
    EX_MEM.io.exception_i <= EX.io.exception_o @[Top.scala 72:29]
    MEM.io.loadOp <= EX_MEM.io.loadOp_o @[Top.scala 74:29]
    MEM.io.storeOp <= EX_MEM.io.storeOp_o @[Top.scala 75:29]
    MEM.io.writeRfOp_i <= EX_MEM.io.writeRfOp_o @[Top.scala 76:29]
    MEM.io.writeCSROp_i <= EX_MEM.io.writeCSROp_o @[Top.scala 77:29]
    MEM.io.exception_i <= EX_MEM.io.exception_o @[Top.scala 78:29]
    MEM_WB.io.writeRfOp_i <= MEM.io.writeRfOp_o @[Top.scala 80:29]
    MEM_WB.io.writeCSROp_i <= MEM.io.writeCSROp_o @[Top.scala 81:29]
    MEM_WB.io.exception_i <= MEM.io.exception_o @[Top.scala 82:29]
    WB.io.writeRfOp_i <= MEM_WB.io.writeRfOp_o @[Top.scala 84:29]
    WB.io.writeCSROp_i <= MEM_WB.io.writeCSROp_o @[Top.scala 85:29]
    WB.io.exception_i <= MEM_WB.io.exception_o @[Top.scala 86:29]
    REGFILE.io.writeRfOp <= WB.io.writeRfOp_o @[Top.scala 88:29]
    CSR.io.writeOp <= WB.io.writeCSROp_o @[Top.scala 89:29]
    CSR.io.exception <= WB.io.exception_o @[Top.scala 90:29]
    ID.io.fwd.rf.wb <= WB.io.rf_fwd @[Top.scala 92:26]
    ID.io.fwd.rf.mem <= MEM.io.rf_fwd @[Top.scala 93:26]
    ID.io.fwd.rf.ex <= EX.io.rf_fwd @[Top.scala 94:26]
    ID.io.fwd.csr.wb <= WB.io.csr_fwd @[Top.scala 95:26]
    ID.io.fwd.csr.mem <= MEM.io.csr_fwd @[Top.scala 96:26]
    ID.io.fwd.csr.ex <= EX.io.csr_fwd @[Top.scala 97:26]
    CTRL.io.id_stall_req <= ID.io.stall_req @[Top.scala 99:29]
    CTRL.io.ex_stall_req <= EX.io.stall_req @[Top.scala 100:29]
    CTRL.io.id_flush_req <= ID.io.flush_req @[Top.scala 101:29]
    CTRL.io.excep <= WB.io.exception_o.happen @[Top.scala 103:29]
    DIV.io.a <= EX.io.divOP.a @[Top.scala 106:19]
    DIV.io.b <= EX.io.divOP.b @[Top.scala 107:19]
    DIV.io.start <= EX.io.divOP.start @[Top.scala 109:19]
    EX.io.divRes.quo <= DIV.io.quo @[Top.scala 111:25]
    EX.io.divRes.rem <= DIV.io.rem @[Top.scala 112:25]
    EX.io.divRes.finish <= DIV.io.finish @[Top.scala 113:25]
    EX.io.divRes.err <= DIV.io.div_err @[Top.scala 114:25]
    io.o1 <= WB.io.writeRfOp_o.data @[Top.scala 117:7]
    io.o2 <= WB.io.writeCSROp_o.data @[Top.scala 118:7]
    io.o3 <= UInt<1>("h0") @[Top.scala 119:7]
    io.o4 <= UInt<1>("h0") @[Top.scala 120:7]

